{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anton\\\\Desktop\\\\FInt.Tchat\\\\dev\\\\V10\\\\client\\\\src\\\\contexts\\\\ChannelsProvider.js\";\nimport React, { useContext, useState, useEffect } from 'react';\nimport { useSocket } from './SocketProvider';\nimport { useUser } from './UserProvider';\nimport api from \"../api\";\nconst ChannelsContext = React.createContext();\nexport function useChannels() {\n  return useContext(ChannelsContext);\n}\nexport function ChannelsProvider({\n  id,\n  children\n}) {\n  const socket = useSocket();\n  const {\n    client,\n    updateUser\n  } = useUser();\n  const [channels, setChannels] = useState(null);\n  const [selectedChannel, setSelectedChannel] = useState(null);\n\n  function addMessageToDatabase(channel, text, client, recipients) {\n    // J'isole les données du client dans une variable pour pouvoir les modifier\n    var clientEdit = client; // Je boucle tous les \"channels\" du client\n\n    for (let i = 0; i < clientEdit.channels.length; i++) {\n      // Je teste si l'id du \"channel\" sélectionné correspond à l'id du \"channel\" passé dans la boucle\n      if (clientEdit.channels[i].id === channel.id) {\n        // J'ajoute le message aux données du client\n        clientEdit.channels[i].messages.push({\n          sender: client.id,\n          date: new Date(),\n          text: text\n        }); // Je mets à jour le client\n\n        api.updateUserById(clientEdit.id, {\n          data: {\n            channels: clientEdit.channels\n          }\n        }).then(res => {});\n      }\n    } // Je boucle tous les destinataires\n\n\n    recipients.forEach(recipient => {\n      // J'isole les données du destinataire dans une variable pour pouvoir les modifier\n      var recipientEdit = recipient; // Je boucle tous les \"channels\" du destinataire\n\n      for (let i = 0; i < recipientEdit.channels.length; i++) {\n        // Je teste si l'id du \"channel\" sélectionné correspond à l'id du \"channel\" passé dans la boucle\n        if (recipientEdit.channels[i].id === channel.id) {\n          // J'ajoute le message aux données du destinataire\n          recipientEdit.channels[i].messages.push({\n            sender: client.id,\n            date: new Date(),\n            text: text\n          }); // Je mets à jour le destinataire\n\n          api.updateUserById(recipientEdit.id, {\n            data: {\n              channels: recipientEdit.channels\n            }\n          }).then(res => {});\n        }\n      }\n    });\n  }\n\n  function sendMessage(channel, text, client, recipients) {\n    socket.emit('send-message', {\n      channelId: channel.id,\n      recipients,\n      date: new Date(),\n      text\n    });\n    addMessageToDatabase(channel, text, client, recipients);\n  }\n\n  useEffect(() => {\n    if (socket == null) return;\n    socket.on('receive-message', data => {\n      console.log(data);\n      console.log();\n      /*\n      channels.forEach((channel, index) => {\n        console.log(index)\n        if (channel.id === data.channelId) {\n          //setChannels(channel)\n        }\n      })*/\n    });\n    return () => socket.off('receive-message');\n  }, [socket]);\n  const value = {\n    channels,\n    setChannels,\n    selectedChannel,\n    setSelectedChannel,\n    sendMessage\n  };\n  return /*#__PURE__*/React.createElement(ChannelsContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }, children);\n}\nexport default ChannelsContext;\n/*\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false\n\n  a.sort()\n  b.sort()\n\n  return a.every((element, index) => {\n    return element === b[index]\n  })\n}\n\nconst addMessageToChannel = useCallback(({ recipients, text, sender }) => {\n  setChannels(prevChannels => {\n    let madeChange = false\n    const newMessage = { sender, text }\n    const newChannels = prevChannels.map(channel => {\n      if (arrayEquality(channel.recipients, recipients)) {\n        madeChange = true\n        return {\n          ...channel,\n          messages: [...channel.messages, newMessage]\n        }\n      }\n\n      return channel\n    })\n\n    if (madeChange) {\n      return newChannels\n    } else {\n      return [\n        ...prevChannels,\n        { recipients, messages: [newMessage] }\n      ]\n    }\n  })\n}, [])*/","map":{"version":3,"sources":["C:/Users/anton/Desktop/FInt.Tchat/dev/V10/client/src/contexts/ChannelsProvider.js"],"names":["React","useContext","useState","useEffect","useSocket","useUser","api","ChannelsContext","createContext","useChannels","ChannelsProvider","id","children","socket","client","updateUser","channels","setChannels","selectedChannel","setSelectedChannel","addMessageToDatabase","channel","text","recipients","clientEdit","i","length","messages","push","sender","date","Date","updateUserById","data","then","res","forEach","recipient","recipientEdit","sendMessage","emit","channelId","on","console","log","off","value"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from 'react'\nimport { useSocket } from './SocketProvider';\nimport { useUser } from './UserProvider';\nimport api from \"../api\"\n\nconst ChannelsContext = React.createContext()\n\nexport function useChannels() {\n  return useContext(ChannelsContext)\n}\n\nexport function ChannelsProvider({ id, children }) {\n  const socket = useSocket()\n  const { client, updateUser } = useUser()\n  const [channels, setChannels] = useState(null)\n  const [selectedChannel, setSelectedChannel] = useState(null)\n\n  function addMessageToDatabase(channel, text, client, recipients) {\n\n    // J'isole les données du client dans une variable pour pouvoir les modifier\n    var clientEdit = client\n    // Je boucle tous les \"channels\" du client\n    for (let i = 0; i < clientEdit.channels.length; i++) {\n      // Je teste si l'id du \"channel\" sélectionné correspond à l'id du \"channel\" passé dans la boucle\n      if (clientEdit.channels[i].id === channel.id) {\n        // J'ajoute le message aux données du client\n        clientEdit.channels[i].messages.push({\n          sender: client.id,\n          date: new Date(),\n          text: text\n        })\n        // Je mets à jour le client\n        api.updateUserById(clientEdit.id, { data: { channels: clientEdit.channels } }).then(res => {})\n      }\n    }\n\n    // Je boucle tous les destinataires\n    recipients.forEach(recipient => {\n      // J'isole les données du destinataire dans une variable pour pouvoir les modifier\n      var recipientEdit = recipient\n      // Je boucle tous les \"channels\" du destinataire\n      for (let i = 0; i < recipientEdit.channels.length; i++) {\n        // Je teste si l'id du \"channel\" sélectionné correspond à l'id du \"channel\" passé dans la boucle\n        if (recipientEdit.channels[i].id === channel.id) {\n          // J'ajoute le message aux données du destinataire\n          recipientEdit.channels[i].messages.push({\n            sender: client.id,\n            date: new Date(),\n            text: text\n          })\n          // Je mets à jour le destinataire\n          api.updateUserById(recipientEdit.id, { data: { channels: recipientEdit.channels } }).then(res => {})\n        }\n      }\n    });\n  }\n\n  function sendMessage(channel, text, client, recipients) {\n    socket.emit('send-message', { channelId: channel.id, recipients, date: new Date(), text })\n\n    addMessageToDatabase(channel, text, client, recipients)\n  }\n\n  useEffect(() => {\n    if (socket == null) return\n\n    socket.on('receive-message', data => {\n      console.log(data);\n      console.log();\n      /*\n      channels.forEach((channel, index) => {\n        console.log(index)\n        if (channel.id === data.channelId) {\n          //setChannels(channel)\n        }\n      })*/\n    });\n    \n    return () => socket.off('receive-message')\n  }, [socket])\n\n  const value = {\n    channels,\n    setChannels,\n    selectedChannel,\n    setSelectedChannel,\n    sendMessage\n  }\n\n  return (\n    <ChannelsContext.Provider value={value}>\n      {children}\n    </ChannelsContext.Provider>\n  )\n}\n\nexport default ChannelsContext\n\n/*\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false\n\n  a.sort()\n  b.sort()\n\n  return a.every((element, index) => {\n    return element === b[index]\n  })\n}\n\nconst addMessageToChannel = useCallback(({ recipients, text, sender }) => {\n  setChannels(prevChannels => {\n    let madeChange = false\n    const newMessage = { sender, text }\n    const newChannels = prevChannels.map(channel => {\n      if (arrayEquality(channel.recipients, recipients)) {\n        madeChange = true\n        return {\n          ...channel,\n          messages: [...channel.messages, newMessage]\n        }\n      }\n\n      return channel\n    })\n\n    if (madeChange) {\n      return newChannels\n    } else {\n      return [\n        ...prevChannels,\n        { recipients, messages: [newMessage] }\n      ]\n    }\n  })\n}, [])*/"]},"metadata":{},"sourceType":"module"}