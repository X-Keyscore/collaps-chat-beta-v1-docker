{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anton\\\\Desktop\\\\FInt.Tchat\\\\dev\\\\V8\\\\client\\\\src\\\\contexts\\\\ChannelsProvider.js\";\nimport React, { useContext, useState, useEffect, useCallback } from 'react';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\nimport { useSocket } from './SocketProvider';\nconst ChannelsContext = React.createContext();\nexport function useChannels() {\n  return useContext(ChannelsContext);\n}\nexport function ConversationsProvider({\n  id,\n  children\n}) {\n  const [channels, setChannels] = useLocalStorage('conversations', []);\n  const [selectedChannelId, setSelectedChannelId] = useState(channels.length !== 0 ? channels[0].id : Number);\n  const {\n    contacts\n  } = useContacts();\n  const socket = useSocket();\n\n  function createChannel(recipients) {\n    setChannels(prevChannels => {\n      // Création d'un id pour la conversation\n      const id = Math.floor(Math.random() * 10000000000000000) + 99999999999999999; // Et je le sélectionne\n\n      setSelectedChannelId(id); // Pour finir je rentre la nouvelle conversation\n\n      return [...prevChannels, {\n        id: id,\n        recipients,\n        messages: []\n      }];\n    });\n  }\n\n  const addMessageToChannel = useCallback(({\n    recipients,\n    text,\n    sender\n  }) => {\n    setChannels(prevChannels => {\n      let madeChange = false;\n      const newMessage = {\n        sender,\n        text\n      };\n      const newChannels = prevChannels.map(channel => {\n        if (arrayEquality(channel.recipients, recipients)) {\n          madeChange = true;\n          return { ...conversation,\n            messages: [...conversation.messages, newMessage]\n          };\n        }\n\n        return conversation;\n      });\n\n      if (madeChange) {\n        return newChannels;\n      } else {\n        return [...prevChannels, {\n          recipients,\n          messages: [newMessage]\n        }];\n      }\n    });\n  }, [setChannels]);\n  useEffect(() => {\n    if (socket == null) return;\n    socket.on('receive-message', addMessageToChannel);\n    return () => socket.off('receive-message');\n  }, [socket, addMessageToChannel]);\n\n  function sendMessage(recipients, text) {\n    socket.emit('send-message', {\n      recipients,\n      text\n    });\n    addMessageToChannel({\n      recipients,\n      text,\n      sender: id\n    });\n  }\n\n  const formattedChannels = channels.map((channel, index) => {\n    const recipients = channel.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.id === recipient;\n      });\n      const name = contact && contact.name || recipient;\n      return {\n        id: recipient,\n        name\n      };\n    });\n    const messages = channel.messages.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.id === message.sender;\n      });\n      const name = contact && contact.name || message.sender;\n      const fromMe = id === message.sender;\n      return { ...message,\n        senderName: name,\n        fromMe\n      };\n    });\n    const selected = channel.id === selectedChannelId;\n    return { ...channel,\n      messages,\n      recipients,\n      selected\n    };\n  });\n  const value = {\n    channels: formattedChannels,\n    selectedChannel: formattedChannels.filter(channel => channel.id === selectedChannelId)[0],\n    sendMessage,\n    selectChannelId: setSelectedChannelId,\n    createChannel\n  };\n  return /*#__PURE__*/React.createElement(ChannelsContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false;\n  a.sort();\n  b.sort();\n  return a.every((element, index) => {\n    return element === b[index];\n  });\n}\n\nexport default ChannelsContext;","map":{"version":3,"sources":["C:/Users/anton/Desktop/FInt.Tchat/dev/V8/client/src/contexts/ChannelsProvider.js"],"names":["React","useContext","useState","useEffect","useCallback","useLocalStorage","useContacts","useSocket","ChannelsContext","createContext","useChannels","ConversationsProvider","id","children","channels","setChannels","selectedChannelId","setSelectedChannelId","length","Number","contacts","socket","createChannel","recipients","prevChannels","Math","floor","random","messages","addMessageToChannel","text","sender","madeChange","newMessage","newChannels","map","channel","arrayEquality","conversation","on","off","sendMessage","emit","formattedChannels","index","recipient","contact","find","name","message","fromMe","senderName","selected","value","selectedChannel","filter","selectChannelId","a","b","sort","every","element"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect, useCallback } from 'react'\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\nimport { useSocket } from './SocketProvider';\n\nconst ChannelsContext = React.createContext()\n\nexport function useChannels() {\n  return useContext(ChannelsContext)\n}\n\nexport function ConversationsProvider({ id, children }) {\n  const [channels, setChannels] = useLocalStorage('conversations', [])\n  const [selectedChannelId, setSelectedChannelId] = useState(channels.length !== 0 ? channels[0].id : Number)\n  const { contacts } = useContacts()\n  const socket = useSocket()\n\n  function createChannel(recipients) {\n    setChannels(prevChannels => {\n      // Création d'un id pour la conversation\n      const id = Math.floor(Math.random() * 10000000000000000) + 99999999999999999;\n      // Et je le sélectionne\n      setSelectedChannelId(id)\n      // Pour finir je rentre la nouvelle conversation\n      return [...prevChannels, { id: id, recipients, messages: [] }]\n    })\n  }\n\n  const addMessageToChannel = useCallback(({ recipients, text, sender }) => {\n    setChannels(prevChannels => {\n      let madeChange = false\n      const newMessage = { sender, text }\n      const newChannels = prevChannels.map(channel => {\n        if (arrayEquality(channel.recipients, recipients)) {\n          madeChange = true\n          return {\n            ...conversation,\n            messages: [...conversation.messages, newMessage]\n          }\n        }\n\n        return conversation\n      })\n\n      if (madeChange) {\n        return newChannels\n      } else {\n        return [\n          ...prevChannels,\n          { recipients, messages: [newMessage] }\n        ]\n      }\n    })\n  }, [setChannels])\n\n  useEffect(() => {\n    if (socket == null) return\n\n    socket.on('receive-message', addMessageToChannel)\n\n    return () => socket.off('receive-message')\n  }, [socket, addMessageToChannel])\n\n  function sendMessage(recipients, text) {\n    socket.emit('send-message', { recipients, text })\n\n    addMessageToChannel({ recipients, text, sender: id })\n  }\n\n  const formattedChannels = channels.map((channel, index) => {\n\n    const recipients = channel.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.id === recipient\n      })\n      const name = (contact && contact.name) || recipient\n      return { id: recipient, name }\n    })\n\n    const messages = channel.messages.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.id === message.sender\n      })\n      const name = (contact && contact.name) || message.sender\n      const fromMe = id === message.sender\n      return { ...message, senderName: name, fromMe }\n    })\n\n    const selected = channel.id === selectedChannelId\n    return { ...channel, messages, recipients, selected }\n  })\n\n  const value = {\n    channels: formattedChannels,\n    selectedChannel: formattedChannels.filter(channel => channel.id === selectedChannelId)[0],\n    sendMessage,\n    selectChannelId: setSelectedChannelId,\n    createChannel\n  }\n\n  return (\n    <ChannelsContext.Provider value={value}>\n      {children}\n    </ChannelsContext.Provider>\n  )\n}\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false\n\n  a.sort()\n  b.sort()\n\n  return a.every((element, index) => {\n    return element === b[index]\n  })\n}\n\nexport default ChannelsContext"]},"metadata":{},"sourceType":"module"}