{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anton\\\\Desktop\\\\collaps-chat\\\\dev\\\\Beta\\\\V1\\\\client\\\\src\\\\components\\\\App.js\";\nimport React, { useState, useEffect } from 'react';\nimport Connection from './Connection/Connection';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport Dashboard from './Dashboard';\nimport api from '../api';\nimport { ChannelsProvider } from '../contexts/ChannelsProvider';\nimport { SocketProvider } from '../contexts/SocketProvider';\nimport { UserProvider } from '../contexts/UserProvider';\n\nfunction App() {\n  // Fonctions pour utiliser le stockage local pour l'id et le token\n  const [id, setId] = useLocalStorage('id');\n  const [token, setToken] = useLocalStorage('token');\n  const [loginValidity, setLoginValidity] = useState(false);\n  const connection = useEffect(() => {\n    if (id === undefined || token === undefined) {\n      // Si l'id ou le token n'est pas présent il faut se connecter pour obtenir ces informations\n      return;\n    } else {\n      api.autologinUser({\n        id,\n        token\n      }).then(res => {\n        if (!res.data.status.success) return;\n        if (!res.data.status.idValide) return;\n        if (!res.data.status.tokenValide) return; // Sauvegarde du token en locale\n\n        setToken(res.data.user.token); // Valider l'accés\n\n        setLoginValidity(true);\n      });\n    }\n  }, []);\n\n  if (loginValidity) {\n    // Si toutes les informations sont présentes j'affiche le \"Dashboard\"\n    const localStorage = {\n      id,\n      token\n    };\n    return /*#__PURE__*/React.createElement(SocketProvider, {\n      localStorage: localStorage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(UserProvider, {\n      localStorage: localStorage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ChannelsProvider, {\n      localStorage: localStorage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Dashboard, {\n      localStorage: localStorage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }\n    }))));\n  } else {\n    return /*#__PURE__*/React.createElement(Connection, {\n      setId: setId,\n      setToken: setToken,\n      setLoginValidity: setLoginValidity,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 12\n      }\n    });\n  }\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/anton/Desktop/collaps-chat/dev/Beta/V1/client/src/components/App.js"],"names":["React","useState","useEffect","Connection","useLocalStorage","Dashboard","api","ChannelsProvider","SocketProvider","UserProvider","App","id","setId","token","setToken","loginValidity","setLoginValidity","connection","undefined","autologinUser","then","res","data","status","success","idValide","tokenValide","user","localStorage"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,SAASC,cAAT,QAA+B,4BAA/B;AACA,SAASC,YAAT,QAA6B,0BAA7B;;AAEA,SAASC,GAAT,GAAe;AACb;AACA,QAAM,CAACC,EAAD,EAAKC,KAAL,IAAcR,eAAe,CAAC,IAAD,CAAnC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,eAAe,CAAC,OAAD,CAAzC;AAEA,QAAM,CAACW,aAAD,EAAgBC,gBAAhB,IAAoCf,QAAQ,CAAC,KAAD,CAAlD;AAEA,QAAMgB,UAAU,GAEhBf,SAAS,CAAC,MAAM;AACd,QAAIS,EAAE,KAAKO,SAAP,IAAoBL,KAAK,KAAKK,SAAlC,EAA6C;AAAC;AAC5C;AACD,KAFD,MAEO;AACLZ,MAAAA,GAAG,CAACa,aAAJ,CAAkB;AAAER,QAAAA,EAAF;AAAME,QAAAA;AAAN,OAAlB,EAAiCO,IAAjC,CAAsCC,GAAG,IAAI;AAC3C,YAAI,CAACA,GAAG,CAACC,IAAJ,CAASC,MAAT,CAAgBC,OAArB,EAA8B;AAC9B,YAAI,CAACH,GAAG,CAACC,IAAJ,CAASC,MAAT,CAAgBE,QAArB,EAA+B;AAC/B,YAAI,CAACJ,GAAG,CAACC,IAAJ,CAASC,MAAT,CAAgBG,WAArB,EAAkC,OAHS,CAK3C;;AACAZ,QAAAA,QAAQ,CAACO,GAAG,CAACC,IAAJ,CAASK,IAAT,CAAcd,KAAf,CAAR,CAN2C,CAO3C;;AACAG,QAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD,OATD;AAUD;AACF,GAfQ,EAeN,EAfM,CAFT;;AAmBA,MAAID,aAAJ,EAAmB;AAAC;AAClB,UAAMa,YAAY,GAAG;AAAEjB,MAAAA,EAAF;AAAME,MAAAA;AAAN,KAArB;AACA,wBACE,oBAAC,cAAD;AAAgB,MAAA,YAAY,EAAEe,YAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,YAAD;AAAc,MAAA,YAAY,EAAEA,YAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,gBAAD;AAAkB,MAAA,YAAY,EAAEA,YAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,SAAD;AAAW,MAAA,YAAY,EAAEA,YAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CADF,CADF;AASD,GAXD,MAWO;AACL,wBAAO,oBAAC,UAAD;AAAY,MAAA,KAAK,EAAEhB,KAAnB;AAA0B,MAAA,QAAQ,EAAEE,QAApC;AAA8C,MAAA,gBAAgB,EAAEE,gBAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;AAGF;;AAED,eAAeN,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Connection from './Connection/Connection'\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport Dashboard from './Dashboard'\nimport api from '../api'\nimport { ChannelsProvider } from '../contexts/ChannelsProvider';\nimport { SocketProvider } from '../contexts/SocketProvider';\nimport { UserProvider } from '../contexts/UserProvider';\n\nfunction App() {\n  // Fonctions pour utiliser le stockage local pour l'id et le token\n  const [id, setId] = useLocalStorage('id')\n  const [token, setToken] = useLocalStorage('token')\n\n  const [loginValidity, setLoginValidity] = useState(false)\n\n  const connection = \n\n  useEffect(() => {\n    if (id === undefined || token === undefined) {// Si l'id ou le token n'est pas présent il faut se connecter pour obtenir ces informations\n      return\n    } else {\n      api.autologinUser({ id, token }).then(res => {\n        if (!res.data.status.success) return\n        if (!res.data.status.idValide) return\n        if (!res.data.status.tokenValide) return\n\n        // Sauvegarde du token en locale\n        setToken(res.data.user.token)\n        // Valider l'accés\n        setLoginValidity(true)\n      })\n    }\n  }, []);\n\n  if (loginValidity) {// Si toutes les informations sont présentes j'affiche le \"Dashboard\"\n    const localStorage = { id, token }\n    return (\n      <SocketProvider localStorage={localStorage}>\n        <UserProvider localStorage={localStorage}>\n          <ChannelsProvider localStorage={localStorage}>\n            <Dashboard localStorage={localStorage} />\n          </ChannelsProvider>\n        </UserProvider>\n      </SocketProvider>\n    )\n  } else {\n    return <Connection setId={setId} setToken={setToken} setLoginValidity={setLoginValidity} />\n  }\n\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}