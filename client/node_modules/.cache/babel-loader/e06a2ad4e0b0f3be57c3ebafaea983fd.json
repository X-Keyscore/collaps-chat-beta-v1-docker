{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anton\\\\Desktop\\\\collaps-chat\\\\dev\\\\Beta\\\\V1\\\\client\\\\src\\\\components\\\\sidebar\\\\NewContact.js\";\nimport React, { useState } from 'react';\nimport api from \"../../api\";\nimport { useUser } from '../../contexts/UserProvider';\nimport { useChannels } from '../../contexts/ChannelsProvider';\n\nasync function NewContact({\n  isShowing,\n  hide,\n  localStorage\n}) {\n  const {\n    client,\n    updateUser\n  } = useUser();\n  const {\n    channels,\n    createChannel,\n    setChannels,\n    setSelectedChannel\n  } = useChannels();\n  console.log(client); // Création d'un \"useState\" pour stocker l'id\n\n  const [id, setId] = useState({\n    value: \"\",\n    warning: \"\"\n  });\n\n  async function handleSubmit(e) {\n    e.preventDefault(); // Je teste si la valeur est bien celle d'un id\n\n    if (id.value.length === 0) return setId({\n      value: \"\",\n      warning: \"Il faut entrer un id\"\n    }); // Je teste si la valeur est bien celle d'un id\n\n    if (id.value.length !== 18 && !/^[0-9]*$/.test(id.value)) return setId({\n      value: \"\",\n      warning: \"Ceci n'est pas un id valide\"\n    }); // Je test si l'id n'est pas celui du client\n\n    if (id.value === client.id) return setId({\n      value: \"\",\n      warning: \"Tu ne peux pas t'ajouter\"\n    }); // Je test si le contact n'est pas déjà ajouter\n\n    var valid = true;\n    client.channels.filter(channel => channel.type === \"private\").forEach(channel => {\n      if (channel.id === id.value) valid = false;\n    });\n    if (valid === false) return setId({\n      value: \"\",\n      warning: \"Ce contact existe déjà\"\n    });\n    api.getUserById(id.value).then(recipient => {\n      recipient = recipient.data.user; //if (recipient !== null) return\n      // Id unique du channel\n\n      const idChannel = (Math.floor(Math.random() * 10000000000000000) + 99999999999999999).toString();\n      setChannels(channels => [...channels, {\n        id: idChannel,\n        type: \"private\",\n        recipients: [{\n          id: recipient.id,\n          pseudo: recipient.pseudo\n        }],\n        messages: []\n      }]);\n      setSelectedChannel({\n        id: idChannel,\n        type: \"private\",\n        recipients: [{\n          id: recipient.id,\n          pseudo: recipient.pseudo\n        }],\n        messages: [],\n        selected: true,\n        key: channels.length === 0 ? 0 : channels.length - 1\n      });\n      var clientChannels = client.channels;\n      clientChannels.push({\n        id: idChannel,\n        type: \"private\"\n      });\n      var recipientChannels = recipient.channels;\n      recipientChannels.push({\n        id: idChannel,\n        type: \"private\"\n      }); // Mise à jour du client\n\n      updateUser(client.id, {\n        channels: clientChannels\n      }); // Mise à jour du destinataire\n\n      updateUser(recipient.id, {\n        channels: recipientChannels\n      }); // Créaction du channel\n\n      const res = createChannel({\n        client: {\n          id: localStorage.id,\n          token: localStorage.token\n        },\n        recipient: {\n          id: id.value\n        },\n        channel: {\n          id: idChannel,\n          type: \"private\",\n          recipients: [client.id, recipient.id],\n          messages: []\n        }\n      });\n      console.log(res);\n      if (res.status.success === false) return setId({\n        value: \"\",\n        warning: res.status.msg\n      });\n      setId({\n        value: \"\",\n        warning: \"\"\n      });\n      hide();\n    }, error => {\n      console.log(error);\n    });\n  }\n\n  return isShowing ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"form\", {\n    className: \"createChannelPrivate\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"createChannelPrivate-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }, \"Ajouter un contact\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"createChannelPrivate-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 6\n    }\n  }, id.warning ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"title-warning\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 21\n    }\n  }, id.warning, \" \") : null, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"input\",\n    type: \"text\",\n    placeholder: \"Id\",\n    value: id.value,\n    onChange: e => setId({\n      value: e.target.value,\n      warning: \"\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"createChannelPrivate-footer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn-text-small\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }\n  }, \"Ajouter\")))) : null;\n}\n\nexport default NewContact;","map":{"version":3,"sources":["C:/Users/anton/Desktop/collaps-chat/dev/Beta/V1/client/src/components/sidebar/NewContact.js"],"names":["React","useState","api","useUser","useChannels","NewContact","isShowing","hide","localStorage","client","updateUser","channels","createChannel","setChannels","setSelectedChannel","console","log","id","setId","value","warning","handleSubmit","e","preventDefault","length","test","valid","filter","channel","type","forEach","getUserById","then","recipient","data","user","idChannel","Math","floor","random","toString","recipients","pseudo","messages","selected","key","clientChannels","push","recipientChannels","res","token","status","success","msg","error","target"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport api from \"../../api\"\r\nimport { useUser } from '../../contexts/UserProvider';\r\nimport { useChannels } from '../../contexts/ChannelsProvider';\r\n\r\nasync function NewContact({ isShowing, hide, localStorage }) {\r\n\tconst { client, updateUser } = useUser()\r\n\tconst { channels, createChannel, setChannels, setSelectedChannel } = useChannels()\r\n\r\n\tconsole.log(client)\r\n\t// Création d'un \"useState\" pour stocker l'id\r\n\tconst [id, setId] = useState({\r\n\t\tvalue: \"\",\r\n\t\twarning: \"\"\r\n\t})\r\n\r\n\tasync function handleSubmit(e) {\r\n\t\te.preventDefault()\r\n\r\n\t\t// Je teste si la valeur est bien celle d'un id\r\n\t\tif (id.value.length === 0) return setId({\r\n\t\t\tvalue: \"\",\r\n\t\t\twarning: \"Il faut entrer un id\"\r\n\t\t})\r\n\r\n\t\t// Je teste si la valeur est bien celle d'un id\r\n\t\tif (id.value.length !== 18 && !/^[0-9]*$/.test(id.value)) return setId({\r\n\t\t\tvalue: \"\",\r\n\t\t\twarning: \"Ceci n'est pas un id valide\"\r\n\t\t})\r\n\r\n\t\t// Je test si l'id n'est pas celui du client\r\n\t\tif (id.value === client.id) return setId({\r\n\t\t\tvalue: \"\",\r\n\t\t\twarning: \"Tu ne peux pas t'ajouter\"\r\n\t\t})\r\n\r\n\t\t// Je test si le contact n'est pas déjà ajouter\r\n\t\tvar valid = true;\r\n\t\tclient.channels.filter(channel => channel.type === \"private\").forEach(channel => {\r\n\t\t\tif (channel.id === id.value) valid = false;\r\n\t\t});\r\n\t\tif (valid === false) return setId({\r\n\t\t\tvalue: \"\",\r\n\t\t\twarning: \"Ce contact existe déjà\"\r\n\t\t});\r\n\r\n\t\tapi.getUserById(id.value).then(\r\n\t\t\t(recipient) => {\r\n\r\n\t\t\t\trecipient = recipient.data.user\r\n\r\n\t\t\t\t//if (recipient !== null) return\r\n\r\n\t\t\t\t// Id unique du channel\r\n\t\t\t\tconst idChannel = (Math.floor(Math.random() * 10000000000000000) + 99999999999999999).toString();\r\n\r\n\t\t\t\tsetChannels(channels => [...channels, {\r\n\t\t\t\t\tid: idChannel,\r\n\t\t\t\t\ttype: \"private\",\r\n\t\t\t\t\trecipients: [{\r\n\t\t\t\t\t\tid: recipient.id,\r\n\t\t\t\t\t\tpseudo: recipient.pseudo\r\n\t\t\t\t\t}],\r\n\t\t\t\t\tmessages: []\r\n\t\t\t\t}]);\r\n\r\n\t\t\t\tsetSelectedChannel({\r\n\t\t\t\t\tid: idChannel,\r\n\t\t\t\t\ttype: \"private\",\r\n\t\t\t\t\trecipients: [{\r\n\t\t\t\t\t\tid: recipient.id,\r\n\t\t\t\t\t\tpseudo: recipient.pseudo\r\n\t\t\t\t\t}],\r\n\t\t\t\t\tmessages: [],\r\n\t\t\t\t\tselected: true,\r\n\t\t\t\t\tkey: channels.length === 0 ? 0 : channels.length - 1\r\n\t\t\t\t})\r\n\r\n\t\t\t\tvar clientChannels = client.channels\r\n\t\t\t\tclientChannels.push({ id: idChannel, type: \"private\" })\r\n\r\n\t\t\t\tvar recipientChannels = recipient.channels\r\n\t\t\t\trecipientChannels.push({ id: idChannel, type: \"private\" })\r\n\r\n\t\t\t\t// Mise à jour du client\r\n\t\t\t\tupdateUser(client.id, { channels: clientChannels })\r\n\r\n\t\t\t\t// Mise à jour du destinataire\r\n\t\t\t\tupdateUser(recipient.id, { channels: recipientChannels })\r\n\r\n\t\t\t\t// Créaction du channel\r\n\t\t\t\tconst res = createChannel({\r\n\t\t\t\t\tclient: {\r\n\t\t\t\t\t\tid: localStorage.id,\r\n\t\t\t\t\t\ttoken: localStorage.token\r\n\t\t\t\t\t},\r\n\t\t\t\t\trecipient: {\r\n\t\t\t\t\t\tid: id.value\r\n\t\t\t\t\t},\r\n\t\t\t\t\tchannel: {\r\n\t\t\t\t\t\tid: idChannel,\r\n\t\t\t\t\t\ttype: \"private\",\r\n\t\t\t\t\t\trecipients: [client.id, recipient.id],\r\n\t\t\t\t\t\tmessages: []\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t})\r\n\r\n\t\t\t\tconsole.log(res)\r\n\t\t\t\tif (res.status.success === false) return setId({\r\n\t\t\t\t\tvalue: \"\",\r\n\t\t\t\t\twarning: res.status.msg\r\n\t\t\t\t});\r\n\r\n\t\t\t\tsetId({\r\n\t\t\t\t\tvalue: \"\",\r\n\t\t\t\t\twarning: \"\"\r\n\t\t\t\t})\r\n\t\t\t\thide()\r\n\t\t\t},\r\n\t\t\t(error) => {\r\n\t\t\t\tconsole.log(error)\r\n\t\t\t}\r\n\t\t)\r\n\r\n\t}\r\n\r\n\treturn (\r\n\t\tisShowing\r\n\t\t\t?\r\n\t\t\t<>\r\n\t\t\t\t<form className=\"createChannelPrivate\" onSubmit={handleSubmit}>\r\n\t\t\t\t\t<div className=\"createChannelPrivate-header\">\r\n\t\t\t\t\t\t<div className=\"title\">Ajouter un contact</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"createChannelPrivate-body\">\r\n\t\t\t\t\t\t{id.warning ? <div className=\"title-warning\">{id.warning} </div> : null}\r\n\t\t\t\t\t\t<input className=\"input\" type=\"text\" placeholder=\"Id\"\r\n\t\t\t\t\t\t\tvalue={id.value}\r\n\t\t\t\t\t\t\tonChange={e => setId({\r\n\t\t\t\t\t\t\t\tvalue: e.target.value,\r\n\t\t\t\t\t\t\t\twarning: \"\"\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"createChannelPrivate-footer\">\r\n\t\t\t\t\t\t<button className=\"btn-text-small\" type=\"submit\">Ajouter</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</form>\r\n\t\t\t</>\r\n\t\t\t: null\r\n\t)\r\n}\r\nexport default NewContact;"]},"metadata":{},"sourceType":"module"}