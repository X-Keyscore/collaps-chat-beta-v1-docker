{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anton\\\\Desktop\\\\FInt.Tchat\\\\dev\\\\V10\\\\client\\\\src\\\\contexts\\\\ChannelsProvider.js\";\nimport React, { useContext, useState, useEffect, useRef } from 'react';\nimport { useSocket } from './SocketProvider';\nimport api from \"../api\";\nconst ChannelsContext = React.createContext();\nexport function useChannels() {\n  return useContext(ChannelsContext);\n}\nexport function ChannelsProvider({\n  id,\n  children\n}) {\n  const socket = useSocket(); // https://stackoverflow.com/questions/54824036/useeffect-hook-with-socket-io-state-is-not-persistent-in-socket-handlers\n\n  const [channels, setChannels] = useState(null);\n  const channelsRef = useRef(channels);\n  useEffect(() => {\n    channelsRef.current = channels;\n  });\n  const [messagesChannels, setMessagesChannels] = useState([]);\n  const messagesChannelsRef = useRef(messagesChannels);\n  useEffect(() => {\n    messagesChannelsRef.current = messagesChannels;\n  });\n  console.log(messagesChannelsRef);\n  const [selectedChannel, setSelectedChannel] = useState(null);\n  useEffect(() => {\n    if (socket == null) return; // channelId, sender, date, text\n\n    const addMessage = message => {\n      // J'isole les \"channels\" dans une variable\n      var allMessages = messagesChannelsRef.current; // Récuépration de l'index\n\n      const indexMessage = allMessages.findIndex(messagesChannel => messagesChannel.id === message.channelId);\n\n      if (indexMessage !== -1) {\n        // Copie de l'ancien tableau de données\n        let newArr = [...messagesChannelsRef.current]; // Ajout du nouveau message\n\n        newArr[indexMessage].messages = [...newArr[indexMessage].messages, {\n          sender: message.sender,\n          date: message.date,\n          text: message.text\n        }];\n        console.log(newArr); // Envoie des données dans le \"useState\"\n\n        setMessagesChannels(newArr);\n      } else {\n        // Ajout du message dans le \"useState\"\n        setMessagesChannels(msg => [...msg, {\n          id: message.channelId,\n          messages: [{\n            sender: message.sender,\n            date: message.date,\n            text: message.text\n          }]\n        }]);\n      }\n    }; // Si je reçoi un message je l'ajoute dans le \"channel\" qui lui correspond\n\n\n    socket.on('receive-message', addMessage);\n    return () => socket.off('receive-message', addMessage);\n  }, [socket]);\n\n  function addMessageToDatabase(message) {\n    console.log(message); // Récupération des données du \"channel\" avec son id\n\n    api.getChannelById(message.channel.id).then(channel => {\n      channel = channel.data.data;\n      channel.messages.push({\n        index: channel.messages.length + 1,\n        sender: message.sender.id,\n        date: message.data,\n        text: message.text\n      });\n      api.updateChannelById(channel.id, {\n        data: {\n          messages: channel.messages\n        }\n      }).then(res => {});\n    }, error => {\n      console.log(error);\n    });\n  } // channel, text, client\n\n\n  function sendMessage(channel, text, client) {\n    const addMessage = message => {\n      // J'isole les \"channels\" dans une variable\n      var allMessages = messagesChannelsRef.current; // Récuépration de l'index\n\n      const indexMessage = allMessages.findIndex(messagesChannel => messagesChannel.id === message.channelId);\n\n      if (indexMessage !== -1) {\n        // Copie de l'ancien tableau de données\n        let newArr = [...messagesChannelsRef.current]; // Ajout du nouveau message\n\n        newArr[indexMessage].messages = [...newArr[indexMessage].messages, {\n          sender: message.sender,\n          date: message.date,\n          text: message.text\n        }];\n        console.log(newArr); // Envoie des données dans le \"useState\"\n\n        setMessagesChannels(newArr);\n      } else {\n        // Ajout du message dans le \"useState\"\n        setMessagesChannels(msg => [...msg, {\n          id: message.channelId,\n          messages: [{\n            sender: message.sender,\n            date: message.date,\n            text: message.text\n          }]\n        }]);\n      }\n    }; // channelId, sender, date, text\n\n\n    addMessage({\n      channelId: channel.id,\n      sender: {\n        id: client.id,\n        pseudo: client.pseudo\n      },\n      date: new Date(),\n      text\n    }); // recipients, channelId, sender, date, text\n\n    socket.emit('send-message', {\n      recipients: channel.recipients,\n      channelId: channel.id,\n      sender: {\n        id: client.id,\n        pseudo: client.pseudo\n      },\n      date: new Date(),\n      text\n    }); // channel, sender, date, text\n\n    addMessageToDatabase({\n      channel,\n      sender: {\n        id: client.id,\n        pseudo: client.pseudo\n      },\n      text\n    });\n  }\n\n  function createChannel(payload) {\n    api.insertChannel(payload);\n  }\n\n  const value = {\n    channels,\n    setChannels,\n    messagesChannels,\n    setMessagesChannels,\n    selectedChannel,\n    setSelectedChannel,\n    createChannel,\n    sendMessage\n  };\n  return /*#__PURE__*/React.createElement(ChannelsContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 5\n    }\n  }, children);\n}\nexport default ChannelsContext;\n/*\n conversations.map((conversation, index) => {\n   const recipients = conversation.recipients.map(recipient => {\n     const contact = contacts.find(contact => {\n       return contact.id === recipient\n     })\n     const name = (contact && contact.name) || recipient\n     return { id: recipient, name }\n   })\n    const messages = conversation.messages.map(message => {\n     const contact = contacts.find(contact => {\n       return contact.id === message.sender\n     })\n     const name = (contact && contact.name) || message.sender\n     const fromMe = id === message.sender\n     return { ...message, senderName: name, fromMe }\n   })\n    const selected = index === selectedConversationIndex\n   return { ...conversation, messages, recipients, selected }\n })*/\n\n/*\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false\n\n  a.sort()\n  b.sort()\n\n  return a.every((element, index) => {\n    return element === b[index]\n  })\n}\n\nconst addMessageToChannel = useCallback(({ recipients, text, sender }) => {\n  setChannels(prevChannels => {\n    let madeChange = false\n    const newMessage = { sender, text }\n    const newChannels = prevChannels.map(channel => {\n      if (arrayEquality(channel.recipients, recipients)) {\n        madeChange = true\n        return {\n          ...channel,\n          messages: [...channel.messages, newMessage]\n        }\n      }\n\n      return channel\n    })\n\n    if (madeChange) {\n      return newChannels\n    } else {\n      return [\n        ...prevChannels,\n        { recipients, messages: [newMessage] }\n      ]\n    }\n  })\n}, [])*/\n\n/*\nconst addMessage = (message) => {\n  // J'isole les \"channels\" dans une variable\n  var allMessages = messagesChannelsRef.current\n\n  const indexMessage = allMessages.findIndex(messagesChannel => messagesChannel.id === message.channelId);\n  console.log(allMessages)\n  if (indexMessage !== -1) {\n    console.log(\"1\")\n    const oldMsg = allMessages[indexMessage].messages\n    setMessagesChannels(msg => [\n      ...msg.slice(0, indexMessage),\n      ...msg.slice(indexMessage + 1)\n    ]);\n    setMessagesChannels(msg => [...msg, { id: message.channelId, messages: [...oldMsg, {sender: message.sender, date: message.date, text: message.text}] }])\n  } else {\n    console.log(\"2\")\n    setMessagesChannels(msg => [...msg, { id: message.channelId, messages: [{sender: message.sender, date: message.date, text: message.text}] }])\n  }\n}*/","map":{"version":3,"sources":["C:/Users/anton/Desktop/FInt.Tchat/dev/V10/client/src/contexts/ChannelsProvider.js"],"names":["React","useContext","useState","useEffect","useRef","useSocket","api","ChannelsContext","createContext","useChannels","ChannelsProvider","id","children","socket","channels","setChannels","channelsRef","current","messagesChannels","setMessagesChannels","messagesChannelsRef","console","log","selectedChannel","setSelectedChannel","addMessage","message","allMessages","indexMessage","findIndex","messagesChannel","channelId","newArr","messages","sender","date","text","msg","on","off","addMessageToDatabase","getChannelById","channel","then","data","push","index","length","updateChannelById","res","error","sendMessage","client","pseudo","Date","emit","recipients","createChannel","payload","insertChannel","value"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect, useRef } from 'react'\nimport { useSocket } from './SocketProvider';\nimport api from \"../api\"\n\nconst ChannelsContext = React.createContext()\n\nexport function useChannels() {\n  return useContext(ChannelsContext)\n}\n\nexport function ChannelsProvider({ id, children }) {\n  const socket = useSocket()\n  // https://stackoverflow.com/questions/54824036/useeffect-hook-with-socket-io-state-is-not-persistent-in-socket-handlers\n  const [channels, setChannels] = useState(null)\n  const channelsRef = useRef(channels);\n  useEffect(() => {\n    channelsRef.current = channels;\n  });\n\n  const [messagesChannels, setMessagesChannels] = useState([])\n  const messagesChannelsRef = useRef(messagesChannels);\n  useEffect(() => {\n    messagesChannelsRef.current = messagesChannels;\n  });\n  console.log(messagesChannelsRef)\n\n  const [selectedChannel, setSelectedChannel] = useState(null)\n\n  useEffect(() => {\n    if (socket == null) return\n\n    // channelId, sender, date, text\n    const addMessage = (message) => {\n\n      // J'isole les \"channels\" dans une variable\n      var allMessages = messagesChannelsRef.current\n\n      // Récuépration de l'index\n      const indexMessage = allMessages.findIndex(messagesChannel => messagesChannel.id === message.channelId);\n\n      if (indexMessage !== -1) {\n        // Copie de l'ancien tableau de données\n        let newArr = [...messagesChannelsRef.current];\n        // Ajout du nouveau message\n        newArr[indexMessage].messages = [...newArr[indexMessage].messages, {sender: message.sender, date: message.date, text: message.text}];\n        console.log(newArr)\n        // Envoie des données dans le \"useState\"\n        setMessagesChannels(newArr);\n      } else {\n        // Ajout du message dans le \"useState\"\n        setMessagesChannels(msg => [...msg, { id: message.channelId, messages: [{sender: message.sender, date: message.date, text: message.text}] }])\n      }\n    }\n\n    // Si je reçoi un message je l'ajoute dans le \"channel\" qui lui correspond\n    socket.on('receive-message', addMessage);\n\n    return () => socket.off('receive-message', addMessage)\n  }, [socket])\n\n  function addMessageToDatabase(message) {\n    console.log(message)\n    // Récupération des données du \"channel\" avec son id\n    api.getChannelById(message.channel.id).then(\n      (channel) => {\n\n        channel = channel.data.data\n\n        channel.messages.push({\n          index: channel.messages.length + 1,\n          sender: message.sender.id,\n          date: message.data,\n          text: message.text\n        })\n\n        api.updateChannelById(channel.id, { data: { messages: channel.messages } }).then(res => { })\n\n      },\n      (error) => {\n        console.log(error)\n      }\n    )\n  }\n\n  // channel, text, client\n  function sendMessage(channel, text, client) {\n\n    const addMessage = (message) => {\n\n      // J'isole les \"channels\" dans une variable\n      var allMessages = messagesChannelsRef.current\n\n      // Récuépration de l'index\n      const indexMessage = allMessages.findIndex(messagesChannel => messagesChannel.id === message.channelId);\n\n      if (indexMessage !== -1) {\n        // Copie de l'ancien tableau de données\n        let newArr = [...messagesChannelsRef.current];\n        // Ajout du nouveau message\n        newArr[indexMessage].messages = [...newArr[indexMessage].messages, {sender: message.sender, date: message.date, text: message.text}];\n        console.log(newArr)\n        // Envoie des données dans le \"useState\"\n        setMessagesChannels(newArr);\n      } else {\n        // Ajout du message dans le \"useState\"\n        setMessagesChannels(msg => [...msg, { id: message.channelId, messages: [{sender: message.sender, date: message.date, text: message.text}] }])\n      }\n    }\n\n    // channelId, sender, date, text\n    addMessage({ channelId: channel.id, sender: { id: client.id, pseudo: client.pseudo}, date: new Date(), text })\n    // recipients, channelId, sender, date, text\n    socket.emit('send-message', { recipients: channel.recipients, channelId: channel.id, sender: { id: client.id, pseudo: client.pseudo}, date: new Date(), text })\n    // channel, sender, date, text\n    addMessageToDatabase({channel, sender: { id: client.id, pseudo: client.pseudo}, text})\n\n  }\n\n  function createChannel(payload) {\n    api.insertChannel(payload)\n  }\n\n  const value = {\n    channels,\n    setChannels,\n    messagesChannels,\n    setMessagesChannels,\n    selectedChannel,\n    setSelectedChannel,\n    createChannel,\n    sendMessage\n  }\n\n  return (\n    <ChannelsContext.Provider value={value}>\n      {children}\n    </ChannelsContext.Provider>\n  )\n}\n\nexport default ChannelsContext\n\n /*\n  conversations.map((conversation, index) => {\n    const recipients = conversation.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.id === recipient\n      })\n      const name = (contact && contact.name) || recipient\n      return { id: recipient, name }\n    })\n\n    const messages = conversation.messages.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.id === message.sender\n      })\n      const name = (contact && contact.name) || message.sender\n      const fromMe = id === message.sender\n      return { ...message, senderName: name, fromMe }\n    })\n\n    const selected = index === selectedConversationIndex\n    return { ...conversation, messages, recipients, selected }\n  })*/\n/*\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false\n\n  a.sort()\n  b.sort()\n\n  return a.every((element, index) => {\n    return element === b[index]\n  })\n}\n\nconst addMessageToChannel = useCallback(({ recipients, text, sender }) => {\n  setChannels(prevChannels => {\n    let madeChange = false\n    const newMessage = { sender, text }\n    const newChannels = prevChannels.map(channel => {\n      if (arrayEquality(channel.recipients, recipients)) {\n        madeChange = true\n        return {\n          ...channel,\n          messages: [...channel.messages, newMessage]\n        }\n      }\n\n      return channel\n    })\n\n    if (madeChange) {\n      return newChannels\n    } else {\n      return [\n        ...prevChannels,\n        { recipients, messages: [newMessage] }\n      ]\n    }\n  })\n}, [])*/\n/*\nconst addMessage = (message) => {\n  // J'isole les \"channels\" dans une variable\n  var allMessages = messagesChannelsRef.current\n\n  const indexMessage = allMessages.findIndex(messagesChannel => messagesChannel.id === message.channelId);\n  console.log(allMessages)\n  if (indexMessage !== -1) {\n    console.log(\"1\")\n    const oldMsg = allMessages[indexMessage].messages\n    setMessagesChannels(msg => [\n      ...msg.slice(0, indexMessage),\n      ...msg.slice(indexMessage + 1)\n    ]);\n    setMessagesChannels(msg => [...msg, { id: message.channelId, messages: [...oldMsg, {sender: message.sender, date: message.date, text: message.text}] }])\n  } else {\n    console.log(\"2\")\n    setMessagesChannels(msg => [...msg, { id: message.channelId, messages: [{sender: message.sender, date: message.date, text: message.text}] }])\n  }\n}*/"]},"metadata":{},"sourceType":"module"}