{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anton\\\\Desktop\\\\FInt.Tchat\\\\dev\\\\V10\\\\client\\\\src\\\\components\\\\sidebar\\\\ChannelsContacts.js\";\nimport React, { useState } from 'react';\nimport { useUser } from '../../contexts/UserProvider';\nimport { useChannels } from '../../contexts/ChannelsProvider';\nexport default function ChannelsContacts() {\n  const [channels, setChannels] = useState(null); // Le \"useEffect\" est utilisé pour géré l'asynchrone\n\n  useEffect(() => {\n    getClient(id).then(client => setValue(client));\n  }, []); // Récupération des informations du client\n\n  const {\n    client\n  } = useUser(); // Récupération de la fonction pour sélectionner un \"channel\"\n\n  const {\n    selectedChannel,\n    setSelectedChannel\n  } = useChannels(); // Cette fonction renvoie les données du client\n  // - Par défaut elle renvoie les données brutes\n  // - Si le type est \"cross\" elle renvoie les données croisées\n\n  function renderClient(id) {\n    return new Promise(resolve => {\n      api.getUserById(id).then(user => {\n        // Constante pour stocker les données brutes du cleint\n        const clientRaw = user.data.data; // Si le client n'a pas de constact j'envoie directement les données\n\n        if (clientRaw.channels.length === 0) return resolve(clientRaw); // Variable pour stocker les données croisées du cleint\n\n        var clientCross = user.data.data; // Je filtre pour ne récupérer que les contacts privés\n\n        clientCross.channels.filter(channel => channel.type === \"private\").forEach((channel, index) => {\n          // Je récupère les informations sur le destinataire grace à sont id\n          api.getUserById(channel.recipients.id).then(recipient => {\n            // Si le destinataire n'existe plus je le supprime des données du client\n            if (recipient.data.data === null) {\n              // Je boucle tous les \"channels\" du client\n              for (let i = 0; i < clientCross.channels.length; i++) {\n                // Je teste si l'id du \"channel\" sélectionné correspond à l'id du \"channel\" passé dans la boucle\n                if (clientCross.channels[i].recipients.id === channel.recipients.id) {\n                  // Je supprime le \"channel\" dans la liste grace à sa position\n                  clientCross.channels.splice(i, 1); // Je mets à jour le client\n\n                  return api.updateUserById(clientCross.id, {\n                    data: {\n                      channels: clientCross.channels\n                    }\n                  }).then(res => {\n                    /*//EN COURS// Système gestion des erreurs*/\n                  });\n                }\n              }\n            } // Je complète les informations existantes du destinataire avec celle de la base de données\n\n\n            channel.recipients = recipient.data.data; // J'ajoute un element \"selected\" à \"channel\" est passe la valeur \"true\" au premier\n\n            Object.assign(channel, {\n              selected: false\n            });\n            Object.assign(channel, {\n              key: index\n            }); // Je mets à jour l'object \"channels\" du client \n\n            clientCross.channels[index] = channel;\n            if (clientRaw.channels.length === index + 1) return resolve(clientCross);\n          });\n        });\n      });\n    });\n  } // Si \"client\" est \"null\" c'est qu'il est en chargement donc j'affiche chargement\n\n\n  if (client === null) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar-body-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }\n    }, \"Chargement...\");\n  } // Si \"client.channels\" est vide c'est qu'il n'y a pas de constact donc j'affiche aucun contact\n\n\n  if (client.channels.length === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar-body-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }\n    }, \"Aucun contact\");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, client.channels.map(channel => /*#__PURE__*/React.createElement(\"button\", {\n    key: channel.id,\n    className: `sidebar-body-contact ${selectedChannel === null ? null : selectedChannel.id === channel.id ? 'selected' : ''}`,\n    onClick: () => setSelectedChannel(channel),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sidebar-body-contact-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sidebar-body-contact-content-avatar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    width: \"40\",\n    height: \"32\",\n    viewBox: \"0 0 40 32\",\n    \"aria-hidden\": \"true\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"foreignObject\", {\n    x: \"0\",\n    y: \"0\",\n    width: \"32\",\n    height: \"32\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"avatar\",\n    src: \"https://wir.skyrock.net/wir/v1/profilcrop/?c=mog&w=301&h=301&im=%2Fart%2FPRIP.105317501.2.2.jpg\",\n    \"aria-hidden\": \"true\",\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"rect\", {\n    className: \"online\",\n    fill: \"currentColor\",\n    width: \"10\",\n    height: \"10\",\n    x: \"22\",\n    y: \"22\",\n    rx: \"15\",\n    ry: \"15\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 19\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sidebar-body-contact-content-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"username\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"overflow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 19\n    }\n  }, channel.recipients.pseudo)))))));\n}","map":{"version":3,"sources":["C:/Users/anton/Desktop/FInt.Tchat/dev/V10/client/src/components/sidebar/ChannelsContacts.js"],"names":["React","useState","useUser","useChannels","ChannelsContacts","channels","setChannels","useEffect","getClient","id","then","client","setValue","selectedChannel","setSelectedChannel","renderClient","Promise","resolve","api","getUserById","user","clientRaw","data","length","clientCross","filter","channel","type","forEach","index","recipients","recipient","i","splice","updateUserById","res","Object","assign","selected","key","map","pseudo"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\nimport { useUser } from '../../contexts/UserProvider';\nimport { useChannels } from '../../contexts/ChannelsProvider';\n\nexport default function ChannelsContacts() {\n  const [channels, setChannels] = useState(null)\n\n  // Le \"useEffect\" est utilisé pour géré l'asynchrone\n  useEffect(() => {\n    getClient(id).then(client => setValue(client))\n  }, [])\n\n  // Récupération des informations du client\n  const { client } = useUser()\n\n  // Récupération de la fonction pour sélectionner un \"channel\"\n  const { selectedChannel, setSelectedChannel } = useChannels()\n\n  // Cette fonction renvoie les données du client\n  // - Par défaut elle renvoie les données brutes\n  // - Si le type est \"cross\" elle renvoie les données croisées\n  function renderClient(id) {\n    return new Promise((resolve) => {\n      api.getUserById(id).then(\n        (user) => {\n          // Constante pour stocker les données brutes du cleint\n          const clientRaw = user.data.data\n\n          // Si le client n'a pas de constact j'envoie directement les données\n          if (clientRaw.channels.length === 0) return resolve(clientRaw)\n\n          // Variable pour stocker les données croisées du cleint\n          var clientCross = user.data.data\n\n          // Je filtre pour ne récupérer que les contacts privés\n          clientCross.channels.filter(channel => channel.type === \"private\").forEach((channel, index) => {\n\n            // Je récupère les informations sur le destinataire grace à sont id\n            api.getUserById(channel.recipients.id).then((recipient) => {\n\n              // Si le destinataire n'existe plus je le supprime des données du client\n              if (recipient.data.data === null) {\n                // Je boucle tous les \"channels\" du client\n                for (let i = 0; i < clientCross.channels.length; i++) {\n                  // Je teste si l'id du \"channel\" sélectionné correspond à l'id du \"channel\" passé dans la boucle\n                  if (clientCross.channels[i].recipients.id === channel.recipients.id) {\n                    // Je supprime le \"channel\" dans la liste grace à sa position\n                    clientCross.channels.splice(i, 1);\n                    // Je mets à jour le client\n                    return api.updateUserById(clientCross.id, { data: { channels: clientCross.channels } }).then(res => {/*//EN COURS// Système gestion des erreurs*/ })\n                  }\n                }\n              }\n\n              // Je complète les informations existantes du destinataire avec celle de la base de données\n              channel.recipients = recipient.data.data\n\n              // J'ajoute un element \"selected\" à \"channel\" est passe la valeur \"true\" au premier\n              Object.assign(channel, { selected: false })\n              Object.assign(channel, { key: index })\n\n              // Je mets à jour l'object \"channels\" du client \n              clientCross.channels[index] = channel\n\n              if (clientRaw.channels.length === index + 1) return resolve(clientCross)\n\n            });\n          })\n        })\n    })\n  }\n\n  // Si \"client\" est \"null\" c'est qu'il est en chargement donc j'affiche chargement\n  if (client === null) {\n    return (\n      <div className=\"sidebar-body-info\">Chargement...</div>\n    );\n  }\n  // Si \"client.channels\" est vide c'est qu'il n'y a pas de constact donc j'affiche aucun contact\n  if (client.channels.length === 0) {\n    return (\n      <div className=\"sidebar-body-info\">Aucun contact</div>\n    );\n  }\n  return (\n    <>\n      {\n        client.channels.map((channel) => (\n          <button\n            key={channel.id}\n            className={`sidebar-body-contact ${selectedChannel === null ? null : selectedChannel.id === channel.id ? 'selected' : ''}`}\n            onClick={() => setSelectedChannel(channel)}\n          >\n            <div className=\"sidebar-body-contact-content\">\n              <div className=\"sidebar-body-contact-content-avatar\">\n\n                <svg width=\"40\" height=\"32\" viewBox=\"0 0 40 32\" aria-hidden=\"true\">\n                  <foreignObject x=\"0\" y=\"0\" width=\"32\" height=\"32\">\n                    <img className=\"avatar\" src=\"https://wir.skyrock.net/wir/v1/profilcrop/?c=mog&w=301&h=301&im=%2Fart%2FPRIP.105317501.2.2.jpg\" aria-hidden=\"true\" alt=\"\" />\n                  </foreignObject>\n                  <rect className=\"online\" fill=\"currentColor\" width=\"10\" height=\"10\" x=\"22\" y=\"22\" rx=\"15\" ry=\"15\"></rect>\n                </svg>\n\n              </div>\n              <div className=\"sidebar-body-contact-content-text\">\n                <div className=\"username\">\n                  <div className=\"overflow\">\n                    {channel.recipients.pseudo}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </button>\n        ))\n      }\n    </>\n  )\n}"]},"metadata":{},"sourceType":"module"}