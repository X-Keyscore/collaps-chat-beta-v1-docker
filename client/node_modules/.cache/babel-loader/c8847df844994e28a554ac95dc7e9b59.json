{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anton\\\\Desktop\\\\FInt.Tchat\\\\dev\\\\V10\\\\client\\\\src\\\\components\\\\sidebar\\\\ChannelsContacts.js\";\nimport React, { useState, useEffect } from 'react';\nimport api from \"../../api\";\nimport { useUser } from '../../contexts/UserProvider';\nimport { useChannels } from '../../contexts/ChannelsProvider';\nexport default function ChannelsContacts() {\n  const {\n    client\n  } = useUser();\n  const {\n    channels,\n    setChannels,\n    selectedChannel,\n    setSelectedChannel\n  } = useChannels(); // Le \"useEffect\" est utilisé pour géré l'asynchrone\n\n  useEffect(() => {\n    // Je teste si le client est chargé\n    if (client === null) return; // Je teste si le client à des conversations\n\n    if (client.channels.length === 0) return setChannels([]); // Fonction asynchrone pour faire le rendu des channels du client\n\n    async function fetchRenderClientChannels() {\n      return renderChannels(client).then(channels => setChannels(channels));\n    } // Appel de la fonction\n\n\n    fetchRenderClientChannels();\n  }, [client]); // Cette fonction renvoie les données du client\n\n  function renderChannels(client) {\n    return new Promise(resolve => {\n      // Variable pour stocker les channels du client\n      var clientChannels = client.channels; // Je filtre pour ne récupérer que les contacts privés\n\n      clientChannels.filter(channel => channel.type === \"private\").forEach((channel, index) => {\n        // Je récupère les informations sur le destinataire grace à sont id\n        api.getChannelById(channel.id).then(channelD => {\n          // Si le destinataire n'existe plus je le supprime des données du client\n          if (recipient.data.data === null) {\n            // Je boucle tous les \"channels\" du client\n            for (let i = 0; i < client.channels.length; i++) {\n              // Je teste si l'id du \"channel\" sélectionné correspond à l'id du \"channel\" passé dans la boucle\n              if (client.channels[i].recipients.id === channel.recipients.id) {\n                // Je supprime le \"channel\" dans la liste grace à sa position\n                client.channels.splice(i, 1); // Je mets à jour le client\n\n                return api.updateUserById(client.id, {\n                  data: {\n                    channels: client.channels\n                  }\n                }).then(res => {\n                  /*//EN COURS// Système gestion des erreurs*/\n                });\n              }\n            }\n          } // Je complète les informations existantes du destinataire avec celle de la base de données\n\n\n          channel.recipients = recipient.data.data; // J'ajoute un element \"selected\" à \"channel\" est passe la valeur \"true\" au premier\n\n          Object.assign(channel, {\n            selected: false\n          });\n          Object.assign(channel, {\n            key: index\n          }); // Je mets à jour l'object la list des \"channels\" du client \n\n          clientChannels[index] = channel;\n          if (client.channels.length === index + 1) return resolve(clientChannels);\n        });\n      });\n    });\n  } // Si \"client\" est \"null\" c'est qu'il est en chargement donc j'affiche chargement\n\n\n  if (channels === null) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar-body-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }\n    }, \"Chargement...\");\n  } // Si \"client.channels\" est vide c'est qu'il n'y a pas de constact donc j'affiche aucun contact\n\n\n  if (channels.length === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar-body-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }\n    }, \"Aucun contact\");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, channels.map(channel => /*#__PURE__*/React.createElement(\"button\", {\n    key: channel.id,\n    className: `sidebar-body-contact ${selectedChannel === null ? null : selectedChannel.id === channel.id ? 'selected' : ''}`,\n    onClick: () => setSelectedChannel(channel),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sidebar-body-contact-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sidebar-body-contact-content-avatar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    width: \"40\",\n    height: \"32\",\n    viewBox: \"0 0 40 32\",\n    \"aria-hidden\": \"true\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"foreignObject\", {\n    x: \"0\",\n    y: \"0\",\n    width: \"32\",\n    height: \"32\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"avatar\",\n    src: \"https://wir.skyrock.net/wir/v1/profilcrop/?c=mog&w=301&h=301&im=%2Fart%2FPRIP.105317501.2.2.jpg\",\n    \"aria-hidden\": \"true\",\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"rect\", {\n    className: \"online\",\n    fill: \"currentColor\",\n    width: \"10\",\n    height: \"10\",\n    x: \"22\",\n    y: \"22\",\n    rx: \"15\",\n    ry: \"15\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 19\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sidebar-body-contact-content-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"username\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"overflow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 19\n    }\n  }, channel.recipients.pseudo)))))));\n}","map":{"version":3,"sources":["C:/Users/anton/Desktop/FInt.Tchat/dev/V10/client/src/components/sidebar/ChannelsContacts.js"],"names":["React","useState","useEffect","api","useUser","useChannels","ChannelsContacts","client","channels","setChannels","selectedChannel","setSelectedChannel","length","fetchRenderClientChannels","renderChannels","then","Promise","resolve","clientChannels","filter","channel","type","forEach","index","getChannelById","id","channelD","recipient","data","i","recipients","splice","updateUserById","res","Object","assign","selected","key","map","pseudo"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport api from \"../../api\"\n\nimport { useUser } from '../../contexts/UserProvider';\nimport { useChannels } from '../../contexts/ChannelsProvider';\n\nexport default function ChannelsContacts() {\n  const { client } = useUser()\n  const { channels, setChannels, selectedChannel, setSelectedChannel } = useChannels()\n\n  // Le \"useEffect\" est utilisé pour géré l'asynchrone\n  useEffect(() => {\n    // Je teste si le client est chargé\n    if (client === null) return\n    // Je teste si le client à des conversations\n    if (client.channels.length === 0) return setChannels([])\n    // Fonction asynchrone pour faire le rendu des channels du client\n    async function fetchRenderClientChannels() {\n      return renderChannels(client).then(channels => setChannels(channels))\n    }\n    // Appel de la fonction\n    fetchRenderClientChannels();\n  }, [client])\n\n  // Cette fonction renvoie les données du client\n  function renderChannels(client) {\n    return new Promise((resolve) => {\n      // Variable pour stocker les channels du client\n      var clientChannels = client.channels\n\n      // Je filtre pour ne récupérer que les contacts privés\n      clientChannels.filter(channel => channel.type === \"private\").forEach((channel, index) => {\n\n        // Je récupère les informations sur le destinataire grace à sont id\n        api.getChannelById(channel.id).then((channelD) => {\n\n          // Si le destinataire n'existe plus je le supprime des données du client\n          if (recipient.data.data === null) {\n            // Je boucle tous les \"channels\" du client\n            for (let i = 0; i < client.channels.length; i++) {\n              // Je teste si l'id du \"channel\" sélectionné correspond à l'id du \"channel\" passé dans la boucle\n              if (client.channels[i].recipients.id === channel.recipients.id) {\n                // Je supprime le \"channel\" dans la liste grace à sa position\n                client.channels.splice(i, 1);\n                // Je mets à jour le client\n                return api.updateUserById(client.id, { data: { channels: client.channels } }).then(res => {/*//EN COURS// Système gestion des erreurs*/ })\n              }\n            }\n          }\n\n          // Je complète les informations existantes du destinataire avec celle de la base de données\n          channel.recipients = recipient.data.data\n          // J'ajoute un element \"selected\" à \"channel\" est passe la valeur \"true\" au premier\n          Object.assign(channel, { selected: false })\n          Object.assign(channel, { key: index })\n          // Je mets à jour l'object la list des \"channels\" du client \n          clientChannels[index] = channel\n\n          if (client.channels.length === index + 1) return resolve(clientChannels)\n\n        });\n      })\n    })\n  }\n\n  // Si \"client\" est \"null\" c'est qu'il est en chargement donc j'affiche chargement\n  if (channels === null) {\n    return (\n      <div className=\"sidebar-body-info\">Chargement...</div>\n    );\n  }\n  // Si \"client.channels\" est vide c'est qu'il n'y a pas de constact donc j'affiche aucun contact\n  if (channels.length === 0) {\n    return (\n      <div className=\"sidebar-body-info\">Aucun contact</div>\n    );\n  }\n  return (\n    <>\n      {\n        channels.map((channel) => (\n          <button\n            key={channel.id}\n            className={`sidebar-body-contact ${selectedChannel === null ? null : selectedChannel.id === channel.id ? 'selected' : ''}`}\n            onClick={() => setSelectedChannel(channel)}\n          >\n            <div className=\"sidebar-body-contact-content\">\n              <div className=\"sidebar-body-contact-content-avatar\">\n\n                <svg width=\"40\" height=\"32\" viewBox=\"0 0 40 32\" aria-hidden=\"true\">\n                  <foreignObject x=\"0\" y=\"0\" width=\"32\" height=\"32\">\n                    <img className=\"avatar\" src=\"https://wir.skyrock.net/wir/v1/profilcrop/?c=mog&w=301&h=301&im=%2Fart%2FPRIP.105317501.2.2.jpg\" aria-hidden=\"true\" alt=\"\" />\n                  </foreignObject>\n                  <rect className=\"online\" fill=\"currentColor\" width=\"10\" height=\"10\" x=\"22\" y=\"22\" rx=\"15\" ry=\"15\"></rect>\n                </svg>\n\n              </div>\n              <div className=\"sidebar-body-contact-content-text\">\n                <div className=\"username\">\n                  <div className=\"overflow\">\n                    {channel.recipients.pseudo}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </button>\n        ))\n      }\n    </>\n  )\n}"]},"metadata":{},"sourceType":"module"}