{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport api from \"../api\";\nexport default function useExternalStorage() {\n  // Récupération de l'id du client pour pouvoir identifier la cible de la requête\n  const [id] = useLocalStorage('id'); // Initialisation du \"useState\" pour stocké les données\n\n  const [value, setValue] = useState(null); // Le \"useEffect\" est utilisé pour géré l'asynchrone\n\n  useEffect(() => {\n    // Fonction asynchrone pour faire le rendu des channels du client\n    async function fetchClient() {\n      api.getUserById(id).then(user => {\n        return setValue(user.data.data);\n      });\n      /*\n      const payload = { id: \"id\", type: \"private\", recipients: [\"user1\", \"user2\"], messages: [] }\n      api.insertChannel(payload).then(\n        (res) => {\n          console.log(\"rep\")\n          console.log(res)\n        },\n        (error) => {\n          console.log(\"Problème d'enregistrement dans la base de données\")\n          console.log(error)\n        })*/\n\n      const payload = {\n        data: {\n          type: \"fait chier\"\n        }\n      };\n      api.updateChannelById(\"id\", payload).then(res => {\n        console.log(\"rep\");\n        console.log(res);\n      }, error => {\n        console.log(\"Problème\");\n        console.log(error);\n      });\n    }\n\n    var use = false; // Appel de la fonction\n\n    if (use === false) {\n      use = true;\n      fetchClient();\n    }\n  }, [id]);\n  console.log('appel externe');\n  return [value, setValue];\n}","map":{"version":3,"sources":["C:/Users/anton/Desktop/FInt.Tchat/dev/V10/client/src/hooks/useExternalStorage.js"],"names":["useEffect","useState","useLocalStorage","api","useExternalStorage","id","value","setValue","fetchClient","getUserById","then","user","data","payload","type","updateChannelById","res","console","log","error","use"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,OAAOC,GAAP,MAAgB,QAAhB;AAEA,eAAe,SAASC,kBAAT,GAA8B;AAC3C;AACA,QAAM,CAACC,EAAD,IAAOH,eAAe,CAAC,IAAD,CAA5B,CAF2C,CAG3C;;AACA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAlC,CAJ2C,CAM3C;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,mBAAeQ,WAAf,GAA6B;AAC3BL,MAAAA,GAAG,CAACM,WAAJ,CAAgBJ,EAAhB,EAAoBK,IAApB,CACGC,IAAD,IAAU;AACR,eAAOJ,QAAQ,CAACI,IAAI,CAACC,IAAL,CAAUA,IAAX,CAAf;AACH,OAHD;AAKA;;;;;;;;;;;;AAaA,YAAMC,OAAO,GAAG;AAAED,QAAAA,IAAI,EAAE;AAAEE,UAAAA,IAAI,EAAE;AAAR;AAAR,OAAhB;AACAX,MAAAA,GAAG,CAACY,iBAAJ,CAAsB,IAAtB,EAA4BF,OAA5B,EAAqCH,IAArC,CACGM,GAAD,IAAS;AACPC,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,OAJH,EAKGG,KAAD,IAAW;AACTF,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACD,OARH;AAYD;;AACD,QAAIC,GAAG,GAAG,KAAV,CAnCc,CAoCd;;AACA,QAAIA,GAAG,KAAK,KAAZ,EAAmB;AACjBA,MAAAA,GAAG,GAAG,IAAN;AACAZ,MAAAA,WAAW;AACZ;AACF,GAzCQ,EAyCN,CAACH,EAAD,CAzCM,CAAT;AA0CAY,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,SAAO,CAACZ,KAAD,EAAQC,QAAR,CAAP;AACD","sourcesContent":["import { useEffect, useState } from 'react';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport api from \"../api\"\n\nexport default function useExternalStorage() {\n  // Récupération de l'id du client pour pouvoir identifier la cible de la requête\n  const [id] = useLocalStorage('id')\n  // Initialisation du \"useState\" pour stocké les données\n  const [value, setValue] = useState(null);\n\n  // Le \"useEffect\" est utilisé pour géré l'asynchrone\n  useEffect(() => {\n    // Fonction asynchrone pour faire le rendu des channels du client\n    async function fetchClient() {\n      api.getUserById(id).then(\n        (user) => {\n          return setValue(user.data.data)\n      })\n     \n      /*\n      const payload = { id: \"id\", type: \"private\", recipients: [\"user1\", \"user2\"], messages: [] }\n      api.insertChannel(payload).then(\n        (res) => {\n          console.log(\"rep\")\n          console.log(res)\n        },\n        (error) => {\n          console.log(\"Problème d'enregistrement dans la base de données\")\n          console.log(error)\n        })*/\n\n        \n      const payload = { data: { type: \"fait chier\" } }\n      api.updateChannelById(\"id\", payload).then(\n        (res) => {\n          console.log(\"rep\")\n          console.log(res)\n        },\n        (error) => {\n          console.log(\"Problème\")\n          console.log(error)\n        })\n\n\n\n    }\n    var use = false\n    // Appel de la fonction\n    if (use === false) {\n      use = true\n      fetchClient();\n    }\n  }, [id])\n  console.log('appel externe')\n  return [value, setValue]\n}"]},"metadata":{},"sourceType":"module"}