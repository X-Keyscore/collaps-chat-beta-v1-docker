{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anton\\\\Desktop\\\\FInt.Tchat\\\\dev\\\\V10\\\\client\\\\src\\\\components\\\\sidebar\\\\NewContact.js\";\nimport React, { useState } from 'react';\nimport api from \"../../api\";\nimport { useUser } from '../../contexts/UserProvider';\nimport { useChannels } from '../../contexts/ChannelsProvider';\n\nfunction NewContact({\n  isShowing,\n  hide\n}) {\n  const {\n    client,\n    updateUser\n  } = useUser();\n  const {\n    channels,\n    createChannel,\n    setChannels,\n    setSelectedChannel\n  } = useChannels(); // Création d'un \"useState\" pour stocker l'id\n\n  const [id, setId] = useState({\n    value: \"\",\n    warning: \"\"\n  });\n\n  function handleSubmit(e) {\n    e.preventDefault(); // Je teste si la valeur est bien celle d'un id\n\n    if (id.value.length === 0) return setId({\n      value: \"\",\n      warning: \"Il faut entré un id\"\n    }); // Je teste si la valeur est bien celle d'un id\n\n    if (id.value.length !== 18 && !/^[0-9]*$/.test(id.value)) return setId({\n      value: \"\",\n      warning: \"Ceci n'est pas un id valide\"\n    }); // Je test si l'id n'est pas celui du client\n\n    if (id.value === client.id) return setId({\n      value: \"\",\n      warning: \"Tu ne peux pas t'ajouter\"\n    }); // Je test si le contact n'est pas déjà ajouter\n\n    var valid = true;\n    client.channels.filter(channel => channel.type === \"private\").forEach(channel => {\n      if (channel.recipients.id === id.value) valid = false;\n    });\n    if (valid === false) return setId({\n      value: \"\",\n      warning: \"Ce contact existe déjà\"\n    });\n    api.insertChannel({\n      id: idChannel,\n      type: \"private\",\n      recipients: [client.id],\n      messages: [\"test\"]\n    }).then(rep => {\n      console.log(rep);\n    }, error => {\n      console.log(error);\n    });\n    api.getUserById(id.value).then(recipient => {\n      /*\r\n      if (recipient.data.data === null) return setId({\r\n      \tvalue: \"\",\r\n      \twarning: \"L'id n'a pas été trouvé\"\r\n      })*/\n      recipient = recipient.data.data; // Id unique du channel\n\n      const idChannel = (Math.floor(Math.random() * 10000000000000000) + 99999999999999999).toString();\n      setChannels(channels => [...channels, {\n        id: idChannel,\n        type: \"private\",\n        recipients: [{\n          id: recipient.id,\n          pseudo: recipient.pseudo\n        }],\n        messages: []\n      }]);\n      setSelectedChannel({\n        id: idChannel,\n        type: \"private\",\n        recipients: [{\n          id: recipient.id,\n          pseudo: recipient.pseudo\n        }],\n        messages: [],\n        selected: true,\n        key: channels.length === 0 ? 0 : channels.length - 1\n      });\n      var clientChannels = client.channels;\n      clientChannels.push({\n        id: idChannel,\n        type: \"private\"\n      });\n      var recipientChannels = recipient.channels;\n      recipientChannels.push({\n        id: idChannel,\n        type: \"private\"\n      }); // Mise à jour du client\n\n      updateUser(client.id, {\n        data: {\n          channels: clientChannels\n        }\n      }); // Mise à jour du destinataire\n\n      updateUser(recipient.id, {\n        data: {\n          channels: recipientChannels\n        }\n      });\n      /*\r\n      // Créaction du channel\r\n      createChannel({\r\n      \tid: idChannel,\r\n      \ttype: \"private\",\r\n      \trecipients: [client.id, recipient.id],\r\n      \tmessages: [\"test\"]\r\n      })*/\n\n      setId({\n        value: \"\",\n        warning: \"\"\n      });\n      hide();\n    }, error => {\n      console.log(error);\n    });\n  }\n\n  return isShowing ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"form\", {\n    className: \"createChannelPrivate\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"createChannelPrivate-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }, \"Ajouter un contact\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"createChannelPrivate-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 6\n    }\n  }, id.warning ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"title-warning\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 21\n    }\n  }, id.warning, \" \") : null, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"input\",\n    type: \"text\",\n    placeholder: \"Id\",\n    value: id.value,\n    onChange: e => setId({\n      value: e.target.value,\n      warning: \"\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"createChannelPrivate-footer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn-text-small\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }\n  }, \"Ajouter\")))) : null;\n}\n\nexport default NewContact;","map":{"version":3,"sources":["C:/Users/anton/Desktop/FInt.Tchat/dev/V10/client/src/components/sidebar/NewContact.js"],"names":["React","useState","api","useUser","useChannels","NewContact","isShowing","hide","client","updateUser","channels","createChannel","setChannels","setSelectedChannel","id","setId","value","warning","handleSubmit","e","preventDefault","length","test","valid","filter","channel","type","forEach","recipients","insertChannel","idChannel","messages","then","rep","console","log","error","getUserById","recipient","data","Math","floor","random","toString","pseudo","selected","key","clientChannels","push","recipientChannels","target"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport api from \"../../api\"\r\nimport { useUser } from '../../contexts/UserProvider';\r\nimport { useChannels } from '../../contexts/ChannelsProvider';\r\n\r\nfunction NewContact({ isShowing, hide }) {\r\n\tconst { client, updateUser } = useUser()\r\n\tconst { channels, createChannel, setChannels, setSelectedChannel } = useChannels()\r\n\r\n\t// Création d'un \"useState\" pour stocker l'id\r\n\tconst [id, setId] = useState({\r\n\t\tvalue: \"\",\r\n\t\twarning: \"\"\r\n\t})\r\n\r\n\tfunction handleSubmit(e) {\r\n\t\te.preventDefault()\r\n\r\n\t\t// Je teste si la valeur est bien celle d'un id\r\n\t\tif (id.value.length === 0) return setId({\r\n\t\t\tvalue: \"\",\r\n\t\t\twarning: \"Il faut entré un id\"\r\n\t\t})\r\n\r\n\t\t// Je teste si la valeur est bien celle d'un id\r\n\t\tif (id.value.length !== 18 && !/^[0-9]*$/.test(id.value)) return setId({\r\n\t\t\tvalue: \"\",\r\n\t\t\twarning: \"Ceci n'est pas un id valide\"\r\n\t\t})\r\n\r\n\t\t// Je test si l'id n'est pas celui du client\r\n\t\tif (id.value === client.id) return setId({\r\n\t\t\tvalue: \"\",\r\n\t\t\twarning: \"Tu ne peux pas t'ajouter\"\r\n\t\t})\r\n\r\n\t\t// Je test si le contact n'est pas déjà ajouter\r\n\t\tvar valid = true;\r\n\t\tclient.channels.filter(channel => channel.type === \"private\").forEach(channel => {\r\n\t\t\tif (channel.recipients.id === id.value) valid = false;\r\n\t\t});\r\n\t\tif (valid === false) return setId({\r\n\t\t\tvalue: \"\",\r\n\t\t\twarning: \"Ce contact existe déjà\"\r\n\t\t});\r\n\r\n\t\tapi.insertChannel({\r\n\t\t\tid: idChannel,\r\n\t\t\ttype: \"private\",\r\n\t\t\trecipients: [client.id ],\r\n\t\t\tmessages: [\"test\"]\r\n\t\t}).then(\r\n\t\t\t(rep) => {\r\n\t\t\t\tconsole.log(rep)\r\n\t\t\t},\r\n\t\t\t(error) => {\r\n\t\t\t\tconsole.log(error)\r\n\t\t\t}\r\n\t\t)\r\n\r\n\t\tapi.getUserById(id.value).then(\r\n\t\t\t(recipient) => {\r\n\r\n\t\t\t\t/*\r\n\t\t\t\tif (recipient.data.data === null) return setId({\r\n\t\t\t\t\tvalue: \"\",\r\n\t\t\t\t\twarning: \"L'id n'a pas été trouvé\"\r\n\t\t\t\t})*/\r\n\r\n\t\t\t\trecipient = recipient.data.data\r\n\r\n\t\t\t\t// Id unique du channel\r\n\t\t\t\tconst idChannel = (Math.floor(Math.random() * 10000000000000000) + 99999999999999999).toString();\r\n\r\n\t\t\t\tsetChannels(channels => [...channels, {\r\n\t\t\t\t\tid: idChannel,\r\n\t\t\t\t\ttype: \"private\",\r\n\t\t\t\t\trecipients: [{\r\n\t\t\t\t\t\tid: recipient.id,\r\n\t\t\t\t\t\tpseudo: recipient.pseudo\r\n\t\t\t\t\t}],\r\n\t\t\t\t\tmessages: []\r\n\t\t\t\t}]);\r\n\r\n\t\t\t\tsetSelectedChannel({\r\n\t\t\t\t\tid: idChannel,\r\n\t\t\t\t\ttype: \"private\",\r\n\t\t\t\t\trecipients: [{\r\n\t\t\t\t\t\tid: recipient.id,\r\n\t\t\t\t\t\tpseudo: recipient.pseudo\r\n\t\t\t\t\t}],\r\n\t\t\t\t\tmessages: [],\r\n\t\t\t\t\tselected: true,\r\n\t\t\t\t\tkey: channels.length === 0 ? 0 : channels.length - 1\r\n\t\t\t\t})\r\n\r\n\t\t\t\tvar clientChannels = client.channels\r\n\t\t\t\tclientChannels.push({ id: idChannel, type: \"private\" })\r\n\r\n\t\t\t\tvar recipientChannels = recipient.channels\r\n\t\t\t\trecipientChannels.push({ id: idChannel, type: \"private\" })\r\n\r\n\t\t\t\t// Mise à jour du client\r\n\t\t\t\tupdateUser(client.id, { data: { channels: clientChannels } })\r\n\r\n\t\t\t\t// Mise à jour du destinataire\r\n\t\t\t\tupdateUser(recipient.id, { data: { channels: recipientChannels } })\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t// Créaction du channel\r\n\t\t\t\tcreateChannel({\r\n\t\t\t\t\tid: idChannel,\r\n\t\t\t\t\ttype: \"private\",\r\n\t\t\t\t\trecipients: [client.id, recipient.id],\r\n\t\t\t\t\tmessages: [\"test\"]\r\n\t\t\t\t})*/\r\n\r\n\t\t\t\tsetId({\r\n\t\t\t\t\tvalue: \"\",\r\n\t\t\t\t\twarning: \"\"\r\n\t\t\t\t})\r\n\t\t\t\thide()\r\n\t\t\t},\r\n\t\t\t(error) => {\r\n\t\t\t\tconsole.log(error)\r\n\t\t\t}\r\n\t\t)\r\n\r\n\t}\r\n\r\n\treturn (\r\n\t\tisShowing\r\n\t\t\t?\r\n\t\t\t<>\r\n\t\t\t\t<form className=\"createChannelPrivate\" onSubmit={handleSubmit}>\r\n\t\t\t\t\t<div className=\"createChannelPrivate-header\">\r\n\t\t\t\t\t\t<div className=\"title\">Ajouter un contact</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"createChannelPrivate-body\">\r\n\t\t\t\t\t\t{id.warning ? <div className=\"title-warning\">{id.warning} </div> : null}\r\n\t\t\t\t\t\t<input className=\"input\" type=\"text\" placeholder=\"Id\"\r\n\t\t\t\t\t\t\tvalue={id.value}\r\n\t\t\t\t\t\t\tonChange={e => setId({\r\n\t\t\t\t\t\t\t\tvalue: e.target.value,\r\n\t\t\t\t\t\t\t\twarning: \"\"\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"createChannelPrivate-footer\">\r\n\t\t\t\t\t\t<button className=\"btn-text-small\" type=\"submit\">Ajouter</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</form>\r\n\t\t\t</>\r\n\t\t\t: null\r\n\t)\r\n}\r\nexport default NewContact;"]},"metadata":{},"sourceType":"module"}