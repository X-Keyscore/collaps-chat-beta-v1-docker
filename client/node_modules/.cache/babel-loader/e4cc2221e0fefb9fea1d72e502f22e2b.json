{"ast":null,"code":"import _objectSpread from\"C:\\\\Users\\\\anton\\\\Desktop\\\\FInt.Tchat\\\\dev\\\\V4\\\\Whatsapp-Clone-master\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"C:\\\\Users\\\\anton\\\\Desktop\\\\FInt.Tchat\\\\dev\\\\V4\\\\Whatsapp-Clone-master\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"C:\\\\Users\\\\anton\\\\Desktop\\\\FInt.Tchat\\\\dev\\\\V4\\\\Whatsapp-Clone-master\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useContext,useState,useEffect,useCallback}from'react';import useLocalStorage from'../hooks/useLocalStorage';import{useContacts}from'./ContactsProvider';import{useSocket}from'./SocketProvider';var ConversationsContext=React.createContext();export function useConversations(){return useContext(ConversationsContext);}export function ConversationsProvider(_ref){var id=_ref.id,children=_ref.children;var _useLocalStorage=useLocalStorage('conversations',[]),_useLocalStorage2=_slicedToArray(_useLocalStorage,2),conversations=_useLocalStorage2[0],setConversations=_useLocalStorage2[1];var _useState=useState(0),_useState2=_slicedToArray(_useState,2),selectedConversationIndex=_useState2[0],setSelectedConversationIndex=_useState2[1];var _useContacts=useContacts(),contacts=_useContacts.contacts;var socket=useSocket();function createConversation(recipients){setConversations(function(prevConversations){return[].concat(_toConsumableArray(prevConversations),[{recipients:recipients,messages:[]}]);});}var addMessageToConversation=useCallback(function(_ref2){var recipients=_ref2.recipients,text=_ref2.text,sender=_ref2.sender;setConversations(function(prevConversations){var madeChange=false;var newMessage={sender:sender,text:text};var newConversations=prevConversations.map(function(conversation){if(arrayEquality(conversation.recipients,recipients)){madeChange=true;return _objectSpread(_objectSpread({},conversation),{},{messages:[].concat(_toConsumableArray(conversation.messages),[newMessage])});}return conversation;});if(madeChange){return newConversations;}else{return[].concat(_toConsumableArray(prevConversations),[{recipients:recipients,messages:[newMessage]}]);}});},[setConversations]);useEffect(function(){if(socket==null)return;socket.on('receive-message',addMessageToConversation);return function(){return socket.off('receive-message');};},[socket,addMessageToConversation]);function sendMessage(recipients,text){socket.emit('send-message',{recipients:recipients,text:text});addMessageToConversation({recipients:recipients,text:text,sender:id});}var formattedConversations=conversations.map(function(conversation,index){var recipients=conversation.recipients.map(function(recipient){var contact=contacts.find(function(contact){return contact.id===recipient;});var name=contact&&contact.name||recipient;return{id:recipient,name:name};});var messages=conversation.messages.map(function(message){var contact=contacts.find(function(contact){return contact.id===message.sender;});var name=contact&&contact.name||message.sender;var fromMe=id===message.sender;return _objectSpread(_objectSpread({},message),{},{senderName:name,fromMe:fromMe});});var selected=index===selectedConversationIndex;return _objectSpread(_objectSpread({},conversation),{},{messages:messages,recipients:recipients,selected:selected});});var value={conversations:formattedConversations,selectedConversation:formattedConversations[selectedConversationIndex],sendMessage:sendMessage,selectConversationIndex:setSelectedConversationIndex,createConversation:createConversation};return/*#__PURE__*/React.createElement(ConversationsContext.Provider,{value:value},children);}function arrayEquality(a,b){if(a.length!==b.length)return false;a.sort();b.sort();return a.every(function(element,index){return element===b[index];});}","map":{"version":3,"sources":["C:/Users/anton/Desktop/FInt.Tchat/dev/V4/Whatsapp-Clone-master/client/src/contexts/ConversationsProvider.js"],"names":["React","useContext","useState","useEffect","useCallback","useLocalStorage","useContacts","useSocket","ConversationsContext","createContext","useConversations","ConversationsProvider","id","children","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","contacts","socket","createConversation","recipients","prevConversations","messages","addMessageToConversation","text","sender","madeChange","newMessage","newConversations","map","conversation","arrayEquality","on","off","sendMessage","emit","formattedConversations","index","recipient","contact","find","name","message","fromMe","senderName","selected","value","selectedConversation","selectConversationIndex","a","b","length","sort","every","element"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect, useCallback } from 'react'\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\nimport { useSocket } from './SocketProvider';\n\nconst ConversationsContext = React.createContext()\n\nexport function useConversations() {\n  return useContext(ConversationsContext)\n}\n\nexport function ConversationsProvider({ id, children }) {\n  const [conversations, setConversations] = useLocalStorage('conversations', [])\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0)\n  const { contacts } = useContacts()\n  const socket = useSocket()\n\n  function createConversation(recipients) {\n    setConversations(prevConversations => {\n      return [...prevConversations, { recipients, messages: [] }]\n    })\n  }\n\n  const addMessageToConversation = useCallback(({ recipients, text, sender }) => {\n    setConversations(prevConversations => {\n      let madeChange = false\n      const newMessage = { sender, text }\n      const newConversations = prevConversations.map(conversation => {\n        if (arrayEquality(conversation.recipients, recipients)) {\n          madeChange = true\n          return {\n            ...conversation,\n            messages: [...conversation.messages, newMessage]\n          }\n        }\n\n        return conversation\n      })\n\n      if (madeChange) {\n        return newConversations\n      } else {\n        return [\n          ...prevConversations,\n          { recipients, messages: [newMessage] }\n        ]\n      }\n    })\n  }, [setConversations])\n\n  useEffect(() => {\n    if (socket == null) return\n\n    socket.on('receive-message', addMessageToConversation)\n\n    return () => socket.off('receive-message')\n  }, [socket, addMessageToConversation])\n\n  function sendMessage(recipients, text) {\n    socket.emit('send-message', { recipients, text })\n\n    addMessageToConversation({ recipients, text, sender: id })\n  }\n\n  const formattedConversations = conversations.map((conversation, index) => {\n    const recipients = conversation.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.id === recipient\n      })\n      const name = (contact && contact.name) || recipient\n      return { id: recipient, name }\n    })\n\n    const messages = conversation.messages.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.id === message.sender\n      })\n      const name = (contact && contact.name) || message.sender\n      const fromMe = id === message.sender\n      return { ...message, senderName: name, fromMe }\n    })\n    \n    const selected = index === selectedConversationIndex\n    return { ...conversation, messages, recipients, selected }\n  })\n\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    sendMessage,\n    selectConversationIndex: setSelectedConversationIndex,\n    createConversation\n  }\n\n  return (\n    <ConversationsContext.Provider value={value}>\n      {children}\n    </ConversationsContext.Provider>\n  )\n}\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false\n\n  a.sort()\n  b.sort()\n\n  return a.every((element, index) => {\n    return element === b[index]\n  })\n}"]},"metadata":{},"sourceType":"module"}