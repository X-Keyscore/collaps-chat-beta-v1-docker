{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anton\\\\Desktop\\\\FInt.Tchat\\\\dev\\\\V9\\\\client\\\\src\\\\contexts\\\\ChannelsProvider.js\";\nimport React, { useContext, useState, useEffect, useCallback } from 'react';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { useSocket } from './SocketProvider';\nconst ChannelsContext = React.createContext();\nexport function useChannels() {\n  return useContext(ChannelsContext);\n}\nexport function ChannelsProvider({\n  id,\n  children\n}) {\n  const [channels, setChannels] = useLocalStorage('conversations', []);\n  const [selectedChannel, setSelectedChannel] = useState();\n  const socket = useSocket();\n  const addMessageToChannel = useCallback(({\n    recipients,\n    text,\n    sender\n  }) => {\n    setChannels(prevChannels => {\n      let madeChange = false;\n      const newMessage = {\n        sender,\n        text\n      };\n      const newChannels = prevChannels.map(channel => {\n        if (arrayEquality(channel.recipients, recipients)) {\n          madeChange = true;\n          return { ...channel,\n            messages: [...channel.messages, newMessage]\n          };\n        }\n\n        return channel;\n      });\n\n      if (madeChange) {\n        return newChannels;\n      } else {\n        return [...prevChannels, {\n          recipients,\n          messages: [newMessage]\n        }];\n      }\n    });\n  }, [setChannels]);\n  useEffect(() => {\n    if (socket == null) return;\n    socket.on('receive-message', addMessageToChannel);\n    return () => socket.off('receive-message');\n  }, [socket, addMessageToChannel]);\n\n  function sendMessage(recipients, text) {\n    socket.emit('send-message', {\n      recipients,\n      text\n    });\n    addMessageToChannel({\n      recipients,\n      text,\n      sender: id\n    });\n  }\n\n  const value = {\n    selectedChannel: selectedChannel,\n    setSelectedChannel,\n    sendMessage\n  };\n  return /*#__PURE__*/React.createElement(ChannelsContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false;\n  a.sort();\n  b.sort();\n  return a.every((element, index) => {\n    return element === b[index];\n  });\n}\n\nexport default ChannelsContext;","map":{"version":3,"sources":["C:/Users/anton/Desktop/FInt.Tchat/dev/V9/client/src/contexts/ChannelsProvider.js"],"names":["React","useContext","useState","useEffect","useCallback","useLocalStorage","useSocket","ChannelsContext","createContext","useChannels","ChannelsProvider","id","children","channels","setChannels","selectedChannel","setSelectedChannel","socket","addMessageToChannel","recipients","text","sender","prevChannels","madeChange","newMessage","newChannels","map","channel","arrayEquality","messages","on","off","sendMessage","emit","value","a","b","length","sort","every","element","index"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect, useCallback } from 'react'\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { useSocket } from './SocketProvider';\n\nconst ChannelsContext = React.createContext()\n\nexport function useChannels() {\n  return useContext(ChannelsContext)\n}\n\nexport function ChannelsProvider({ id, children }) {\n  const [channels, setChannels] = useLocalStorage('conversations', [])\n  const [selectedChannel, setSelectedChannel] = useState()\n  const socket = useSocket()\n\n  const addMessageToChannel = useCallback(({ recipients, text, sender }) => {\n    setChannels(prevChannels => {\n      let madeChange = false\n      const newMessage = { sender, text }\n      const newChannels = prevChannels.map(channel => {\n        if (arrayEquality(channel.recipients, recipients)) {\n          madeChange = true\n          return {\n            ...channel,\n            messages: [...channel.messages, newMessage]\n          }\n        }\n\n        return channel\n      })\n\n      if (madeChange) {\n        return newChannels\n      } else {\n        return [\n          ...prevChannels,\n          { recipients, messages: [newMessage] }\n        ]\n      }\n    })\n  }, [setChannels])\n\n  useEffect(() => {\n    if (socket == null) return\n\n    socket.on('receive-message', addMessageToChannel)\n\n    return () => socket.off('receive-message')\n  }, [socket, addMessageToChannel])\n\n  function sendMessage(recipients, text) {\n    socket.emit('send-message', { recipients, text })\n\n    addMessageToChannel({ recipients, text, sender: id })\n  }\n\n  const value = {\n    selectedChannel: selectedChannel,\n    setSelectedChannel,\n    sendMessage\n  }\n\n  return (\n    <ChannelsContext.Provider value={value}>\n      {children}\n    </ChannelsContext.Provider>\n  )\n}\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false\n\n  a.sort()\n  b.sort()\n\n  return a.every((element, index) => {\n    return element === b[index]\n  })\n}\n\nexport default ChannelsContext"]},"metadata":{},"sourceType":"module"}