{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anton\\\\Desktop\\\\collaps-chat\\\\dev\\\\Beta\\\\V1\\\\client\\\\src\\\\components\\\\App.js\";\nimport React, { useState } from 'react';\nimport Connection from './Connection/Connection';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport Dashboard from './Dashboard';\nimport api from '../api';\nimport { ChannelsProvider } from '../contexts/ChannelsProvider';\nimport { SocketProvider } from '../contexts/SocketProvider';\nimport { UserProvider } from '../contexts/UserProvider';\n\nfunction App() {\n  // Fonctions pour utiliser le stockage local pour l'id et le token\n  const [id, setId] = useLocalStorage('id');\n  const [token, setToken] = useLocalStorage('token');\n  const [autoLoginValidity, setAutoLoginValidity] = useState(Boolean);\n  const connection = /*#__PURE__*/React.createElement(Connection, {\n    setId: setId,\n    setToken: setToken,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 22\n    }\n  }); // Si l'id ou le token n'est pas présent il faut se connecter pour obtenir ces informations\n\n  if (id === undefined || token === undefined) {\n    return /*#__PURE__*/React.createElement(Connection, {\n      setId: setId,\n      setToken: setToken,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 7\n      }\n    });\n  }\n\n  const test1 = api.autologinUser({\n    id,\n    token\n  }).then(res => {\n    if (!res.data.status.success) return connection;\n    if (!res.data.status.idValide) return connection;\n    if (!res.data.status.tokenValide) return connection;\n    const localStorage = {\n      id,\n      token\n    }; // Si toutes les informations sont présentes j'affiche le \"Dashboard\"\n\n    console.log(\"test\");\n    setAutoLoginValidity(true);\n  });\n  console.log(test1);\n\n  if (!autoLoginValidity) {\n    return connection;\n  } else if (autoLoginValidity) return /*#__PURE__*/React.createElement(SocketProvider, {\n    localStorage: localStorage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(UserProvider, {\n    localStorage: localStorage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ChannelsProvider, {\n    localStorage: localStorage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Dashboard, {\n    localStorage: localStorage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/anton/Desktop/collaps-chat/dev/Beta/V1/client/src/components/App.js"],"names":["React","useState","Connection","useLocalStorage","Dashboard","api","ChannelsProvider","SocketProvider","UserProvider","App","id","setId","token","setToken","autoLoginValidity","setAutoLoginValidity","Boolean","connection","undefined","test1","autologinUser","then","res","data","status","success","idValide","tokenValide","localStorage","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,SAASC,cAAT,QAA+B,4BAA/B;AACA,SAASC,YAAT,QAA6B,0BAA7B;;AAEA,SAASC,GAAT,GAAe;AACb;AACA,QAAM,CAACC,EAAD,EAAKC,KAAL,IAAcR,eAAe,CAAC,IAAD,CAAnC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,eAAe,CAAC,OAAD,CAAzC;AAEA,QAAM,CAACW,iBAAD,EAAoBC,oBAApB,IAA4Cd,QAAQ,CAACe,OAAD,CAA1D;AAEA,QAAMC,UAAU,gBAAG,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAEN,KAAnB;AAA0B,IAAA,QAAQ,EAAEE,QAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAnB,CAPa,CASb;;AACA,MAAIH,EAAE,KAAKQ,SAAP,IAAoBN,KAAK,KAAKM,SAAlC,EAA6C;AAC3C,wBACE,oBAAC,UAAD;AAAY,MAAA,KAAK,EAAEP,KAAnB;AAA0B,MAAA,QAAQ,EAAEE,QAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD;;AAED,QAAMM,KAAK,GAAGd,GAAG,CAACe,aAAJ,CAAkB;AAAEV,IAAAA,EAAF;AAAME,IAAAA;AAAN,GAAlB,EAAiCS,IAAjC,CAAsCC,GAAG,IAAI;AACzD,QAAI,CAACA,GAAG,CAACC,IAAJ,CAASC,MAAT,CAAgBC,OAArB,EAA8B,OAAOR,UAAP;AAC9B,QAAI,CAACK,GAAG,CAACC,IAAJ,CAASC,MAAT,CAAgBE,QAArB,EAA+B,OAAOT,UAAP;AAC/B,QAAI,CAACK,GAAG,CAACC,IAAJ,CAASC,MAAT,CAAgBG,WAArB,EAAkC,OAAOV,UAAP;AAElC,UAAMW,YAAY,GAAG;AAAElB,MAAAA,EAAF;AAAME,MAAAA;AAAN,KAArB,CALyD,CAMzD;;AACAiB,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAf,IAAAA,oBAAoB,CAAC,IAAD,CAApB;AACD,GATa,CAAd;AAWAc,EAAAA,OAAO,CAACC,GAAR,CAAYX,KAAZ;;AAEA,MAAI,CAACL,iBAAL,EAAwB;AACtB,WAAOG,UAAP;AACD,GAFD,MAEO,IAAIH,iBAAJ,EAGP,oBACE,oBAAC,cAAD;AAAgB,IAAA,YAAY,EAAEc,YAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAc,IAAA,YAAY,EAAEA,YAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,gBAAD;AAAkB,IAAA,YAAY,EAAEA,YAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAW,IAAA,YAAY,EAAEA,YAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CADF;AAUD;;AAED,eAAenB,GAAf","sourcesContent":["import React, { useState } from 'react'\nimport Connection from './Connection/Connection'\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport Dashboard from './Dashboard'\nimport api from '../api'\nimport { ChannelsProvider } from '../contexts/ChannelsProvider';\nimport { SocketProvider } from '../contexts/SocketProvider';\nimport { UserProvider } from '../contexts/UserProvider';\n\nfunction App() {\n  // Fonctions pour utiliser le stockage local pour l'id et le token\n  const [id, setId] = useLocalStorage('id')\n  const [token, setToken] = useLocalStorage('token')\n\n  const [autoLoginValidity, setAutoLoginValidity] = useState(Boolean)\n\n  const connection = <Connection setId={setId} setToken={setToken} />\n\n  // Si l'id ou le token n'est pas présent il faut se connecter pour obtenir ces informations\n  if (id === undefined || token === undefined) {\n    return (\n      <Connection setId={setId} setToken={setToken} />\n    )\n  }\n\n  const test1 = api.autologinUser({ id, token }).then(res => {\n    if (!res.data.status.success) return connection\n    if (!res.data.status.idValide) return connection\n    if (!res.data.status.tokenValide) return connection\n\n    const localStorage = { id, token }\n    // Si toutes les informations sont présentes j'affiche le \"Dashboard\"\n    console.log(\"test\")\n    setAutoLoginValidity(true)\n  })\n\n  console.log(test1)\n\n  if (!autoLoginValidity) {\n    return connection\n  } else if (autoLoginValidity)\n  \n\n  return (\n    <SocketProvider localStorage={localStorage}>\n      <UserProvider localStorage={localStorage}>\n        <ChannelsProvider localStorage={localStorage}>\n          <Dashboard localStorage={localStorage} />\n        </ChannelsProvider>\n      </UserProvider>\n    </SocketProvider>\n  )\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}