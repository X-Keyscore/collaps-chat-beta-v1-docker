{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anton\\\\Desktop\\\\FInt.Tchat\\\\dev\\\\V8\\\\client\\\\src\\\\contexts\\\\ConversationsProvider.js\";\nimport React, { useContext, useState, useEffect, useCallback } from 'react';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\nimport { useSocket } from './SocketProvider';\nconst ConversationsContext = React.createContext();\nexport function useConversations() {\n  return useContext(ConversationsContext);\n}\nexport function ConversationsProvider({\n  id,\n  children\n}) {\n  const [conversations, setConversations] = useLocalStorage('conversations', []);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(Number);\n  const {\n    contacts\n  } = useContacts();\n  const socket = useSocket();\n\n  function createConversation(recipients) {\n    setConversations(prevConversations => {\n      const id = Math.floor(Math.random() * 10000000000000000) + 99999999999999999;\n      return [...prevConversations, {\n        id: id,\n        recipients,\n        messages: []\n      }];\n    });\n  }\n\n  const addMessageToConversation = useCallback(({\n    recipients,\n    text,\n    sender\n  }) => {\n    setConversations(prevConversations => {\n      let madeChange = false;\n      const newMessage = {\n        sender,\n        text\n      };\n      const newConversations = prevConversations.map(conversation => {\n        if (arrayEquality(conversation.recipients, recipients)) {\n          madeChange = true;\n          return { ...conversation,\n            messages: [...conversation.messages, newMessage]\n          };\n        }\n\n        return conversation;\n      });\n\n      if (madeChange) {\n        return newConversations;\n      } else {\n        return [...prevConversations, {\n          recipients,\n          messages: [newMessage]\n        }];\n      }\n    });\n  }, [setConversations]);\n  useEffect(() => {\n    if (socket == null) return;\n    socket.on('receive-message', addMessageToConversation);\n    return () => socket.off('receive-message');\n  }, [socket, addMessageToConversation]);\n\n  function sendMessage(recipients, text) {\n    socket.emit('send-message', {\n      recipients,\n      text\n    });\n    addMessageToConversation({\n      recipients,\n      text,\n      sender: id\n    });\n  }\n\n  const formattedConversations = conversations.map((conversation, index) => {\n    console.log(conversation);\n    const recipients = conversation.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.id === recipient;\n      });\n      const name = contact && contact.name || recipient;\n      return {\n        id: recipient,\n        name\n      };\n    });\n    const messages = conversation.messages.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.id === message.sender;\n      });\n      const name = contact && contact.name || message.sender;\n      const fromMe = id === message.sender;\n      return { ...message,\n        senderName: name,\n        fromMe\n      };\n    });\n    console.log(selectedConversationIndex);\n    const selected = conversation.id === selectedConversationIndex;\n    return { ...conversation,\n      messages,\n      recipients,\n      selected\n    };\n  });\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    sendMessage,\n    selectConversationId: setSelectedConversationId,\n    createConversation\n  };\n  return /*#__PURE__*/React.createElement(ConversationsContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false;\n  a.sort();\n  b.sort();\n  return a.every((element, index) => {\n    return element === b[index];\n  });\n}\n\nexport default ConversationsContext;","map":{"version":3,"sources":["C:/Users/anton/Desktop/FInt.Tchat/dev/V8/client/src/contexts/ConversationsProvider.js"],"names":["React","useContext","useState","useEffect","useCallback","useLocalStorage","useContacts","useSocket","ConversationsContext","createContext","useConversations","ConversationsProvider","id","children","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","Number","contacts","socket","createConversation","recipients","prevConversations","Math","floor","random","messages","addMessageToConversation","text","sender","madeChange","newMessage","newConversations","map","conversation","arrayEquality","on","off","sendMessage","emit","formattedConversations","index","console","log","recipient","contact","find","name","message","fromMe","senderName","selected","value","selectedConversation","selectConversationId","setSelectedConversationId","a","b","length","sort","every","element"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect, useCallback } from 'react'\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\nimport { useSocket } from './SocketProvider';\n\nconst ConversationsContext = React.createContext()\n\nexport function useConversations() {\n  return useContext(ConversationsContext)\n}\n\nexport function ConversationsProvider({ id, children }) {\n  const [conversations, setConversations] = useLocalStorage('conversations', [])\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(Number)\n  const { contacts } = useContacts()\n  const socket = useSocket()\n\n  function createConversation(recipients) {\n    setConversations(prevConversations => {\n      const id = Math.floor(Math.random() * 10000000000000000) + 99999999999999999;\n      return [...prevConversations, { id: id, recipients, messages: [] }]\n    })\n  }\n\n  const addMessageToConversation = useCallback(({ recipients, text, sender }) => {\n    setConversations(prevConversations => {\n      let madeChange = false\n      const newMessage = { sender, text }\n      const newConversations = prevConversations.map(conversation => {\n        if (arrayEquality(conversation.recipients, recipients)) {\n          madeChange = true\n          return {\n            ...conversation,\n            messages: [...conversation.messages, newMessage]\n          }\n        }\n\n        return conversation\n      })\n\n      if (madeChange) {\n        return newConversations\n      } else {\n        return [\n          ...prevConversations,\n          { recipients, messages: [newMessage] }\n        ]\n      }\n    })\n  }, [setConversations])\n\n  useEffect(() => {\n    if (socket == null) return\n\n    socket.on('receive-message', addMessageToConversation)\n\n    return () => socket.off('receive-message')\n  }, [socket, addMessageToConversation])\n\n  function sendMessage(recipients, text) {\n    socket.emit('send-message', { recipients, text })\n\n    addMessageToConversation({ recipients, text, sender: id })\n  }\n\n  const formattedConversations = conversations.map((conversation, index) => {\n    console.log(conversation)\n    const recipients = conversation.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.id === recipient\n      })\n      const name = (contact && contact.name) || recipient\n      return { id: recipient, name }\n    })\n\n    const messages = conversation.messages.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.id === message.sender\n      })\n      const name = (contact && contact.name) || message.sender\n      const fromMe = id === message.sender\n      return { ...message, senderName: name, fromMe }\n    })\n    console.log(selectedConversationIndex)\n    const selected = conversation.id === selectedConversationIndex\n    return { ...conversation, messages, recipients, selected }\n  })\n\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    sendMessage,\n    selectConversationId: setSelectedConversationId,\n    createConversation\n  }\n\n  return (\n    <ConversationsContext.Provider value={value}>\n      {children}\n    </ConversationsContext.Provider>\n  )\n}\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false\n\n  a.sort()\n  b.sort()\n\n  return a.every((element, index) => {\n    return element === b[index]\n  })\n}\n\nexport default ConversationsContext"]},"metadata":{},"sourceType":"module"}