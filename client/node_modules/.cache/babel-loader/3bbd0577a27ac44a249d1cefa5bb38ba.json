{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anton\\\\Desktop\\\\collaps-chat\\\\dev\\\\Beta\\\\V1\\\\client\\\\src\\\\components\\\\App.js\";\nimport React from 'react';\nimport Connection from './Connection/Connection';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport Dashboard from './Dashboard';\nimport { ChannelsProvider } from '../contexts/ChannelsProvider';\nimport { SocketProvider } from '../contexts/SocketProvider';\nimport { UserProvider } from '../contexts/UserProvider';\n\nfunction App() {\n  // Fonctions pour utiliser le stockage local pour l'id et le token\n  const [id, setId] = useLocalStorage('id');\n  const [token, setToken] = useLocalStorage('token');\n  console.log(id, token); // Si l'id ou le token n'est pas présent il faut se connecter pour obtenir ces informations\n\n  if (id === undefined || token === undefined) {\n    return /*#__PURE__*/React.createElement(Connection, {\n      setId: setId,\n      setToken: setToken,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 7\n      }\n    });\n  }\n\n  const localStorage = {\n    id,\n    token\n  }; // Si toutes les informations sont présentes j'affiche le \"Dashboard\"\n\n  return /*#__PURE__*/React.createElement(SocketProvider, {\n    localStorage: localStorage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(UserProvider, {\n    localStorage: localStorage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ChannelsProvider, {\n    localStorage: localStorage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Dashboard, {\n    localStorage: localStorage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 11\n    }\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/anton/Desktop/collaps-chat/dev/Beta/V1/client/src/components/App.js"],"names":["React","Connection","useLocalStorage","Dashboard","ChannelsProvider","SocketProvider","UserProvider","App","id","setId","token","setToken","console","log","undefined","localStorage"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,SAASC,cAAT,QAA+B,4BAA/B;AACA,SAASC,YAAT,QAA6B,0BAA7B;;AAEA,SAASC,GAAT,GAAe;AACb;AACA,QAAM,CAACC,EAAD,EAAKC,KAAL,IAAcP,eAAe,CAAC,IAAD,CAAnC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,eAAe,CAAC,OAAD,CAAzC;AAEAU,EAAAA,OAAO,CAACC,GAAR,CAAYL,EAAZ,EAAgBE,KAAhB,EALa,CAMb;;AACA,MAAIF,EAAE,KAAKM,SAAP,IAAoBJ,KAAK,KAAKI,SAAlC,EAA6C;AAC3C,wBACE,oBAAC,UAAD;AAAY,MAAA,KAAK,EAAEL,KAAnB;AAA0B,MAAA,QAAQ,EAAEE,QAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD;;AAED,QAAMI,YAAY,GAAG;AAAEP,IAAAA,EAAF;AAAME,IAAAA;AAAN,GAArB,CAba,CAcb;;AACA,sBACE,oBAAC,cAAD;AAAgB,IAAA,YAAY,EAAEK,YAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAc,IAAA,YAAY,EAAEA,YAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,gBAAD;AAAkB,IAAA,YAAY,EAAEA,YAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAW,IAAA,YAAY,EAAEA,YAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CADF;AASD;;AAED,eAAeR,GAAf","sourcesContent":["import React from 'react'\nimport Connection from './Connection/Connection'\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport Dashboard from './Dashboard'\nimport { ChannelsProvider } from '../contexts/ChannelsProvider';\nimport { SocketProvider } from '../contexts/SocketProvider';\nimport { UserProvider } from '../contexts/UserProvider';\n\nfunction App() {\n  // Fonctions pour utiliser le stockage local pour l'id et le token\n  const [id, setId] = useLocalStorage('id')\n  const [token, setToken] = useLocalStorage('token')\n\n  console.log(id, token)\n  // Si l'id ou le token n'est pas présent il faut se connecter pour obtenir ces informations\n  if (id === undefined || token === undefined) {\n    return (\n      <Connection setId={setId} setToken={setToken} />\n    )\n  }\n\n  const localStorage = { id, token }\n  // Si toutes les informations sont présentes j'affiche le \"Dashboard\"\n  return (\n    <SocketProvider localStorage={localStorage}>\n      <UserProvider localStorage={localStorage}>\n        <ChannelsProvider localStorage={localStorage}>\n          <Dashboard localStorage={localStorage} />\n        </ChannelsProvider>\n      </UserProvider>\n    </SocketProvider>\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}