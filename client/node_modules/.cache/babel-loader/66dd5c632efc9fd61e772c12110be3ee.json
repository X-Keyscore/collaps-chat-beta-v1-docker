{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anton\\\\Desktop\\\\FInt.Tchat\\\\dev\\\\V10\\\\client\\\\src\\\\contexts\\\\UserProvider.js\";\nimport React, { useContext } from 'react';\nimport api from \"../api\";\nconst UserContext = React.createContext();\nexport function useUser() {\n  return useContext(UserContext);\n} // Cette fonction renvoie les données du client\n// -Par défaut elle renvoie les données brutes\n// -Si le type est \"cross\" elle renvoie les données croisées\n\ngetClient = type => {\n  return new Promise(resolve => {\n    api.getUserById(this.props.id).then(user => {\n      // Constante pour stocker les données brutes du cleint\n      const clientRaw = user.data.data; // si le type je renvoie les données brute par défaut\n\n      if (type === undefined) return resolve(clientRaw); // Si le client n'a pas de constact j'envoie directement les données\n\n      if (clientRaw.channels.length === 0) return resolve(clientRaw);\n\n      if (type === \"cross\") {\n        // Variable pour stocker les données croisées du cleint\n        var clientCross = user.data.data; // Je filtre pour ne récupérer que les contacts privés\n\n        clientCross.channels.filter(channel => channel.type === \"private\").forEach((channel, index) => {\n          // Je récupère les informations sur le destinataire grace à sont id\n          api.getUserById(channel.recipients.id).then(recipient => {\n            // Si le destinataire n'existe plus je le supprime des données du client\n            if (recipient.data.data === null) {\n              // Je boucle tous les \"channels\" du client\n              for (let i = 0; i < clientCross.channels.length; i++) {\n                // Je teste si l'id du \"channel\" sélectionné correspond à l'id du \"channel\" passé dans la boucle\n                if (clientCross.channels[i].recipients.id === channel.recipients.id) {\n                  // Je supprime le \"channel\" dans la liste grace à sa position\n                  clientCross.channels.splice(i, 1); // Je mets à jour le client\n\n                  return api.updateUserById(clientCross.id, {\n                    data: {\n                      channels: clientCross.channels\n                    }\n                  }).then(res => {\n                    /*//EN COURS// Système gestion des erreurs*/\n                  });\n                }\n              }\n            } // Je complète les informations existantes du destinataire avec celle de la base de données\n\n\n            channel.recipients = recipient.data.data; // J'ajoute un element \"selected\" à \"channel\" est passe la valeur \"true\" au premier\n\n            Object.assign(channel, {\n              selected: false\n            });\n            Object.assign(channel, {\n              key: index\n            }); // Je mets à jour l'object \"channels\" du client \n\n            clientCross.channels[index] = channel;\n            if (clientRaw.channels.length === index + 1) return resolve(clientCross);\n          });\n        });\n      }\n    });\n  });\n};\n\ncreateUser = () => {};\n\ndeleteUser = () => {};\n\nexport function UserProvider({\n  id,\n  children\n}) {\n  async function updateUser(id, body) {\n    const payload = body;\n    await api.updateUserById(id, payload).then(res => {});\n  }\n\n  const value = {\n    client,\n    getClient: this.getClient,\n    updateUser: this.updateUser\n  };\n  return /*#__PURE__*/React.createElement(UserContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, this.props.children);\n}\nexport default UserContext;","map":{"version":3,"sources":["C:/Users/anton/Desktop/FInt.Tchat/dev/V10/client/src/contexts/UserProvider.js"],"names":["React","useContext","api","UserContext","createContext","useUser","getClient","type","Promise","resolve","getUserById","props","id","then","user","clientRaw","data","undefined","channels","length","clientCross","filter","channel","forEach","index","recipients","recipient","i","splice","updateUserById","res","Object","assign","selected","key","createUser","deleteUser","UserProvider","children","updateUser","body","payload","value","client"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react'\r\n\r\nimport api from \"../api\"\r\n\r\nconst UserContext = React.createContext()\r\n\r\nexport function useUser() {\r\n  return useContext(UserContext)\r\n}\r\n\r\n// Cette fonction renvoie les données du client\r\n// -Par défaut elle renvoie les données brutes\r\n// -Si le type est \"cross\" elle renvoie les données croisées\r\ngetClient = (type) => {\r\n  return new Promise((resolve) => {\r\n    api.getUserById(this.props.id).then(\r\n      (user) => {\r\n        // Constante pour stocker les données brutes du cleint\r\n        const clientRaw = user.data.data\r\n\r\n        // si le type je renvoie les données brute par défaut\r\n        if (type === undefined) return resolve(clientRaw)\r\n\r\n        // Si le client n'a pas de constact j'envoie directement les données\r\n        if (clientRaw.channels.length === 0) return resolve(clientRaw)\r\n\r\n        if (type === \"cross\") {\r\n          // Variable pour stocker les données croisées du cleint\r\n          var clientCross = user.data.data\r\n\r\n          // Je filtre pour ne récupérer que les contacts privés\r\n          clientCross.channels.filter(channel => channel.type === \"private\").forEach((channel, index) => {\r\n\r\n            // Je récupère les informations sur le destinataire grace à sont id\r\n            api.getUserById(channel.recipients.id).then((recipient) => {\r\n\r\n              // Si le destinataire n'existe plus je le supprime des données du client\r\n              if (recipient.data.data === null) {\r\n                // Je boucle tous les \"channels\" du client\r\n                for (let i = 0; i < clientCross.channels.length; i++) {\r\n                  // Je teste si l'id du \"channel\" sélectionné correspond à l'id du \"channel\" passé dans la boucle\r\n                  if (clientCross.channels[i].recipients.id === channel.recipients.id) {\r\n                    // Je supprime le \"channel\" dans la liste grace à sa position\r\n                    clientCross.channels.splice(i, 1);\r\n                    // Je mets à jour le client\r\n                    return api.updateUserById(clientCross.id, { data: { channels: clientCross.channels } }).then(res => {/*//EN COURS// Système gestion des erreurs*/ })\r\n                  }\r\n                }\r\n              }\r\n\r\n              // Je complète les informations existantes du destinataire avec celle de la base de données\r\n              channel.recipients = recipient.data.data\r\n\r\n              // J'ajoute un element \"selected\" à \"channel\" est passe la valeur \"true\" au premier\r\n              Object.assign(channel, { selected: false })\r\n              Object.assign(channel, { key: index })\r\n\r\n              // Je mets à jour l'object \"channels\" du client \r\n              clientCross.channels[index] = channel\r\n\r\n              if (clientRaw.channels.length === index + 1) return resolve(clientCross)\r\n\r\n            });\r\n          })\r\n        }\r\n      })\r\n  })\r\n}\r\n\r\ncreateUser = () => {\r\n\r\n}\r\n\r\ndeleteUser = () => {\r\n\r\n}\r\n\r\nexport function UserProvider({ id, children }) {\r\n\r\n  async function updateUser(id, body) {\r\n    const payload = body\r\n    await api.updateUserById(id, payload).then(res => {\r\n    })\r\n  }\r\n\r\n  const value = {\r\n    client,\r\n    getClient: this.getClient,\r\n    updateUser: this.updateUser\r\n  }\r\n\r\n  return (\r\n    <UserContext.Provider value={value}>\r\n      {this.props.children}\r\n    </UserContext.Provider>\r\n  )\r\n}\r\n\r\nexport default UserContext"]},"metadata":{},"sourceType":"module"}