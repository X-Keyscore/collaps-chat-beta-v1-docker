{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anton\\\\Desktop\\\\FInt.Tchat\\\\dev\\\\V10\\\\client\\\\src\\\\contexts\\\\ChannelsProvider.js\";\nimport React, { useContext, useState, useEffect } from 'react';\nimport { useSocket } from './SocketProvider';\nimport api from \"../api\";\nimport { Timestamp } from 'mongodb';\nconst ChannelsContext = React.createContext();\nexport function useChannels() {\n  return useContext(ChannelsContext);\n}\nexport function ChannelsProvider({\n  id,\n  children\n}) {\n  const [selectedChannel, setSelectedChannel] = useState(null);\n  const socket = useSocket();\n\n  function addMessageToChannel(channel, text, client, recipients) {\n    // J'isole les données du client dans une variable pour pouvoir les modifier\n    var clientEdit = client; // Je boucle tous les \"channels\" du client\n\n    for (let i = 0; i < clientEdit.channels.length; i++) {\n      // Je teste si l'id du \"channel\" sélectionné correspond à l'id du \"channel\" passé dans la boucle\n      if (clientEdit.channels[i].id === channel.id) {\n        // J'ajoute le message aux données du client\n        clientEdit.channels[i].messages.push({\n          sender: clientEdit.id,\n          date: new Date(),\n          text: text\n        }); // Je mets à jour le client\n\n        api.updateUserById(clientEdit.id, {\n          data: {\n            channels: clientEdit.channels\n          }\n        }).then(res => {\n          /*//EN COURS// Système gestion des erreurs*/\n        });\n      }\n    }\n\n    recipients.forEach(recipient => {\n      // J'isole les données du client dans une variable pour pouvoir les modifier\n      var recipientEdit = recipient; // Je boucle tous les \"channels\" du client\n\n      for (let i = 0; i < recipientEdit.channels.length; i++) {\n        // Je teste si l'id du \"channel\" sélectionné correspond à l'id du \"channel\" passé dans la boucle\n        if (recipientEdit.channels[i].id === channel.id) {\n          // J'ajoute le message aux données du client\n          recipientEdit.channels[i].messages.push({\n            sender: client.id,\n            date: new Date(),\n            text: text\n          }); // Je mets à jour le client\n\n          api.updateUserById(recipientEdit.id, {\n            data: {\n              channels: recipientEdit.channels\n            }\n          }).then(res => {\n            /*//EN COURS// Système gestion des erreurs*/\n          });\n        }\n      }\n    });\n  }\n\n  useEffect(() => {\n    if (socket == null) return;\n    socket.on('receive-message', addMessageToChannel);\n    return () => socket.off('receive-message');\n  }, [socket, addMessageToChannel]);\n\n  function sendMessage(channel, text, client, recipients) {\n    //socket.emit('send-message', { recipients, text })\n    addMessageToChannel(channel, text, client, recipients);\n  }\n\n  const value = {\n    selectedChannel: selectedChannel,\n    setSelectedChannel,\n    sendMessage\n  };\n  return /*#__PURE__*/React.createElement(ChannelsContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false;\n  a.sort();\n  b.sort();\n  return a.every((element, index) => {\n    return element === b[index];\n  });\n}\n\nexport default ChannelsContext;\n/*\nconst addMessageToChannel = useCallback(({ recipients, text, sender }) => {\n  setChannels(prevChannels => {\n    let madeChange = false\n    const newMessage = { sender, text }\n    const newChannels = prevChannels.map(channel => {\n      if (arrayEquality(channel.recipients, recipients)) {\n        madeChange = true\n        return {\n          ...channel,\n          messages: [...channel.messages, newMessage]\n        }\n      }\n\n      return channel\n    })\n\n    if (madeChange) {\n      return newChannels\n    } else {\n      return [\n        ...prevChannels,\n        { recipients, messages: [newMessage] }\n      ]\n    }\n  })\n}, [])*/","map":{"version":3,"sources":["C:/Users/anton/Desktop/FInt.Tchat/dev/V10/client/src/contexts/ChannelsProvider.js"],"names":["React","useContext","useState","useEffect","useSocket","api","Timestamp","ChannelsContext","createContext","useChannels","ChannelsProvider","id","children","selectedChannel","setSelectedChannel","socket","addMessageToChannel","channel","text","client","recipients","clientEdit","i","channels","length","messages","push","sender","date","Date","updateUserById","data","then","res","forEach","recipient","recipientEdit","on","off","sendMessage","value","arrayEquality","a","b","sort","every","element","index"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,SAASC,SAAT,QAA0B,kBAA1B;AAEA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SAASC,SAAT,QAA0B,SAA1B;AAEA,MAAMC,eAAe,GAAGP,KAAK,CAACQ,aAAN,EAAxB;AAEA,OAAO,SAASC,WAAT,GAAuB;AAC5B,SAAOR,UAAU,CAACM,eAAD,CAAjB;AACD;AAED,OAAO,SAASG,gBAAT,CAA0B;AAAEC,EAAAA,EAAF;AAAMC,EAAAA;AAAN,CAA1B,EAA4C;AACjD,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCZ,QAAQ,CAAC,IAAD,CAAtD;AACA,QAAMa,MAAM,GAAGX,SAAS,EAAxB;;AAEA,WAASY,mBAAT,CAA6BC,OAA7B,EAAsCC,IAAtC,EAA4CC,MAA5C,EAAoDC,UAApD,EAAgE;AAE9D;AACA,QAAIC,UAAU,GAAGF,MAAjB,CAH8D,CAI9D;;AACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,UAAU,CAACE,QAAX,CAAoBC,MAAxC,EAAgDF,CAAC,EAAjD,EAAqD;AACnD;AACA,UAAID,UAAU,CAACE,QAAX,CAAoBD,CAApB,EAAuBX,EAAvB,KAA8BM,OAAO,CAACN,EAA1C,EAA8C;AAC5C;AACAU,QAAAA,UAAU,CAACE,QAAX,CAAoBD,CAApB,EAAuBG,QAAvB,CAAgCC,IAAhC,CAAqC;AACnCC,UAAAA,MAAM,EAAEN,UAAU,CAACV,EADgB;AAEnCiB,UAAAA,IAAI,EAAE,IAAIC,IAAJ,EAF6B;AAGnCX,UAAAA,IAAI,EAAEA;AAH6B,SAArC,EAF4C,CAO5C;;AACAb,QAAAA,GAAG,CAACyB,cAAJ,CAAmBT,UAAU,CAACV,EAA9B,EAAkC;AAAEoB,UAAAA,IAAI,EAAE;AAAER,YAAAA,QAAQ,EAAEF,UAAU,CAACE;AAAvB;AAAR,SAAlC,EAA+ES,IAA/E,CAAoFC,GAAG,IAAI;AAAC;AAA8C,SAA1I;AACD;AACF;;AAEDb,IAAAA,UAAU,CAACc,OAAX,CAAmBC,SAAS,IAAI;AAC9B;AACA,UAAIC,aAAa,GAAGD,SAApB,CAF8B,CAG9B;;AACA,WAAK,IAAIb,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGc,aAAa,CAACb,QAAd,CAAuBC,MAA3C,EAAmDF,CAAC,EAApD,EAAwD;AACtD;AACA,YAAIc,aAAa,CAACb,QAAd,CAAuBD,CAAvB,EAA0BX,EAA1B,KAAiCM,OAAO,CAACN,EAA7C,EAAiD;AAC/C;AACAyB,UAAAA,aAAa,CAACb,QAAd,CAAuBD,CAAvB,EAA0BG,QAA1B,CAAmCC,IAAnC,CAAwC;AACtCC,YAAAA,MAAM,EAAER,MAAM,CAACR,EADuB;AAEtCiB,YAAAA,IAAI,EAAE,IAAIC,IAAJ,EAFgC;AAGtCX,YAAAA,IAAI,EAAEA;AAHgC,WAAxC,EAF+C,CAO/C;;AACAb,UAAAA,GAAG,CAACyB,cAAJ,CAAmBM,aAAa,CAACzB,EAAjC,EAAqC;AAAEoB,YAAAA,IAAI,EAAE;AAAER,cAAAA,QAAQ,EAAEa,aAAa,CAACb;AAA1B;AAAR,WAArC,EAAqFS,IAArF,CAA0FC,GAAG,IAAI;AAAC;AAA8C,WAAhJ;AACD;AACF;AACF,KAjBD;AAkBD;;AAED9B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,MAAM,IAAI,IAAd,EAAoB;AAEpBA,IAAAA,MAAM,CAACsB,EAAP,CAAU,iBAAV,EAA6BrB,mBAA7B;AAEA,WAAO,MAAMD,MAAM,CAACuB,GAAP,CAAW,iBAAX,CAAb;AACD,GANQ,EAMN,CAACvB,MAAD,EAASC,mBAAT,CANM,CAAT;;AAQA,WAASuB,WAAT,CAAqBtB,OAArB,EAA8BC,IAA9B,EAAoCC,MAApC,EAA4CC,UAA5C,EAAwD;AACtD;AAEAJ,IAAAA,mBAAmB,CAACC,OAAD,EAAUC,IAAV,EAAgBC,MAAhB,EAAwBC,UAAxB,CAAnB;AACD;;AAED,QAAMoB,KAAK,GAAG;AACZ3B,IAAAA,eAAe,EAAEA,eADL;AAEZC,IAAAA,kBAFY;AAGZyB,IAAAA;AAHY,GAAd;AAMA,sBACE,oBAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAEC,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG5B,QADH,CADF;AAKD;;AAED,SAAS6B,aAAT,CAAuBC,CAAvB,EAA0BC,CAA1B,EAA6B;AAC3B,MAAID,CAAC,CAAClB,MAAF,KAAamB,CAAC,CAACnB,MAAnB,EAA2B,OAAO,KAAP;AAE3BkB,EAAAA,CAAC,CAACE,IAAF;AACAD,EAAAA,CAAC,CAACC,IAAF;AAEA,SAAOF,CAAC,CAACG,KAAF,CAAQ,CAACC,OAAD,EAAUC,KAAV,KAAoB;AACjC,WAAOD,OAAO,KAAKH,CAAC,CAACI,KAAD,CAApB;AACD,GAFM,CAAP;AAGD;;AAED,eAAexC,eAAf;AAEA","sourcesContent":["import React, { useContext, useState, useEffect } from 'react'\nimport { useSocket } from './SocketProvider';\n\nimport api from \"../api\"\nimport { Timestamp } from 'mongodb';\n\nconst ChannelsContext = React.createContext()\n\nexport function useChannels() {\n  return useContext(ChannelsContext)\n}\n\nexport function ChannelsProvider({ id, children }) {\n  const [selectedChannel, setSelectedChannel] = useState(null)\n  const socket = useSocket()\n\n  function addMessageToChannel(channel, text, client, recipients) {\n\n    // J'isole les données du client dans une variable pour pouvoir les modifier\n    var clientEdit = client\n    // Je boucle tous les \"channels\" du client\n    for (let i = 0; i < clientEdit.channels.length; i++) {\n      // Je teste si l'id du \"channel\" sélectionné correspond à l'id du \"channel\" passé dans la boucle\n      if (clientEdit.channels[i].id === channel.id) {\n        // J'ajoute le message aux données du client\n        clientEdit.channels[i].messages.push({\n          sender: clientEdit.id,\n          date: new Date(),\n          text: text\n        })\n        // Je mets à jour le client\n        api.updateUserById(clientEdit.id, { data: { channels: clientEdit.channels } }).then(res => {/*//EN COURS// Système gestion des erreurs*/ })\n      }\n    }\n\n    recipients.forEach(recipient => {\n      // J'isole les données du client dans une variable pour pouvoir les modifier\n      var recipientEdit = recipient\n      // Je boucle tous les \"channels\" du client\n      for (let i = 0; i < recipientEdit.channels.length; i++) {\n        // Je teste si l'id du \"channel\" sélectionné correspond à l'id du \"channel\" passé dans la boucle\n        if (recipientEdit.channels[i].id === channel.id) {\n          // J'ajoute le message aux données du client\n          recipientEdit.channels[i].messages.push({\n            sender: client.id,\n            date: new Date(),\n            text: text\n          })\n          // Je mets à jour le client\n          api.updateUserById(recipientEdit.id, { data: { channels: recipientEdit.channels } }).then(res => {/*//EN COURS// Système gestion des erreurs*/ })\n        }\n      }\n    });\n  }\n\n  useEffect(() => {\n    if (socket == null) return\n\n    socket.on('receive-message', addMessageToChannel)\n\n    return () => socket.off('receive-message')\n  }, [socket, addMessageToChannel])\n\n  function sendMessage(channel, text, client, recipients) {\n    //socket.emit('send-message', { recipients, text })\n\n    addMessageToChannel(channel, text, client, recipients)\n  }\n\n  const value = {\n    selectedChannel: selectedChannel,\n    setSelectedChannel,\n    sendMessage\n  }\n\n  return (\n    <ChannelsContext.Provider value={value}>\n      {children}\n    </ChannelsContext.Provider>\n  )\n}\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false\n\n  a.sort()\n  b.sort()\n\n  return a.every((element, index) => {\n    return element === b[index]\n  })\n}\n\nexport default ChannelsContext\n\n/*\nconst addMessageToChannel = useCallback(({ recipients, text, sender }) => {\n  setChannels(prevChannels => {\n    let madeChange = false\n    const newMessage = { sender, text }\n    const newChannels = prevChannels.map(channel => {\n      if (arrayEquality(channel.recipients, recipients)) {\n        madeChange = true\n        return {\n          ...channel,\n          messages: [...channel.messages, newMessage]\n        }\n      }\n\n      return channel\n    })\n\n    if (madeChange) {\n      return newChannels\n    } else {\n      return [\n        ...prevChannels,\n        { recipients, messages: [newMessage] }\n      ]\n    }\n  })\n}, [])*/"]},"metadata":{},"sourceType":"module"}