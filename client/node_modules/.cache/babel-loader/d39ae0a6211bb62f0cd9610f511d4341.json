{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anton\\\\Desktop\\\\FInt.Tchat\\\\dev\\\\V10\\\\client\\\\src\\\\contexts\\\\UserProvider.js\";\nimport React, { useContext, useState } from 'react';\nimport api from \"../api\";\nconst UserContext = React.createContext();\nexport function useUser() {\n  return useContext(UserContext);\n}\nexport function UserProvider({\n  id,\n  children\n}) {\n  const [client, setClient] = useState(null); // Cette fonction renvoie les données du client\n  // -Par défaut elle renvoie les données brutes\n  // -Si le type est \"cross\" elle renvoie les données croisées\n\n  function getClient(type) {\n    return new Promise(resolve => {\n      api.getUserById(id).then(user => {\n        // Constante pour stocker les données brutes du cleint\n        const clientRaw = user.data.data; // si le type je renvoie les données brute par défaut\n\n        if (type === undefined) return resolve(clientRaw); // Si le client n'a pas de constact j'envoie directement les données\n\n        if (clientRaw.channels.length === 0) return resolve(clientRaw);\n\n        if (type === \"cross\") {\n          // Variable pour stocker les données croisées du cleint\n          var clientCross = user.data.data; // Je filtre pour ne récupérer que les contacts privés\n\n          clientCross.channels.filter(channel => channel.type === \"private\").forEach((channel, index) => {\n            // Je récupère les informations sur le destinataire grace à sont id\n            api.getUserById(channel.recipients.id).then(recipient => {\n              // Si le destinataire n'existe plus je le supprime des données du client\n              if (recipient.data.data === null) {\n                // Je boucle tous les \"channels\" du client\n                for (let i = 0; i < clientCross.channels.length; i++) {\n                  // Je teste si l'id du \"channel\" sélectionné correspond à l'id du \"channel\" passé dans la boucle\n                  if (clientCross.channels[i].recipients.id === channel.recipients.id) {\n                    // Je supprime le \"channel\" dans la liste grace à sa position\n                    clientCross.channels.splice(i, 1); // Je mets à jour le client\n\n                    return api.updateUserById(clientCross.id, {\n                      data: {\n                        channels: clientCross.channels\n                      }\n                    }).then(res => {\n                      /*//EN COURS// Système gestion des erreurs*/\n                    });\n                  }\n                }\n              } // Je complète les informations existantes du destinataire avec celle de la base de données\n\n\n              channel.recipients = recipient.data.data; // J'ajoute un element \"selected\" à \"channel\" est passe la valeur \"true\" au premier\n\n              Object.assign(channel, {\n                selected: false\n              });\n              Object.assign(channel, {\n                key: index\n              }); // Je mets à jour l'object \"channels\" du client \n\n              clientCross.channels[index] = channel;\n              if (clientRaw.channels.length === index + 1) return resolve(clientCross);\n            });\n          });\n        }\n      });\n    });\n  }\n\n  async function updateUser(id, body) {\n    const payload = body;\n    await api.updateUserById(id, payload).then(res => {});\n  }\n\n  useEffect(() => {\n    return new Promise(resolve => {\n      api.getUserById(id).then(user => {\n        // Constante pour stocker les données brutes du cleint\n        const clientRaw = user.data.data; // si le type je renvoie les données brute par défaut\n\n        if (type === undefined) return resolve(clientRaw); // Si le client n'a pas de constact j'envoie directement les données\n\n        if (clientRaw.channels.length === 0) return resolve(clientRaw);\n\n        if (type === \"cross\") {\n          // Variable pour stocker les données croisées du cleint\n          var clientCross = user.data.data; // Je filtre pour ne récupérer que les contacts privés\n\n          clientCross.channels.filter(channel => channel.type === \"private\").forEach((channel, index) => {\n            // Je récupère les informations sur le destinataire grace à sont id\n            api.getUserById(channel.recipients.id).then(recipient => {\n              // Si le destinataire n'existe plus je le supprime des données du client\n              if (recipient.data.data === null) {\n                // Je boucle tous les \"channels\" du client\n                for (let i = 0; i < clientCross.channels.length; i++) {\n                  // Je teste si l'id du \"channel\" sélectionné correspond à l'id du \"channel\" passé dans la boucle\n                  if (clientCross.channels[i].recipients.id === channel.recipients.id) {\n                    // Je supprime le \"channel\" dans la liste grace à sa position\n                    clientCross.channels.splice(i, 1); // Je mets à jour le client\n\n                    return api.updateUserById(clientCross.id, {\n                      data: {\n                        channels: clientCross.channels\n                      }\n                    }).then(res => {\n                      /*//EN COURS// Système gestion des erreurs*/\n                    });\n                  }\n                }\n              } // Je complète les informations existantes du destinataire avec celle de la base de données\n\n\n              channel.recipients = recipient.data.data; // J'ajoute un element \"selected\" à \"channel\" est passe la valeur \"true\" au premier\n\n              Object.assign(channel, {\n                selected: false\n              });\n              Object.assign(channel, {\n                key: index\n              }); // Je mets à jour l'object \"channels\" du client \n\n              clientCross.channels[index] = channel;\n              if (clientRaw.channels.length === index + 1) return resolve(clientCross);\n            });\n          });\n        }\n      });\n    });\n  }, []);\n  const value = {\n    setClient,\n    client,\n    getClient,\n    updateUser\n  };\n  return /*#__PURE__*/React.createElement(UserContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 5\n    }\n  }, children);\n}\nexport default UserContext;","map":{"version":3,"sources":["C:/Users/anton/Desktop/FInt.Tchat/dev/V10/client/src/contexts/UserProvider.js"],"names":["React","useContext","useState","api","UserContext","createContext","useUser","UserProvider","id","children","client","setClient","getClient","type","Promise","resolve","getUserById","then","user","clientRaw","data","undefined","channels","length","clientCross","filter","channel","forEach","index","recipients","recipient","i","splice","updateUserById","res","Object","assign","selected","key","updateUser","body","payload","useEffect","value"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react'\r\n\r\nimport api from \"../api\"\r\n\r\nconst UserContext = React.createContext()\r\n\r\nexport function useUser() {\r\n  return useContext(UserContext)\r\n}\r\n\r\nexport function UserProvider({ id, children }) {\r\n  const [client, setClient] = useState(null)\r\n\r\n  // Cette fonction renvoie les données du client\r\n  // -Par défaut elle renvoie les données brutes\r\n  // -Si le type est \"cross\" elle renvoie les données croisées\r\n  function getClient(type) {\r\n    return new Promise((resolve) => {\r\n      api.getUserById(id).then(\r\n        (user) => {\r\n          // Constante pour stocker les données brutes du cleint\r\n          const clientRaw = user.data.data\r\n\r\n          // si le type je renvoie les données brute par défaut\r\n          if (type === undefined) return resolve(clientRaw)\r\n\r\n          // Si le client n'a pas de constact j'envoie directement les données\r\n          if (clientRaw.channels.length === 0) return resolve(clientRaw)\r\n\r\n          if (type === \"cross\") {\r\n            // Variable pour stocker les données croisées du cleint\r\n            var clientCross = user.data.data\r\n\r\n            // Je filtre pour ne récupérer que les contacts privés\r\n            clientCross.channels.filter(channel => channel.type === \"private\").forEach((channel, index) => {\r\n\r\n              // Je récupère les informations sur le destinataire grace à sont id\r\n              api.getUserById(channel.recipients.id).then((recipient) => {\r\n\r\n                // Si le destinataire n'existe plus je le supprime des données du client\r\n                if (recipient.data.data === null) {\r\n                  // Je boucle tous les \"channels\" du client\r\n                  for (let i = 0; i < clientCross.channels.length; i++) {\r\n                    // Je teste si l'id du \"channel\" sélectionné correspond à l'id du \"channel\" passé dans la boucle\r\n                    if (clientCross.channels[i].recipients.id === channel.recipients.id) {\r\n                      // Je supprime le \"channel\" dans la liste grace à sa position\r\n                      clientCross.channels.splice(i, 1);\r\n                      // Je mets à jour le client\r\n                      return api.updateUserById(clientCross.id, { data: { channels: clientCross.channels } }).then(res => {/*//EN COURS// Système gestion des erreurs*/ })\r\n                    }\r\n                  }\r\n                }\r\n\r\n                // Je complète les informations existantes du destinataire avec celle de la base de données\r\n                channel.recipients = recipient.data.data\r\n\r\n                // J'ajoute un element \"selected\" à \"channel\" est passe la valeur \"true\" au premier\r\n                Object.assign(channel, { selected: false })\r\n                Object.assign(channel, { key: index })\r\n\r\n                // Je mets à jour l'object \"channels\" du client \r\n                clientCross.channels[index] = channel\r\n\r\n                if (clientRaw.channels.length === index + 1) return resolve(clientCross)\r\n\r\n              });\r\n            })\r\n          }\r\n        })\r\n    })\r\n  }\r\n\r\n  async function updateUser(id, body) {\r\n    const payload = body\r\n    await api.updateUserById(id, payload).then(res => {\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    return new Promise((resolve) => {\r\n      api.getUserById(id).then(\r\n        (user) => {\r\n          // Constante pour stocker les données brutes du cleint\r\n          const clientRaw = user.data.data\r\n\r\n          // si le type je renvoie les données brute par défaut\r\n          if (type === undefined) return resolve(clientRaw)\r\n\r\n          // Si le client n'a pas de constact j'envoie directement les données\r\n          if (clientRaw.channels.length === 0) return resolve(clientRaw)\r\n\r\n          if (type === \"cross\") {\r\n            // Variable pour stocker les données croisées du cleint\r\n            var clientCross = user.data.data\r\n\r\n            // Je filtre pour ne récupérer que les contacts privés\r\n            clientCross.channels.filter(channel => channel.type === \"private\").forEach((channel, index) => {\r\n\r\n              // Je récupère les informations sur le destinataire grace à sont id\r\n              api.getUserById(channel.recipients.id).then((recipient) => {\r\n\r\n                // Si le destinataire n'existe plus je le supprime des données du client\r\n                if (recipient.data.data === null) {\r\n                  // Je boucle tous les \"channels\" du client\r\n                  for (let i = 0; i < clientCross.channels.length; i++) {\r\n                    // Je teste si l'id du \"channel\" sélectionné correspond à l'id du \"channel\" passé dans la boucle\r\n                    if (clientCross.channels[i].recipients.id === channel.recipients.id) {\r\n                      // Je supprime le \"channel\" dans la liste grace à sa position\r\n                      clientCross.channels.splice(i, 1);\r\n                      // Je mets à jour le client\r\n                      return api.updateUserById(clientCross.id, { data: { channels: clientCross.channels } }).then(res => {/*//EN COURS// Système gestion des erreurs*/ })\r\n                    }\r\n                  }\r\n                }\r\n\r\n                // Je complète les informations existantes du destinataire avec celle de la base de données\r\n                channel.recipients = recipient.data.data\r\n\r\n                // J'ajoute un element \"selected\" à \"channel\" est passe la valeur \"true\" au premier\r\n                Object.assign(channel, { selected: false })\r\n                Object.assign(channel, { key: index })\r\n\r\n                // Je mets à jour l'object \"channels\" du client \r\n                clientCross.channels[index] = channel\r\n\r\n                if (clientRaw.channels.length === index + 1) return resolve(clientCross)\r\n\r\n              });\r\n            })\r\n          }\r\n        })\r\n    })\r\n  }, [])\r\n\r\n  const value = {\r\n    setClient,\r\n    client,\r\n    getClient,\r\n    updateUser\r\n  }\r\n\r\n  return (\r\n    <UserContext.Provider value={value}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  )\r\n}\r\n\r\nexport default UserContext"]},"metadata":{},"sourceType":"module"}