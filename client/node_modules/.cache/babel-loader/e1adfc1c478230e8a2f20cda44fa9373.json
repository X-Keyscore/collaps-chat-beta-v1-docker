{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anton\\\\Desktop\\\\FInt.Tchat\\\\dev\\\\V9\\\\client\\\\src\\\\components\\\\sidebar\\\\NewContact.js\";\nimport React, { useState } from 'react';\nimport api from \"../../api\";\nimport { useUser } from '../../contexts/UserProvider';\n\nfunction NewContact({\n  isShowing,\n  hide\n}) {\n  const {\n    user,\n    updateUser\n  } = useUser();\n  const [idInput, setIdInput] = useState('');\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    api.getUserById(idInput).then(userRecipient => {\n      // Je test si l'id est dans la base de données\n      if (userRecipient.data.data === null) return window.alert(\"L'id n'a pas été trouvé\");\n      const userClient = user;\n      userRecipient = userRecipient.data.data; // Id pour les deux\n\n      const idChannel = Math.floor(Math.random() * 10000000000000000) + 99999999999999999; // Insertion du \"channel\" pour le client\n\n      const idChannelClient = Math.floor(Math.random() * 10000000000000000) + 99999999999999999;\n      var userClientChannels = userClient.channels;\n      userClientChannels.push({\n        id: idChannel,\n        singleId: idChannelClient,\n        type: \"private\",\n        recipient: {\n          id: userRecipient.id\n        },\n        messages: []\n      }); // Insertion du \"channel\" pour le destinataire\n\n      const idChannelRecipient = Math.floor(Math.random() * 10000000000000000) + 99999999999999999;\n      var userRecipientChannels = userRecipient.channels;\n      userRecipientChannels.push({\n        id: idChannel,\n        singleId: idChannelRecipient,\n        type: \"private\",\n        recipient: {\n          id: userClient.id\n        },\n        messages: []\n      }); // Mise à jour du client\n\n      updateUser(userClient.id, {\n        data: {\n          channels: userClientChannels\n        }\n      }); // Mise à jour du destinataire\n\n      updateUser(userRecipient.id, {\n        data: {\n          channels: userRecipientChannels\n        }\n      });\n    }, error => {\n      console.log(error);\n    });\n    setIdInput('');\n    hide();\n  }\n\n  return isShowing ? /*#__PURE__*/React.createElement(\"form\", {\n    className: \"createChannelPrivate\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"createChannelPrivate-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 6\n    }\n  }, \"Cr\\xE9e un contact\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"createChannelPrivate-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"input\",\n    type: \"text\",\n    placeholder: \"Id\",\n    required: true,\n    value: idInput,\n    onChange: e => setIdInput(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 6\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"createChannelPrivate-footer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn-text-small\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 6\n    }\n  }, \"Ajouter\"))) : null;\n}\n\nexport default NewContact;\n/*\r\napi.getUserById(idInput).then(\r\n\t(userRecipient) => {\r\n\t},\r\n\t(error) => {\r\n\t\tconsole.log(error)\r\n\t}\r\n)\t\t\r\n*/","map":{"version":3,"sources":["C:/Users/anton/Desktop/FInt.Tchat/dev/V9/client/src/components/sidebar/NewContact.js"],"names":["React","useState","api","useUser","NewContact","isShowing","hide","user","updateUser","idInput","setIdInput","handleSubmit","e","preventDefault","getUserById","then","userRecipient","data","window","alert","userClient","idChannel","Math","floor","random","idChannelClient","userClientChannels","channels","push","id","singleId","type","recipient","messages","idChannelRecipient","userRecipientChannels","error","console","log","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport api from \"../../api\"\r\nimport { useUser } from '../../contexts/UserProvider';\r\n\r\nfunction NewContact({ isShowing, hide }) {\r\n\tconst { user, updateUser } = useUser()\r\n\tconst [idInput, setIdInput] = useState('')\r\n\r\n\tfunction handleSubmit(e) {\r\n\t\te.preventDefault()\r\n\r\n\t\tapi.getUserById(idInput).then(\r\n\t\t\t(userRecipient) => {\r\n\r\n\t\t\t\t// Je test si l'id est dans la base de données\r\n\t\t\t\tif (userRecipient.data.data === null) return window.alert(\"L'id n'a pas été trouvé\")\r\n\r\n\t\t\t\tconst userClient = user\r\n\t\t\t\tuserRecipient = userRecipient.data.data\r\n\r\n\t\t\t\t// Id pour les deux\r\n\t\t\t\tconst idChannel = Math.floor(Math.random() * 10000000000000000) + 99999999999999999;\r\n\r\n\t\t\t\t// Insertion du \"channel\" pour le client\r\n\t\t\t\tconst idChannelClient = Math.floor(Math.random() * 10000000000000000) + 99999999999999999;\r\n\r\n\t\t\t\tvar userClientChannels = userClient.channels\r\n\t\t\t\tuserClientChannels.push({\r\n\t\t\t\t\tid: idChannel,\r\n\t\t\t\t\tsingleId: idChannelClient,\r\n\t\t\t\t\ttype: \"private\",\r\n\t\t\t\t\trecipient: {\r\n\t\t\t\t\t\tid: userRecipient.id\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmessages: []\r\n\t\t\t\t})\r\n\r\n\t\t\t\t// Insertion du \"channel\" pour le destinataire\r\n\t\t\t\tconst idChannelRecipient = Math.floor(Math.random() * 10000000000000000) + 99999999999999999;\r\n\r\n\t\t\t\tvar userRecipientChannels = userRecipient.channels\r\n\t\t\t\tuserRecipientChannels.push({\r\n\t\t\t\t\tid: idChannel,\r\n\t\t\t\t\tsingleId: idChannelRecipient,\r\n\t\t\t\t\ttype: \"private\",\r\n\t\t\t\t\trecipient: {\r\n\t\t\t\t\t\tid: userClient.id\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmessages: []\r\n\t\t\t\t})\r\n\r\n\t\t\t\t// Mise à jour du client\r\n\t\t\t\tupdateUser(userClient.id, { data: { channels: userClientChannels } })\r\n\t\t\t\t// Mise à jour du destinataire\r\n\t\t\t\tupdateUser(userRecipient.id, { data: { channels: userRecipientChannels } })\r\n\t\t\t},\r\n\t\t\t(error) => {\r\n\t\t\t\tconsole.log(error)\r\n\t\t\t}\r\n\t\t)\r\n\r\n\t\tsetIdInput('')\r\n\t\thide()\r\n\t}\r\n\r\n\treturn (\r\n\t\tisShowing\r\n\t\t\t?\r\n\t\t\t<form className=\"createChannelPrivate\" onSubmit={handleSubmit}>\r\n\t\t\t\t<div className=\"createChannelPrivate-header\">\r\n\t\t\t\t\t<div className=\"title\">Crée un contact</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"createChannelPrivate-body\">\r\n\t\t\t\t\t<input className=\"input\" type=\"text\" placeholder=\"Id\" required\r\n\t\t\t\t\t\tvalue={idInput}\r\n\t\t\t\t\t\tonChange={e => setIdInput(e.target.value)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"createChannelPrivate-footer\">\r\n\t\t\t\t\t<button className=\"btn-text-small\" type=\"submit\">Ajouter</button>\r\n\t\t\t\t</div>\r\n\t\t\t</form>\r\n\t\t\t: null\r\n\t)\r\n}\r\nexport default NewContact;\r\n\r\n/*\r\napi.getUserById(idInput).then(\r\n\t(userRecipient) => {\r\n\t},\r\n\t(error) => {\r\n\t\tconsole.log(error)\r\n\t}\r\n)\t\t\r\n*/"]},"metadata":{},"sourceType":"module"}