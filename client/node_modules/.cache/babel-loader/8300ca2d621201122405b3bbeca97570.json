{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anton\\\\Desktop\\\\FInt.Tchat\\\\dev\\\\V10\\\\client\\\\src\\\\contexts\\\\ChannelsProvider.js\";\nimport React, { useContext, useState, useEffect, useCallback } from 'react';\nimport { useSocket } from './SocketProvider';\nimport api from \"../api\";\nconst ChannelsContext = React.createContext();\nexport function useChannels() {\n  return useContext(ChannelsContext);\n}\nexport function ChannelsProvider({\n  id,\n  children\n}) {\n  const [selectedChannel, setSelectedChannel] = useState(null);\n  const socket = useSocket();\n\n  function addMessageToChannel(userClient, recipients, text) {\n    // J'isole les données du client dans une variable pour pouvoir les modifier\n    var userClientEdit = userClient; // Je boucle tous les \"channels\" du client\n\n    for (let i = 0; i < userClientEdit.channels.length; i++) {\n      // Je teste si l'id du \"channel\" sélectionné correspond à l'id du \"channel\" passé dans la boucle\n      if (userClientEdit.channels[i].recipients.id === channel.recipients.id) {\n        // Je supprime le \"channel\" dans la liste grace à sa position\n        userClientEdit.channels.splice(i, 1); // Je mets à jour le client\n\n        return api.updateUserById(userClientEdit.id, {\n          data: {\n            channels: userClientEdit.channels\n          }\n        }).then(res => {\n          /*//EN COURS// Système gestion des erreurs*/\n        });\n      }\n    }\n  }\n  /*\n  const addMessageToChannel = useCallback(({ recipients, text, sender }) => {\n    \n    setChannels(prevChannels => {\n      let madeChange = false\n      const newMessage = { sender, text }\n      const newChannels = prevChannels.map(channel => {\n        if (arrayEquality(channel.recipients, recipients)) {\n          madeChange = true\n          return {\n            ...channel,\n            messages: [...channel.messages, newMessage]\n          }\n        }\n         return channel\n      })\n       if (madeChange) {\n        return newChannels\n      } else {\n        return [\n          ...prevChannels,\n          { recipients, messages: [newMessage] }\n        ]\n      }\n    })\n  }, [])*/\n\n\n  useEffect(() => {\n    if (socket == null) return;\n    socket.on('receive-message', addMessageToChannel);\n    return () => socket.off('receive-message');\n  }, [socket, addMessageToChannel]);\n\n  function sendMessage(recipients, text) {\n    socket.emit('send-message', {\n      recipients,\n      text\n    });\n    addMessageToChannel({\n      recipients,\n      text,\n      sender: id\n    });\n  }\n\n  const value = {\n    selectedChannel: selectedChannel,\n    setSelectedChannel,\n    sendMessage\n  };\n  return /*#__PURE__*/React.createElement(ChannelsContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false;\n  a.sort();\n  b.sort();\n  return a.every((element, index) => {\n    return element === b[index];\n  });\n}\n\nexport default ChannelsContext;","map":{"version":3,"sources":["C:/Users/anton/Desktop/FInt.Tchat/dev/V10/client/src/contexts/ChannelsProvider.js"],"names":["React","useContext","useState","useEffect","useCallback","useSocket","api","ChannelsContext","createContext","useChannels","ChannelsProvider","id","children","selectedChannel","setSelectedChannel","socket","addMessageToChannel","userClient","recipients","text","userClientEdit","i","channels","length","channel","splice","updateUserById","data","then","res","on","off","sendMessage","emit","sender","value","arrayEquality","a","b","sort","every","element","index"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect, useCallback } from 'react'\nimport { useSocket } from './SocketProvider';\n\nimport api from \"../api\"\n\nconst ChannelsContext = React.createContext()\n\nexport function useChannels() {\n  return useContext(ChannelsContext)\n}\n\nexport function ChannelsProvider({ id, children }) {\n  const [selectedChannel, setSelectedChannel] = useState(null)\n  const socket = useSocket()\n\n  function addMessageToChannel(userClient, recipients, text) {\n    // J'isole les données du client dans une variable pour pouvoir les modifier\n    var userClientEdit = userClient\n    // Je boucle tous les \"channels\" du client\n    for (let i = 0; i < userClientEdit.channels.length; i++) {\n      // Je teste si l'id du \"channel\" sélectionné correspond à l'id du \"channel\" passé dans la boucle\n      if (userClientEdit.channels[i].recipients.id === channel.recipients.id) {\n        // Je supprime le \"channel\" dans la liste grace à sa position\n        userClientEdit.channels.splice(i, 1);\n        // Je mets à jour le client\n        return api.updateUserById(userClientEdit.id, { data: { channels: userClientEdit.channels } }).then(res => {/*//EN COURS// Système gestion des erreurs*/})\n      }\n    }\n  }\n  /*\n  const addMessageToChannel = useCallback(({ recipients, text, sender }) => {\n    \n    setChannels(prevChannels => {\n      let madeChange = false\n      const newMessage = { sender, text }\n      const newChannels = prevChannels.map(channel => {\n        if (arrayEquality(channel.recipients, recipients)) {\n          madeChange = true\n          return {\n            ...channel,\n            messages: [...channel.messages, newMessage]\n          }\n        }\n\n        return channel\n      })\n\n      if (madeChange) {\n        return newChannels\n      } else {\n        return [\n          ...prevChannels,\n          { recipients, messages: [newMessage] }\n        ]\n      }\n    })\n  }, [])*/\n\n  useEffect(() => {\n    if (socket == null) return\n\n    socket.on('receive-message', addMessageToChannel)\n\n    return () => socket.off('receive-message')\n  }, [socket, addMessageToChannel])\n\n  function sendMessage(recipients, text) {\n    socket.emit('send-message', { recipients, text })\n\n    addMessageToChannel({ recipients, text, sender: id })\n  }\n\n  const value = {\n    selectedChannel: selectedChannel,\n    setSelectedChannel,\n    sendMessage\n  }\n\n  return (\n    <ChannelsContext.Provider value={value}>\n      {children}\n    </ChannelsContext.Provider>\n  )\n}\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false\n\n  a.sort()\n  b.sort()\n\n  return a.every((element, index) => {\n    return element === b[index]\n  })\n}\n\nexport default ChannelsContext"]},"metadata":{},"sourceType":"module"}