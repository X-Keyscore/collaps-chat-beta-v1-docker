{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anton\\\\Desktop\\\\FInt.Tchat\\\\dev\\\\V10\\\\client\\\\src\\\\components\\\\sidebar\\\\NewContact.js\";\nimport React, { useState } from 'react';\nimport api from \"../../api\";\nimport { useUser } from '../../contexts/UserProvider';\nimport useExternalStorage from '../../hooks/useExternalStorage';\n\nfunction NewContact({\n  isShowing,\n  hide\n}) {\n  const {\n    client,\n    setClient,\n    renderClient,\n    updateUser\n  } = useUser();\n  const [test, setTest] = useExternalStorage();\n  setTest(testt => {\n    testt.channels[1].recipients.pseudo = \"toto\";\n    console.log(testt);\n  }); // Création d'un \"useState\" pour stocker l'id\n\n  const [id, setId] = useState({\n    value: \"\",\n    warning: \"\"\n  });\n\n  function handleSubmit(e) {\n    e.preventDefault(); // Je teste si la valeur est bien celle d'un id\n\n    if (id.value.length === 0) return setId({\n      value: \"\",\n      warning: \"Il faut entré un id\"\n    }); // Je teste si la valeur est bien celle d'un id\n\n    if (id.value.length !== 18 && !/^[0-9]*$/.test(id.value)) return setId({\n      value: \"\",\n      warning: \"Ceci n'est pas un id valide\"\n    }); // Je test si l'id n'est pas celui du client\n\n    if (id.value === client.id) return setId({\n      value: \"\",\n      warning: \"Tu ne peux pas t'ajouter\"\n    }); // Je test si le contact n'est pas déjà ajouter\n\n    var valid = true;\n    client.channels.filter(channel => channel.type === \"private\").forEach(channel => {\n      if (channel.recipients.id === id.value) valid = false;\n    });\n    if (valid === false) return setId({\n      value: \"\",\n      warning: \"Ce contact existe déjà\"\n    });\n    api.getUserById(id.value).then(recipient => {\n      // Je test si l'id n'est pas déjà dans la base de données\n      if (recipient.data.data === null) return setId({\n        value: \"\",\n        warning: \"L'id n'a pas été trouvé\"\n      });\n      recipient = recipient.data.data; // Id pour les deux\n\n      const idChannel = Math.floor(Math.random() * 10000000000000000) + 99999999999999999;\n      var clientChannels = client.channels;\n      clientChannels.push({\n        id: idChannel,\n        type: \"private\",\n        recipients: {\n          id: recipient.id\n        },\n        messages: []\n      });\n      var recipientChannels = recipient.channels;\n      recipientChannels.push({\n        id: idChannel,\n        type: \"private\",\n        recipients: {\n          id: client.id\n        },\n        messages: []\n      }); // Mise à jour du client\n\n      updateUser(client.id, {\n        data: {\n          channels: clientChannels\n        }\n      });\n      var clientEdit = client;\n      clientEdit.channels = clientChannels;\n      renderClient(clientEdit); // Mise à jour du destinataire\n\n      updateUser(recipient.id, {\n        data: {\n          channels: recipientChannels\n        }\n      });\n      setId({\n        value: \"\",\n        warning: \"\"\n      });\n      hide();\n    }, error => {\n      console.log(error);\n    });\n  }\n\n  return isShowing ? /*#__PURE__*/React.createElement(\"form\", {\n    className: \"createChannelPrivate\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"createChannelPrivate-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 6\n    }\n  }, \"Ajouter un contact\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"createChannelPrivate-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }\n  }, id.warning ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"title-warning\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 20\n    }\n  }, id.warning, \" \") : null, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"input\",\n    type: \"text\",\n    placeholder: \"Id\",\n    value: id.value,\n    onChange: e => setId({\n      value: e.target.value,\n      warning: \"\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 6\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"createChannelPrivate-footer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn-text-small\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 6\n    }\n  }, \"Ajouter\"))) : null;\n}\n\nexport default NewContact;","map":{"version":3,"sources":["C:/Users/anton/Desktop/FInt.Tchat/dev/V10/client/src/components/sidebar/NewContact.js"],"names":["React","useState","api","useUser","useExternalStorage","NewContact","isShowing","hide","client","setClient","renderClient","updateUser","test","setTest","testt","channels","recipients","pseudo","console","log","id","setId","value","warning","handleSubmit","e","preventDefault","length","valid","filter","channel","type","forEach","getUserById","then","recipient","data","idChannel","Math","floor","random","clientChannels","push","messages","recipientChannels","clientEdit","error","target"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport api from \"../../api\"\r\nimport { useUser } from '../../contexts/UserProvider';\r\nimport useExternalStorage from '../../hooks/useExternalStorage';\r\n\r\nfunction NewContact({ isShowing, hide }) {\r\n\tconst { client, setClient, renderClient, updateUser } = useUser()\r\n\r\n\tconst [test, setTest] = useExternalStorage()\r\n\r\n\tsetTest(testt =>  {\r\n\t\ttestt.channels[1].recipients.pseudo = \"toto\"\r\n\t\tconsole.log(testt)\r\n\t})\r\n\r\n\t// Création d'un \"useState\" pour stocker l'id\r\n\tconst [id, setId] = useState({\r\n\t\tvalue: \"\",\r\n\t\twarning: \"\"\r\n\t})\r\n\r\n\tfunction handleSubmit(e) {\r\n\t\te.preventDefault()\r\n\r\n\t\t// Je teste si la valeur est bien celle d'un id\r\n\t\tif (id.value.length === 0) return setId({\r\n\t\t\tvalue: \"\",\r\n\t\t\twarning: \"Il faut entré un id\"\r\n\t\t})\r\n\r\n\t\t// Je teste si la valeur est bien celle d'un id\r\n\t\tif (id.value.length !== 18 && !/^[0-9]*$/.test(id.value)) return setId({\r\n\t\t\tvalue: \"\",\r\n\t\t\twarning: \"Ceci n'est pas un id valide\"\r\n\t\t})\r\n\r\n\t\t// Je test si l'id n'est pas celui du client\r\n\t\tif (id.value === client.id) return setId({\r\n\t\t\tvalue: \"\",\r\n\t\t\twarning: \"Tu ne peux pas t'ajouter\"\r\n\t\t})\r\n\r\n\t\t// Je test si le contact n'est pas déjà ajouter\r\n\t\tvar valid = true;\r\n\t\tclient.channels.filter(channel => channel.type === \"private\").forEach(channel => {\r\n\t\t\tif (channel.recipients.id === id.value) valid = false;\r\n\t\t});\r\n\t\tif (valid === false) return setId({\r\n\t\t\tvalue: \"\",\r\n\t\t\twarning: \"Ce contact existe déjà\"\r\n\t\t});\r\n\r\n\t\tapi.getUserById(id.value).then(\r\n\t\t\t(recipient) => {\r\n\r\n\t\t\t\t// Je test si l'id n'est pas déjà dans la base de données\r\n\t\t\t\tif (recipient.data.data === null) return setId({\r\n\t\t\t\t\tvalue: \"\",\r\n\t\t\t\t\twarning: \"L'id n'a pas été trouvé\"\r\n\t\t\t\t})\r\n\r\n\t\t\t\trecipient = recipient.data.data\r\n\r\n\t\t\t\t// Id pour les deux\r\n\t\t\t\tconst idChannel = Math.floor(Math.random() * 10000000000000000) + 99999999999999999;\r\n\r\n\t\t\t\tvar clientChannels = client.channels\r\n\t\t\t\tclientChannels.push({\r\n\t\t\t\t\tid: idChannel,\r\n\t\t\t\t\ttype: \"private\",\r\n\t\t\t\t\trecipients: {\r\n\t\t\t\t\t\tid: recipient.id\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmessages: []\r\n\t\t\t\t})\r\n\r\n\t\t\t\tvar recipientChannels = recipient.channels\r\n\t\t\t\trecipientChannels.push({\r\n\t\t\t\t\tid: idChannel,\r\n\t\t\t\t\ttype: \"private\",\r\n\t\t\t\t\trecipients: {\r\n\t\t\t\t\t\tid: client.id\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmessages: []\r\n\t\t\t\t})\r\n\r\n\t\t\t\t// Mise à jour du client\r\n\t\t\t\tupdateUser(client.id, { data: { channels: clientChannels } })\r\n\r\n\t\t\t\tvar clientEdit = client\r\n\t\t\t\tclientEdit.channels = clientChannels\r\n\r\n\t\t\t\trenderClient(clientEdit)\r\n\r\n\t\t\t\t// Mise à jour du destinataire\r\n\t\t\t\tupdateUser(recipient.id, { data: { channels: recipientChannels } })\r\n\r\n\t\t\t\tsetId({\r\n\t\t\t\t\tvalue: \"\",\r\n\t\t\t\t\twarning: \"\"\r\n\t\t\t\t})\r\n\t\t\t\thide()\r\n\t\t\t},\r\n\t\t\t(error) => {\r\n\t\t\t\tconsole.log(error)\r\n\t\t\t}\r\n\t\t)\r\n\r\n\t}\r\n\r\n\treturn (\r\n\t\tisShowing\r\n\t\t\t?\r\n\t\t\t<form className=\"createChannelPrivate\" onSubmit={handleSubmit}>\r\n\t\t\t\t<div className=\"createChannelPrivate-header\">\r\n\t\t\t\t\t<div className=\"title\">Ajouter un contact</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"createChannelPrivate-body\">\r\n\t\t\t\t\t{id.warning ? <div className=\"title-warning\">{id.warning} </div> : null}\r\n\t\t\t\t\t<input className=\"input\" type=\"text\" placeholder=\"Id\"\r\n\t\t\t\t\t\tvalue={id.value}\r\n\t\t\t\t\t\tonChange={e => setId({\r\n\t\t\t\t\t\t\tvalue: e.target.value,\r\n\t\t\t\t\t\t\twarning: \"\"\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"createChannelPrivate-footer\">\r\n\t\t\t\t\t<button className=\"btn-text-small\" type=\"submit\">Ajouter</button>\r\n\t\t\t\t</div>\r\n\t\t\t</form>\r\n\t\t\t: null\r\n\t)\r\n}\r\nexport default NewContact;"]},"metadata":{},"sourceType":"module"}