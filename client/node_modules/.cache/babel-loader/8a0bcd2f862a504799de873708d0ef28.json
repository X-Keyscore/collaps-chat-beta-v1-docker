{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anton\\\\Desktop\\\\FInt.Tchat\\\\dev\\\\V10\\\\client\\\\src\\\\contexts\\\\UserProvider.js\";\nimport React, { Component, useContext } from 'react';\nimport api from \"../api\";\nimport SocketContext from './SocketProvider';\nconst UserContext = React.createContext();\nexport function useUser() {\n  return useContext(UserContext);\n}\nexport class UserProvider extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.updateUser = async (id, body) => {\n      const payload = body;\n      await api.updateUserById(id, payload).then(res => {});\n    };\n\n    this.getUser = () => {\n      return new Promise(resolve => {\n        api.getUserById(this.props.id).then(user => {\n          // Constante pour stocker les données brutes du cleint\n          const clientRaw = user.data.data; // Variable pour stocker les données croisées du cleint\n\n          var clientCross = user.data.data; // Si le client n'a pas de constact j'envoie directement les données\n\n          if (clientCross.channels.length === 0) resolve(clientCross); // Je filtre pour ne récupérer que les contacts privés\n\n          clientCross.channels.filter(channel => channel.type === \"private\").forEach((channel, index) => {\n            // Je récupère les informations sur le destinataire grace à sont id\n            api.getUserById(channel.recipients.id).then(recipient => {\n              // Si le destinataire n'existe plus je le supprime des données du client\n              if (recipient.data.data === null) {\n                // J'isole les données du client dans une variable pour pouvoir les modifier\n                var userClientEdit = clientRaw; // Je boucle tous les \"channels\" du client\n\n                for (let i = 0; i < userClientEdit.channels.length; i++) {\n                  // Je teste si l'id du \"channel\" sélectionné correspond à l'id du \"channel\" passé dans la boucle\n                  if (userClientEdit.channels[i].recipients.id === channel.recipients.id) {\n                    // Je supprime le \"channel\" dans la liste grace à sa position\n                    userClientEdit.channels.splice(i, 1); // Je mets à jour le client\n\n                    return api.updateUserById(userClientEdit.id, {\n                      data: {\n                        channels: userClientEdit.channels\n                      }\n                    }).then(res => {\n                      /*//EN COURS// Système gestion des erreurs*/\n                    });\n                  }\n                }\n              } // Je complète les informations existantes du destinataire avec celle de la base de données\n\n\n              channel.recipients = recipient.data.data; // J'ajoute un element \"selected\" à \"channel\" est passe la valeur \"true\" au premier\n\n              Object.assign(channel, {\n                selected: false\n              });\n              Object.assign(channel, {\n                key: index\n              }); // Je mets à jour l'object \"channels\" du client \n\n              newUser.channels[index] = channel;\n              if (clientRaw.channels.length === index + 1) resolve(newUser);\n            });\n          });\n        });\n      });\n    };\n\n    this.createUser = () => {};\n\n    this.deleteUser = () => {};\n  }\n\n  render() {\n    const value = {\n      updateUser: this.updateUser,\n      getUser: this.getUser\n    };\n    return /*#__PURE__*/React.createElement(UserContext.Provider, {\n      value: value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }\n    }, this.props.children);\n  }\n\n}\nUserProvider.contextType = SocketContext;\nexport default UserContext;","map":{"version":3,"sources":["C:/Users/anton/Desktop/FInt.Tchat/dev/V10/client/src/contexts/UserProvider.js"],"names":["React","Component","useContext","api","SocketContext","UserContext","createContext","useUser","UserProvider","updateUser","id","body","payload","updateUserById","then","res","getUser","Promise","resolve","getUserById","props","user","clientRaw","data","clientCross","channels","length","filter","channel","type","forEach","index","recipients","recipient","userClientEdit","i","splice","Object","assign","selected","key","newUser","createUser","deleteUser","render","value","children","contextType"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,QAA6C,OAA7C;AAEA,OAAOC,GAAP,MAAgB,QAAhB;AAEA,OAAOC,aAAP,MAA0B,kBAA1B;AAEA,MAAMC,WAAW,GAAGL,KAAK,CAACM,aAAN,EAApB;AAEA,OAAO,SAASC,OAAT,GAAmB;AACxB,SAAOL,UAAU,CAACG,WAAD,CAAjB;AACD;AAED,OAAO,MAAMG,YAAN,SAA2BP,SAA3B,CAAqC;AAAA;AAAA;;AAAA,SAG1CQ,UAH0C,GAG7B,OAAOC,EAAP,EAAWC,IAAX,KAAoB;AAC/B,YAAMC,OAAO,GAAGD,IAAhB;AACA,YAAMR,GAAG,CAACU,cAAJ,CAAmBH,EAAnB,EAAuBE,OAAvB,EAAgCE,IAAhC,CAAqCC,GAAG,IAAI,CACjD,CADK,CAAN;AAED,KAPyC;;AAAA,SAS1CC,OAT0C,GAShC,MAAM;AACd,aAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC9Bf,QAAAA,GAAG,CAACgB,WAAJ,CAAgB,KAAKC,KAAL,CAAWV,EAA3B,EAA+BI,IAA/B,CACGO,IAAD,IAAU;AACR;AACA,gBAAMC,SAAS,GAAGD,IAAI,CAACE,IAAL,CAAUA,IAA5B,CAFQ,CAGR;;AACA,cAAIC,WAAW,GAAGH,IAAI,CAACE,IAAL,CAAUA,IAA5B,CAJQ,CAMR;;AACA,cAAIC,WAAW,CAACC,QAAZ,CAAqBC,MAArB,KAAgC,CAApC,EAAuCR,OAAO,CAACM,WAAD,CAAP,CAP/B,CASR;;AACAA,UAAAA,WAAW,CAACC,QAAZ,CAAqBE,MAArB,CAA4BC,OAAO,IAAIA,OAAO,CAACC,IAAR,KAAiB,SAAxD,EAAmEC,OAAnE,CAA2E,CAACF,OAAD,EAAUG,KAAV,KAAoB;AAE7F;AACA5B,YAAAA,GAAG,CAACgB,WAAJ,CAAgBS,OAAO,CAACI,UAAR,CAAmBtB,EAAnC,EAAuCI,IAAvC,CAA6CmB,SAAD,IAAe;AAEzD;AACA,kBAAIA,SAAS,CAACV,IAAV,CAAeA,IAAf,KAAwB,IAA5B,EAAkC;AAChC;AACA,oBAAIW,cAAc,GAAGZ,SAArB,CAFgC,CAGhC;;AACA,qBAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,cAAc,CAACT,QAAf,CAAwBC,MAA5C,EAAoDS,CAAC,EAArD,EAAyD;AACvD;AACA,sBAAID,cAAc,CAACT,QAAf,CAAwBU,CAAxB,EAA2BH,UAA3B,CAAsCtB,EAAtC,KAA6CkB,OAAO,CAACI,UAAR,CAAmBtB,EAApE,EAAwE;AACtE;AACAwB,oBAAAA,cAAc,CAACT,QAAf,CAAwBW,MAAxB,CAA+BD,CAA/B,EAAkC,CAAlC,EAFsE,CAGtE;;AACA,2BAAOhC,GAAG,CAACU,cAAJ,CAAmBqB,cAAc,CAACxB,EAAlC,EAAsC;AAAEa,sBAAAA,IAAI,EAAE;AAAEE,wBAAAA,QAAQ,EAAES,cAAc,CAACT;AAA3B;AAAR,qBAAtC,EAAuFX,IAAvF,CAA4FC,GAAG,IAAI;AAAC;AAA6C,qBAAjJ,CAAP;AACD;AACF;AACF,eAhBwD,CAkBzD;;;AACAa,cAAAA,OAAO,CAACI,UAAR,GAAqBC,SAAS,CAACV,IAAV,CAAeA,IAApC,CAnByD,CAqBzD;;AACAc,cAAAA,MAAM,CAACC,MAAP,CAAcV,OAAd,EAAuB;AAAEW,gBAAAA,QAAQ,EAAE;AAAZ,eAAvB;AACAF,cAAAA,MAAM,CAACC,MAAP,CAAcV,OAAd,EAAuB;AAAEY,gBAAAA,GAAG,EAAET;AAAP,eAAvB,EAvByD,CAyBzD;;AACAU,cAAAA,OAAO,CAAChB,QAAR,CAAiBM,KAAjB,IAA0BH,OAA1B;AAEA,kBAAIN,SAAS,CAACG,QAAV,CAAmBC,MAAnB,KAA8BK,KAAK,GAAG,CAA1C,EAA6Cb,OAAO,CAACuB,OAAD,CAAP;AAE9C,aA9BD;AA+BD,WAlCD;AAmCD,SA9CH;AA+CD,OAhDM,CAAP;AAiDD,KA3DyC;;AAAA,SA6D1CC,UA7D0C,GA6D7B,MAAM,CAElB,CA/DyC;;AAAA,SAiE1CC,UAjE0C,GAiE7B,MAAM,CAElB,CAnEyC;AAAA;;AAqE1CC,EAAAA,MAAM,GAAG;AACP,UAAMC,KAAK,GAAG;AACZpC,MAAAA,UAAU,EAAE,KAAKA,UADL;AAEZO,MAAAA,OAAO,EAAE,KAAKA;AAFF,KAAd;AAKA,wBACE,oBAAC,WAAD,CAAa,QAAb;AAAsB,MAAA,KAAK,EAAE6B,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKzB,KAAL,CAAW0B,QADd,CADF;AAKD;;AAhFyC;AAA/BtC,Y,CACJuC,W,GAAc3C,a;AAkFvB,eAAeC,WAAf","sourcesContent":["import React, { Component, useContext } from 'react'\r\n\r\nimport api from \"../api\"\r\n\r\nimport SocketContext from './SocketProvider';\r\n\r\nconst UserContext = React.createContext()\r\n\r\nexport function useUser() {\r\n  return useContext(UserContext)\r\n}\r\n\r\nexport class UserProvider extends Component {\r\n  static contextType = SocketContext\r\n\r\n  updateUser = async (id, body) => {\r\n    const payload = body\r\n    await api.updateUserById(id, payload).then(res => {\r\n    })\r\n  }\r\n\r\n  getUser = () => {\r\n    return new Promise((resolve) => {\r\n      api.getUserById(this.props.id).then(\r\n        (user) => {\r\n          // Constante pour stocker les données brutes du cleint\r\n          const clientRaw = user.data.data\r\n          // Variable pour stocker les données croisées du cleint\r\n          var clientCross = user.data.data\r\n\r\n          // Si le client n'a pas de constact j'envoie directement les données\r\n          if (clientCross.channels.length === 0) resolve(clientCross)\r\n\r\n          // Je filtre pour ne récupérer que les contacts privés\r\n          clientCross.channels.filter(channel => channel.type === \"private\").forEach((channel, index) => {\r\n\r\n            // Je récupère les informations sur le destinataire grace à sont id\r\n            api.getUserById(channel.recipients.id).then((recipient) => {\r\n\r\n              // Si le destinataire n'existe plus je le supprime des données du client\r\n              if (recipient.data.data === null) {\r\n                // J'isole les données du client dans une variable pour pouvoir les modifier\r\n                var userClientEdit = clientRaw\r\n                // Je boucle tous les \"channels\" du client\r\n                for (let i = 0; i < userClientEdit.channels.length; i++) {\r\n                  // Je teste si l'id du \"channel\" sélectionné correspond à l'id du \"channel\" passé dans la boucle\r\n                  if (userClientEdit.channels[i].recipients.id === channel.recipients.id) {\r\n                    // Je supprime le \"channel\" dans la liste grace à sa position\r\n                    userClientEdit.channels.splice(i, 1);\r\n                    // Je mets à jour le client\r\n                    return api.updateUserById(userClientEdit.id, { data: { channels: userClientEdit.channels } }).then(res => {/*//EN COURS// Système gestion des erreurs*/})\r\n                  }\r\n                }\r\n              }\r\n\r\n              // Je complète les informations existantes du destinataire avec celle de la base de données\r\n              channel.recipients = recipient.data.data\r\n\r\n              // J'ajoute un element \"selected\" à \"channel\" est passe la valeur \"true\" au premier\r\n              Object.assign(channel, { selected: false })\r\n              Object.assign(channel, { key: index })\r\n\r\n              // Je mets à jour l'object \"channels\" du client \r\n              newUser.channels[index] = channel\r\n\r\n              if (clientRaw.channels.length === index + 1) resolve(newUser)\r\n\r\n            });\r\n          })\r\n        })\r\n    })\r\n  }\r\n\r\n  createUser = () => {\r\n\r\n  }\r\n\r\n  deleteUser = () => {\r\n\r\n  }\r\n\r\n  render() {\r\n    const value = {\r\n      updateUser: this.updateUser,\r\n      getUser: this.getUser\r\n    }\r\n\r\n    return (\r\n      <UserContext.Provider value={value}>\r\n        {this.props.children}\r\n      </UserContext.Provider>\r\n    )\r\n  }\r\n}\r\n\r\nexport default UserContext"]},"metadata":{},"sourceType":"module"}