{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anton\\\\Desktop\\\\FInt.Tchat\\\\dev\\\\V10\\\\client\\\\src\\\\contexts\\\\UserProvider.js\";\nimport React, { useContext, useState, useEffect } from 'react';\nimport api from \"../api\";\nconst UserContext = React.createContext();\nexport function useUser() {\n  return useContext(UserContext);\n}\nexport function UserProvider({\n  id,\n  children\n}) {\n  const [client, setClient] = useState(null); // Cette fonction renvoie les données du client\n  // -Par défaut elle renvoie les données brutes\n  // -Si le type est \"cross\" elle renvoie les données croisées\n\n  function getClient() {\n    return new Promise(resolve => {\n      api.getUserById(id).then(user => {\n        // Constante pour stocker les données brutes du cleint\n        const clientRaw = user.data.data; // Si le client n'a pas de constact j'envoie directement les données\n\n        if (clientRaw.channels.length === 0) return resolve(clientRaw); // Variable pour stocker les données croisées du cleint\n\n        var clientCross = user.data.data; // Je filtre pour ne récupérer que les contacts privés\n\n        clientCross.channels.filter(channel => channel.type === \"private\").forEach((channel, index) => {\n          // Je récupère les informations sur le destinataire grace à sont id\n          api.getUserById(channel.recipients.id).then(recipient => {\n            // Si le destinataire n'existe plus je le supprime des données du client\n            if (recipient.data.data === null) {\n              // Je boucle tous les \"channels\" du client\n              for (let i = 0; i < clientCross.channels.length; i++) {\n                // Je teste si l'id du \"channel\" sélectionné correspond à l'id du \"channel\" passé dans la boucle\n                if (clientCross.channels[i].recipients.id === channel.recipients.id) {\n                  // Je supprime le \"channel\" dans la liste grace à sa position\n                  clientCross.channels.splice(i, 1); // Je mets à jour le client\n\n                  return api.updateUserById(clientCross.id, {\n                    data: {\n                      channels: clientCross.channels\n                    }\n                  }).then(res => {\n                    /*//EN COURS// Système gestion des erreurs*/\n                  });\n                }\n              }\n            } // Je complète les informations existantes du destinataire avec celle de la base de données\n\n\n            channel.recipients = recipient.data.data; // J'ajoute un element \"selected\" à \"channel\" est passe la valeur \"true\" au premier\n\n            Object.assign(channel, {\n              selected: false\n            });\n            Object.assign(channel, {\n              key: index\n            }); // Je mets à jour l'object \"channels\" du client \n\n            clientCross.channels[index] = channel;\n            if (clientRaw.channels.length === index + 1) return resolve(clientCross);\n          });\n        });\n      });\n    });\n  }\n\n  function updateUser(id, body) {\n    api.getUserById(id).then(user => {});\n    const payload = body;\n    api.updateUserById(id, payload);\n  }\n\n  useEffect(() => {\n    getClient().then(client => setClient(client));\n  }, [setClient]);\n\n  function test(data) {\n    console.log(test);\n    setClient(data);\n  }\n\n  const value = {\n    test,\n    client,\n    setClient,\n    updateUser\n  };\n  return /*#__PURE__*/React.createElement(UserContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, children);\n}\nexport default UserContext;","map":{"version":3,"sources":["C:/Users/anton/Desktop/FInt.Tchat/dev/V10/client/src/contexts/UserProvider.js"],"names":["React","useContext","useState","useEffect","api","UserContext","createContext","useUser","UserProvider","id","children","client","setClient","getClient","Promise","resolve","getUserById","then","user","clientRaw","data","channels","length","clientCross","filter","channel","type","forEach","index","recipients","recipient","i","splice","updateUserById","res","Object","assign","selected","key","updateUser","body","payload","test","console","log","value"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from 'react'\r\n\r\nimport api from \"../api\"\r\n\r\nconst UserContext = React.createContext()\r\n\r\nexport function useUser() {\r\n  return useContext(UserContext)\r\n}\r\n\r\nexport function UserProvider({ id, children }) {\r\n  const [client, setClient] = useState(null)\r\n\r\n  // Cette fonction renvoie les données du client\r\n  // -Par défaut elle renvoie les données brutes\r\n  // -Si le type est \"cross\" elle renvoie les données croisées\r\n  function getClient() {\r\n    return new Promise((resolve) => {\r\n      api.getUserById(id).then(\r\n        (user) => {\r\n          // Constante pour stocker les données brutes du cleint\r\n          const clientRaw = user.data.data\r\n\r\n          // Si le client n'a pas de constact j'envoie directement les données\r\n          if (clientRaw.channels.length === 0) return resolve(clientRaw)\r\n\r\n          // Variable pour stocker les données croisées du cleint\r\n          var clientCross = user.data.data\r\n\r\n          // Je filtre pour ne récupérer que les contacts privés\r\n          clientCross.channels.filter(channel => channel.type === \"private\").forEach((channel, index) => {\r\n\r\n            // Je récupère les informations sur le destinataire grace à sont id\r\n            api.getUserById(channel.recipients.id).then((recipient) => {\r\n\r\n              // Si le destinataire n'existe plus je le supprime des données du client\r\n              if (recipient.data.data === null) {\r\n                // Je boucle tous les \"channels\" du client\r\n                for (let i = 0; i < clientCross.channels.length; i++) {\r\n                  // Je teste si l'id du \"channel\" sélectionné correspond à l'id du \"channel\" passé dans la boucle\r\n                  if (clientCross.channels[i].recipients.id === channel.recipients.id) {\r\n                    // Je supprime le \"channel\" dans la liste grace à sa position\r\n                    clientCross.channels.splice(i, 1);\r\n                    // Je mets à jour le client\r\n                    return api.updateUserById(clientCross.id, { data: { channels: clientCross.channels } }).then(res => {/*//EN COURS// Système gestion des erreurs*/ })\r\n                  }\r\n                }\r\n              }\r\n\r\n              // Je complète les informations existantes du destinataire avec celle de la base de données\r\n              channel.recipients = recipient.data.data\r\n\r\n              // J'ajoute un element \"selected\" à \"channel\" est passe la valeur \"true\" au premier\r\n              Object.assign(channel, { selected: false })\r\n              Object.assign(channel, { key: index })\r\n\r\n              // Je mets à jour l'object \"channels\" du client \r\n              clientCross.channels[index] = channel\r\n\r\n              if (clientRaw.channels.length === index + 1) return resolve(clientCross)\r\n\r\n            });\r\n          })\r\n        })\r\n    })\r\n  }\r\n\r\n  function updateUser(id, body) {\r\n\r\n    api.getUserById(id).then(\r\n      (user) => {\r\n\r\n      }\r\n    )\r\n\r\n    const payload = body\r\n    api.updateUserById(id, payload)\r\n  }\r\n\r\n  useEffect(() => {\r\n    getClient().then(client => setClient(client))\r\n  }, [setClient])\r\n\r\n  function test(data) {\r\n    console.log(test)\r\n    setClient(data)\r\n  }\r\n\r\n  const value = {\r\n    test,\r\n    client,\r\n    setClient,\r\n    updateUser\r\n  }\r\n\r\n  return (\r\n    <UserContext.Provider value={value}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  )\r\n}\r\n\r\nexport default UserContext"]},"metadata":{},"sourceType":"module"}