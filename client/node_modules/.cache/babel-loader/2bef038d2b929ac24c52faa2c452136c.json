{"ast":null,"code":"import _toConsumableArray from\"C:\\\\Users\\\\anton\\\\Desktop\\\\FInt.Tchat\\\\dev\\\\Beta\\\\V1\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"C:\\\\Users\\\\anton\\\\Desktop\\\\FInt.Tchat\\\\dev\\\\Beta\\\\V1\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{useChannels}from'../../contexts/ChannelsProvider';import{useUser}from'../../contexts/UserProvider';function NewGroupe(_ref){var isShowing=_ref.isShowing,hide=_ref.hide;var _useUser=useUser(),client=_useUser.client;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),selectedContactIds=_useState2[0],setSelectedContactIds=_useState2[1];var _useChannels=useChannels(),createChannel=_useChannels.createChannel;function handleSubmit(e){e.preventDefault();createChannel(selectedContactIds);// Réinitialisation des valeurs\nsetSelectedContactIds([]);hide();}function handleCheckboxChange(contactId){setSelectedContactIds(function(prevSelectedContactIds){if(prevSelectedContactIds.includes(contactId)){return prevSelectedContactIds.filter(function(prevId){return contactId!==prevId;});}else{return[].concat(_toConsumableArray(prevSelectedContactIds),[contactId]);}});}return isShowing?/*#__PURE__*/React.createElement(\"form\",{className:\"createChannelPrivate\",onSubmit:handleSubmit},/*#__PURE__*/React.createElement(\"div\",{className:\"createChannelPrivate-header\"},/*#__PURE__*/React.createElement(\"div\",{className:\"title\"},\"Cr\\xE9e une conversation\")),/*#__PURE__*/React.createElement(\"div\",{className:\"createChannelPrivate-body\"},client==null?null:client.channels.filter(function(channel){return channel.recipients.length<2;}).map(function(channel){return/*#__PURE__*/React.createElement(\"div\",{key:channel.id},/*#__PURE__*/React.createElement(\"input\",{type:\"checkbox\",id:channel.id,value:selectedContactIds.includes(channel.recipients[0].id),onChange:function onChange(){return handleCheckboxChange(channel.recipients[0].id);}}),/*#__PURE__*/React.createElement(\"label\",null,channel.recipients.map(function(r){return r.pseudo;}).join(', ')));})),/*#__PURE__*/React.createElement(\"div\",{className:\"createChannelPrivate-footer\"},/*#__PURE__*/React.createElement(\"button\",{className:\"btn-text-small\",type:\"submit\"},\"Ajouter\"))):null;}export default NewGroupe;","map":{"version":3,"sources":["C:/Users/anton/Desktop/FInt.Tchat/dev/Beta/V1/client/src/components/sidebar/NewGroupe.js"],"names":["React","useState","useChannels","useUser","NewGroupe","isShowing","hide","client","selectedContactIds","setSelectedContactIds","createChannel","handleSubmit","e","preventDefault","handleCheckboxChange","contactId","prevSelectedContactIds","includes","filter","prevId","channels","channel","recipients","length","map","id","r","pseudo","join"],"mappings":"wXAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,WAAT,KAA4B,iCAA5B,CACA,OAASC,OAAT,KAAwB,6BAAxB,CAEA,QAASC,CAAAA,SAAT,MAAwC,IAAnBC,CAAAA,SAAmB,MAAnBA,SAAmB,CAARC,IAAQ,MAARA,IAAQ,cACnBH,OAAO,EADY,CAC9BI,MAD8B,UAC9BA,MAD8B,eAEcN,QAAQ,CAAC,EAAD,CAFtB,wCAE/BO,kBAF+B,eAEXC,qBAFW,gCAGZP,WAAW,EAHC,CAG9BQ,aAH8B,cAG9BA,aAH8B,CAKtC,QAASC,CAAAA,YAAT,CAAsBC,CAAtB,CAAyB,CACvBA,CAAC,CAACC,cAAF,GAEAH,aAAa,CAACF,kBAAD,CAAb,CACA;AACAC,qBAAqB,CAAC,EAAD,CAArB,CACAH,IAAI,GACL,CAED,QAASQ,CAAAA,oBAAT,CAA8BC,SAA9B,CAAyC,CACvCN,qBAAqB,CAAC,SAAAO,sBAAsB,CAAI,CAC9C,GAAIA,sBAAsB,CAACC,QAAvB,CAAgCF,SAAhC,CAAJ,CAAgD,CAC9C,MAAOC,CAAAA,sBAAsB,CAACE,MAAvB,CAA8B,SAAAC,MAAM,CAAI,CAC7C,MAAOJ,CAAAA,SAAS,GAAKI,MAArB,CACD,CAFM,CAAP,CAGD,CAJD,IAIO,CACL,mCAAWH,sBAAX,GAAmCD,SAAnC,GACD,CACF,CARoB,CAArB,CASD,CACD,MACEV,CAAAA,SAAS,cAEP,4BAAM,SAAS,CAAC,sBAAhB,CAAuC,QAAQ,CAAEM,YAAjD,eACE,2BAAK,SAAS,CAAC,6BAAf,eACE,2BAAK,SAAS,CAAC,OAAf,6BADF,CADF,cAIE,2BAAK,SAAS,CAAC,2BAAf,EAEIJ,MAAM,EAAI,IAAV,CAAiB,IAAjB,CAAwBA,MAAM,CAACa,QAAP,CAAgBF,MAAhB,CAAuB,SAAAG,OAAO,QAAIA,CAAAA,OAAO,CAACC,UAAR,CAAmBC,MAAnB,CAA4B,CAAhC,EAA9B,EAAiEC,GAAjE,CAAqE,SAACH,OAAD,qBAE3F,2BAAK,GAAG,CAAEA,OAAO,CAACI,EAAlB,eACE,6BACE,IAAI,CAAC,UADP,CAEE,EAAE,CAAEJ,OAAO,CAACI,EAFd,CAGE,KAAK,CAAEjB,kBAAkB,CAACS,QAAnB,CAA4BI,OAAO,CAACC,UAAR,CAAmB,CAAnB,EAAsBG,EAAlD,CAHT,CAIE,QAAQ,CAAE,0BAAMX,CAAAA,oBAAoB,CAACO,OAAO,CAACC,UAAR,CAAmB,CAAnB,EAAsBG,EAAvB,CAA1B,EAJZ,EADF,cAOE,iCAAQJ,OAAO,CAACC,UAAR,CAAmBE,GAAnB,CAAuB,SAAAE,CAAC,QAAIA,CAAAA,CAAC,CAACC,MAAN,EAAxB,EAAsCC,IAAtC,CAA2C,IAA3C,CAAR,CAPF,CAF2F,EAArE,CAF5B,CAJF,cAoBE,2BAAK,SAAS,CAAC,6BAAf,eACE,8BAAQ,SAAS,CAAC,gBAAlB,CAAmC,IAAI,CAAC,QAAxC,YADF,CApBF,CAFO,CA0BL,IA3BN,CA6BD,CACD,cAAexB,CAAAA,SAAf","sourcesContent":["import React, { useState } from 'react'\r\nimport { useChannels } from '../../contexts/ChannelsProvider'\r\nimport { useUser } from '../../contexts/UserProvider';\r\n\r\nfunction NewGroupe({ isShowing, hide }) {\r\n  const { client } = useUser()\r\n  const [selectedContactIds, setSelectedContactIds] = useState([])\r\n  const { createChannel } = useChannels()\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault()\r\n\r\n    createChannel(selectedContactIds)\r\n    // Réinitialisation des valeurs\r\n    setSelectedContactIds([])\r\n    hide()\r\n  }\r\n\r\n  function handleCheckboxChange(contactId) {\r\n    setSelectedContactIds(prevSelectedContactIds => {\r\n      if (prevSelectedContactIds.includes(contactId)) {\r\n        return prevSelectedContactIds.filter(prevId => {\r\n          return contactId !== prevId\r\n        })\r\n      } else {\r\n        return [...prevSelectedContactIds, contactId]\r\n      }\r\n    })\r\n  }\r\n  return (\r\n    isShowing\r\n      ?\r\n      <form className=\"createChannelPrivate\" onSubmit={handleSubmit}>\r\n        <div className=\"createChannelPrivate-header\">\r\n          <div className=\"title\">Crée une conversation</div>\r\n        </div>\r\n        <div className=\"createChannelPrivate-body\">\r\n          {\r\n            client == null ? null : client.channels.filter(channel => channel.recipients.length < 2).map((channel) => (\r\n              \r\n              <div key={channel.id}>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  id={channel.id}\r\n                  value={selectedContactIds.includes(channel.recipients[0].id)}\r\n                  onChange={() => handleCheckboxChange(channel.recipients[0].id)}\r\n                />\r\n                <label>{channel.recipients.map(r => r.pseudo).join(', ')}</label>\r\n              </div>\r\n            ))\r\n          }\r\n        </div>\r\n        <div className=\"createChannelPrivate-footer\">\r\n          <button className=\"btn-text-small\" type=\"submit\">Ajouter</button>\r\n        </div>\r\n      </form>\r\n      : null\r\n  )\r\n}\r\nexport default NewGroupe;"]},"metadata":{},"sourceType":"module"}