{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anton\\\\Desktop\\\\FInt.Tchat\\\\dev\\\\V10\\\\client\\\\src\\\\components\\\\sidebar\\\\NewContact.js\";\nimport React, { useState } from 'react';\nimport api from \"../../api\";\nimport { useUser } from '../../contexts/UserProvider';\n\nfunction NewContact({\n  isShowing,\n  hide\n}) {\n  const {\n    user,\n    updateUser\n  } = useUser();\n  const [id, setId] = useState({\n    value: \"\",\n    warning: \"\"\n  });\n\n  function handleSubmit(e) {\n    e.preventDefault(); // Je teste si la valeur est bien celle d'un id\n\n    console.log(/^[0-9]*$/.test(id.value));\n    if (id.value.length !== 18 || !/^[0-9]*$/.test(id.value)) return setId({\n      value: \"\",\n      warning: \"Ceci n'est pas un id\"\n    }); // Je test si l'id n'est pas celui du client\n\n    if (id.value === user.id) return setId({\n      value: \"\",\n      warning: \"Tu ne peux pas t'ajouter\"\n    }); // Je test si le contact n'est pas déjà ajouter\n\n    var valid = true;\n    user.channels.filter(channel => channel.type === \"private\").forEach(channel => {\n      if (channel.recipient.id === id.value) valid = false;\n    });\n    if (valid === false) return setId({\n      value: \"\",\n      warning: \"Ce contact existe déjà\"\n    });\n    api.getUserById(id.value).then(userRecipient => {\n      // Je test si l'id est dans la base de données\n      if (userRecipient.data.data === null) return setId({\n        value: \"\",\n        warning: \"L'id n'a pas été trouvé\"\n      });\n      const userClient = user;\n      userRecipient = userRecipient.data.data; // Id pour les deux\n\n      const idChannel = Math.floor(Math.random() * 10000000000000000) + 99999999999999999; // Insertion du \"channel\" pour le client\n\n      const idChannelClient = Math.floor(Math.random() * 10000000000000000) + 99999999999999999;\n      var userClientChannels = userClient.channels;\n      userClientChannels.push({\n        id: idChannel,\n        singleId: idChannelClient,\n        type: \"private\",\n        recipient: {\n          id: userRecipient.id\n        },\n        messages: []\n      }); // Insertion du \"channel\" pour le destinataire\n\n      const idChannelRecipient = Math.floor(Math.random() * 10000000000000000) + 99999999999999999;\n      var userRecipientChannels = userRecipient.channels;\n      userRecipientChannels.push({\n        id: idChannel,\n        singleId: idChannelRecipient,\n        type: \"private\",\n        recipient: {\n          id: userClient.id\n        },\n        messages: []\n      }); // Mise à jour du client\n\n      updateUser(userClient.id, {\n        data: {\n          channels: userClientChannels\n        }\n      }); // Mise à jour du destinataire\n\n      updateUser(userRecipient.id, {\n        data: {\n          channels: userRecipientChannels\n        }\n      });\n      setId({\n        value: \"\",\n        warning: \"\"\n      });\n      hide();\n    }, error => {\n      console.log(error);\n    });\n  }\n\n  return isShowing ? /*#__PURE__*/React.createElement(\"form\", {\n    className: \"createChannelPrivate\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"createChannelPrivate-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 6\n    }\n  }, \"Ajouter un contact\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"createChannelPrivate-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }\n  }, id.warning ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"title-warning\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 20\n    }\n  }, id.warning, \" \") : null, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"input\",\n    type: \"text\",\n    placeholder: \"Id\",\n    required: true,\n    value: id.value,\n    onChange: e => setId({\n      value: e.target.value,\n      warning: \"\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 6\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"createChannelPrivate-footer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn-text-small\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 6\n    }\n  }, \"Ajouter\"))) : null;\n}\n\nexport default NewContact;\n/*\r\napi.getUserById(idInput).then(\r\n\t(userRecipient) => {\r\n\t},\r\n\t(error) => {\r\n\t\tconsole.log(error)\r\n\t}\r\n)\r\n*/","map":{"version":3,"sources":["C:/Users/anton/Desktop/FInt.Tchat/dev/V10/client/src/components/sidebar/NewContact.js"],"names":["React","useState","api","useUser","NewContact","isShowing","hide","user","updateUser","id","setId","value","warning","handleSubmit","e","preventDefault","console","log","test","length","valid","channels","filter","channel","type","forEach","recipient","getUserById","then","userRecipient","data","userClient","idChannel","Math","floor","random","idChannelClient","userClientChannels","push","singleId","messages","idChannelRecipient","userRecipientChannels","error","target"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport api from \"../../api\"\r\nimport { useUser } from '../../contexts/UserProvider';\r\n\r\nfunction NewContact({ isShowing, hide }) {\r\n\tconst { user, updateUser } = useUser()\r\n\tconst [id, setId] = useState({\r\n\t\tvalue: \"\",\r\n\t\twarning: \"\"\r\n\t})\r\n\r\n\tfunction handleSubmit(e) {\r\n\t\te.preventDefault()\r\n\r\n\t\t// Je teste si la valeur est bien celle d'un id\r\n\t\tconsole.log(/^[0-9]*$/.test(id.value))\r\n\t\tif (id.value.length !== 18 || !/^[0-9]*$/.test(id.value)) return setId({\r\n\t\t\tvalue: \"\",\r\n\t\t\twarning: \"Ceci n'est pas un id\"\r\n\t\t})\r\n\r\n\t\t// Je test si l'id n'est pas celui du client\r\n\t\tif (id.value === user.id) return setId({\r\n\t\t\tvalue: \"\",\r\n\t\t\twarning: \"Tu ne peux pas t'ajouter\"\r\n\t\t})\r\n\r\n\t\t// Je test si le contact n'est pas déjà ajouter\r\n\t\tvar valid = true;\r\n\t\tuser.channels.filter(channel => channel.type === \"private\").forEach(channel => {\r\n\t\t\tif (channel.recipient.id === id.value) valid = false;\r\n\t\t});\r\n\t\tif (valid === false) return setId({\r\n\t\t\tvalue: \"\",\r\n\t\t\twarning: \"Ce contact existe déjà\"\r\n\t\t});\r\n\r\n\t\tapi.getUserById(id.value).then(\r\n\t\t\t(userRecipient) => {\r\n\r\n\t\t\t\t// Je test si l'id est dans la base de données\r\n\t\t\t\tif (userRecipient.data.data === null) return setId({\r\n\t\t\t\t\tvalue: \"\",\r\n\t\t\t\t\twarning: \"L'id n'a pas été trouvé\"\r\n\t\t\t\t})\r\n\r\n\t\t\t\tconst userClient = user\r\n\t\t\t\tuserRecipient = userRecipient.data.data\r\n\r\n\t\t\t\t// Id pour les deux\r\n\t\t\t\tconst idChannel = Math.floor(Math.random() * 10000000000000000) + 99999999999999999;\r\n\r\n\t\t\t\t// Insertion du \"channel\" pour le client\r\n\t\t\t\tconst idChannelClient = Math.floor(Math.random() * 10000000000000000) + 99999999999999999;\r\n\r\n\t\t\t\tvar userClientChannels = userClient.channels\r\n\t\t\t\tuserClientChannels.push({\r\n\t\t\t\t\tid: idChannel,\r\n\t\t\t\t\tsingleId: idChannelClient,\r\n\t\t\t\t\ttype: \"private\",\r\n\t\t\t\t\trecipient: {\r\n\t\t\t\t\t\tid: userRecipient.id\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmessages: []\r\n\t\t\t\t})\r\n\r\n\t\t\t\t// Insertion du \"channel\" pour le destinataire\r\n\t\t\t\tconst idChannelRecipient = Math.floor(Math.random() * 10000000000000000) + 99999999999999999;\r\n\r\n\t\t\t\tvar userRecipientChannels = userRecipient.channels\r\n\t\t\t\tuserRecipientChannels.push({\r\n\t\t\t\t\tid: idChannel,\r\n\t\t\t\t\tsingleId: idChannelRecipient,\r\n\t\t\t\t\ttype: \"private\",\r\n\t\t\t\t\trecipient: {\r\n\t\t\t\t\t\tid: userClient.id\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmessages: []\r\n\t\t\t\t})\r\n\r\n\t\t\t\t// Mise à jour du client\r\n\t\t\t\tupdateUser(userClient.id, { data: { channels: userClientChannels } })\r\n\t\t\t\t// Mise à jour du destinataire\r\n\t\t\t\tupdateUser(userRecipient.id, { data: { channels: userRecipientChannels } })\r\n\r\n\t\t\t\tsetId({\r\n\t\t\t\t\tvalue: \"\",\r\n\t\t\t\t\twarning: \"\"\r\n\t\t\t\t})\r\n\t\t\t\thide()\r\n\t\t\t},\r\n\t\t\t(error) => {\r\n\t\t\t\tconsole.log(error)\r\n\t\t\t}\r\n\t\t)\r\n\t\t\r\n\t}\r\n\r\n\treturn (\r\n\t\tisShowing\r\n\t\t\t?\r\n\t\t\t<form className=\"createChannelPrivate\" onSubmit={handleSubmit}>\r\n\t\t\t\t<div className=\"createChannelPrivate-header\">\r\n\t\t\t\t\t<div className=\"title\">Ajouter un contact</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"createChannelPrivate-body\">\r\n\t\t\t\t\t{id.warning ? <div className=\"title-warning\">{id.warning} </div> : null}\r\n\t\t\t\t\t<input className=\"input\" type=\"text\" placeholder=\"Id\" required\r\n\t\t\t\t\t\tvalue={id.value}\r\n\t\t\t\t\t\tonChange={e => setId({\r\n\t\t\t\t\t\t\tvalue: e.target.value,\r\n\t\t\t\t\t\t\twarning: \"\"\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"createChannelPrivate-footer\">\r\n\t\t\t\t\t<button className=\"btn-text-small\" type=\"submit\">Ajouter</button>\r\n\t\t\t\t</div>\r\n\t\t\t</form>\r\n\t\t\t: null\r\n\t)\r\n}\r\nexport default NewContact;\r\n\r\n/*\r\napi.getUserById(idInput).then(\r\n\t(userRecipient) => {\r\n\t},\r\n\t(error) => {\r\n\t\tconsole.log(error)\r\n\t}\r\n)\r\n*/"]},"metadata":{},"sourceType":"module"}