{"ast":null,"code":"import api from \"../../api\";\n\nfunction reducertest() {\n  return new Promise(resolve => {\n    api.getUserById(\"60749c0d0c37e924d44dd26e\").then(user => {\n      resolve({\n        count: user.data.data.pseudo\n      });\n    });\n  });\n}\n\nconsole.log(reducertest());\nexport const initialState = {\n  count: \"f\"\n};\n\nfunction reducer(state) {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({ ...state,\n        count: 1\n      });\n    }, 1000);\n  });\n}\n\nexport default reducer;\n/*\r\n  componentDidMount = async () => {\r\n    this.setState({ isLoading: true })\r\n    await api.getUserById(this.props.id).then(user => {\r\n      this.setState({\r\n        user: user.data.data,\r\n        isLoading: false\r\n      })\r\n    })\r\n  }\r\n*/","map":{"version":3,"sources":["C:/Users/anton/Desktop/FInt.Tchat/dev/V7/client/src/contexts/CounterContext/reducer.js"],"names":["api","reducertest","Promise","resolve","getUserById","then","user","count","data","pseudo","console","log","initialState","reducer","state","setTimeout"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,WAAhB;;AAEA,SAASC,WAAT,GAAuB;AACrB,SAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC1BH,IAAAA,GAAG,CAACI,WAAJ,CAAgB,0BAAhB,EAA4CC,IAA5C,CAAiDC,IAAI,IAAI;AACvDH,MAAAA,OAAO,CAAC;AAAEI,QAAAA,KAAK,EAAED,IAAI,CAACE,IAAL,CAAUA,IAAV,CAAeC;AAAxB,OAAD,CAAP;AACD,KAFD;AAGH,GAJM,CAAP;AAKD;;AACDC,OAAO,CAACC,GAAR,CAAYV,WAAW,EAAvB;AACA,OAAO,MAAMW,YAAY,GAAG;AAC1BL,EAAAA,KAAK,EAAE;AADmB,CAArB;;AAGP,SAASM,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,SAAO,IAAIZ,OAAJ,CAAYC,OAAO,IAAI;AAC5BY,IAAAA,UAAU,CAAC,MAAM;AAEfZ,MAAAA,OAAO,CAAC,EAAE,GAAGW,KAAL;AAAYP,QAAAA,KAAK,EAAE;AAAnB,OAAD,CAAP;AAED,KAJS,EAIP,IAJO,CAAV;AAKD,GANM,CAAP;AAOD;;AAED,eAAeM,OAAf;AAEA","sourcesContent":["import api from \"../../api\"\r\n\r\nfunction reducertest() {\r\n  return new Promise(resolve => {\r\n      api.getUserById(\"60749c0d0c37e924d44dd26e\").then(user => {\r\n        resolve({ count: user.data.data.pseudo });\r\n      })\r\n  });\r\n}\r\nconsole.log(reducertest())\r\nexport const initialState = { \r\n  count: \"f\" };\r\n\r\nfunction reducer(state) {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => {\r\n\r\n      resolve({ ...state, count: 1 });\r\n\r\n    }, 1000);\r\n  });\r\n}\r\n\r\nexport default reducer;\r\n\r\n/*\r\n  componentDidMount = async () => {\r\n    this.setState({ isLoading: true })\r\n    await api.getUserById(this.props.id).then(user => {\r\n      this.setState({\r\n        user: user.data.data,\r\n        isLoading: false\r\n      })\r\n    })\r\n  }\r\n*/"]},"metadata":{},"sourceType":"module"}