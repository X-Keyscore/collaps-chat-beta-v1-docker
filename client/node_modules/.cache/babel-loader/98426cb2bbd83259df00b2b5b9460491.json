{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anton\\\\Desktop\\\\collaps-chat\\\\dev\\\\Beta\\\\V1\\\\client\\\\src\\\\components\\\\sidebar\\\\ChannelsContacts.js\";\nimport React, { useEffect } from 'react';\nimport api from \"../../api\";\nimport { useUser } from '../../contexts/UserProvider';\nimport { useChannels } from '../../contexts/ChannelsProvider';\nexport default function ChannelsContacts() {\n  const {\n    client\n  } = useUser();\n  const {\n    channels,\n    setChannels,\n    selectedChannel,\n    setSelectedChannel,\n    setMessagesChannels\n  } = useChannels(); // Le \"useEffect\" est utilisé pour géré l'asynchrone\n\n  useEffect(() => {\n    // Cette fonction renvoie les données du client\n    function renderChannels(client) {\n      return new Promise(resolve => {\n        // Variable pour stocker les channels du client\n        var clientChannels = client.channels; // Je filtre pour ne récupérer que les contacts privés\n\n        clientChannels.filter(channel => channel.type === \"private\").forEach((clientChannel, index) => {\n          // Je récupère les informations sur le destinataire grace à sont id\n          api.getChannelById(clientChannel.id).then(channel => {\n            var channelRecipient = channel.data.channel.recipients.filter(recipient => recipient !== client.id)[0];\n            api.getUserById(channelRecipient).then(recipient => {\n              // Si le destinataire n'existe plus je le supprime des données du client et le channel\n              if (recipient.data.user === null) {\n                // Je boucle tous les \"channels\" du client\n                for (let i = 0; i < client.channels.length; i++) {\n                  // Je teste si l'id du \"channel\" sélectionné correspond à l'id du \"channel\" passé dans la boucle\n                  if (client.channels[i].id === channel.data.channel.id) {\n                    // Je supprime le \"channel\" dans la liste grace à sa position\n                    client.channels.splice(i, 1); // Je mets à jour le client\n\n                    api.updateUserById(client.id, {\n                      channels: client.channels\n                    }).then(res => {}); // Je supprime le channel\n\n                    api.deleteChannelById(channel.data.channel.id);\n                  }\n                }\n              } // Je complète les informations existantes du destinataire avec celle de la base de données\n\n\n              var channelEdit = channel.data.channel; // Ajout des infos sur le desinataire\n\n              channelEdit.recipients = [{\n                id: recipient.data.user.id,\n                pseudo: recipient.data.user.pseudo\n              }]; // J'ajoute un element \"selected\" à \"channel\" est passe la valeur \"true\" au premier\n\n              Object.assign(channelEdit, {\n                selected: false\n              });\n              Object.assign(channelEdit, {\n                key: index\n              }); // Je mets à jour l'object la list des \"channels\" du client\n\n              clientChannels[index] = channelEdit;\n              if (client.channels.length === index + 1) return resolve(clientChannels);\n            });\n          });\n        });\n      });\n    } // Je teste si le client est chargé\n\n\n    if (client === null) return; // Je teste si le client à des conversations\n\n    if (client.channels.length === 0) return setChannels([]); // Fonction asynchrone pour faire le rendu des channels du client\n\n    async function fetchRenderClientChannels() {\n      return renderChannels(client).then(channels => setChannels(channels));\n    } // Appel de la fonction\n\n\n    fetchRenderClientChannels();\n  }, [setChannels, client]); // Si \"client\" est \"null\" c'est qu'il est en chargement donc j'affiche chargement\n\n  if (channels === null) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar-body-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }\n    }, \"Chargement...\");\n  } // Si \"client.channels\" est vide c'est qu'il n'y a pas de constact donc j'affiche aucun contact\n\n\n  if (channels.length === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar-body-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }\n    }, \"Aucun contact\");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, channels.map(channel => /*#__PURE__*/React.createElement(\"button\", {\n    key: channel.id,\n    className: `sidebar-body-contact ${selectedChannel === null ? null : selectedChannel.id === channel.id ? 'selected' : ''}`,\n    onClick: () => {\n      // Reset du tableau des messages\n      setMessagesChannels([]); // Je sélectionne le \"channel\"\n\n      setSelectedChannel(channel);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sidebar-body-contact-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sidebar-body-contact-content-avatar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    width: \"40\",\n    height: \"32\",\n    viewBox: \"0 0 40 32\",\n    \"aria-hidden\": \"true\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"foreignObject\", {\n    x: \"0\",\n    y: \"0\",\n    width: \"32\",\n    height: \"32\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"avatar\",\n    src: `${client.avatarLink}${channel.recipients[0].id}`,\n    \"aria-hidden\": \"true\",\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"rect\", {\n    className: \"online\",\n    fill: \"currentColor\",\n    width: \"10\",\n    height: \"10\",\n    x: \"22\",\n    y: \"22\",\n    rx: \"15\",\n    ry: \"15\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 19\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sidebar-body-contact-content-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"username\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"overflow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 19\n    }\n  }, channel.recipients[0].pseudo)))))));\n}","map":{"version":3,"sources":["C:/Users/anton/Desktop/collaps-chat/dev/Beta/V1/client/src/components/sidebar/ChannelsContacts.js"],"names":["React","useEffect","api","useUser","useChannels","ChannelsContacts","client","channels","setChannels","selectedChannel","setSelectedChannel","setMessagesChannels","renderChannels","Promise","resolve","clientChannels","filter","channel","type","forEach","clientChannel","index","getChannelById","id","then","channelRecipient","data","recipients","recipient","getUserById","user","i","length","splice","updateUserById","res","deleteChannelById","channelEdit","pseudo","Object","assign","selected","key","fetchRenderClientChannels","map","avatarLink"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\n\nimport api from \"../../api\"\n\nimport { useUser } from '../../contexts/UserProvider';\nimport { useChannels } from '../../contexts/ChannelsProvider';\n\nexport default function ChannelsContacts() {\n  const { client } = useUser()\n  const { channels, setChannels, selectedChannel, setSelectedChannel, setMessagesChannels } = useChannels()\n\n  // Le \"useEffect\" est utilisé pour géré l'asynchrone\n  useEffect(() => {\n\n     // Cette fonction renvoie les données du client\n  function renderChannels(client) {\n    return new Promise((resolve) => {\n\n      // Variable pour stocker les channels du client\n      var clientChannels = client.channels\n\n      // Je filtre pour ne récupérer que les contacts privés\n      clientChannels.filter(channel => channel.type === \"private\").forEach((clientChannel, index) => {\n\n        // Je récupère les informations sur le destinataire grace à sont id\n        api.getChannelById(clientChannel.id).then((channel) => {\n\n          var channelRecipient = channel.data.channel.recipients.filter(recipient => recipient !== client.id)[0]\n\n          api.getUserById(channelRecipient).then((recipient) => {\n\n            // Si le destinataire n'existe plus je le supprime des données du client et le channel\n            if (recipient.data.user === null) {\n              // Je boucle tous les \"channels\" du client\n              for (let i = 0; i < client.channels.length; i++) {\n                // Je teste si l'id du \"channel\" sélectionné correspond à l'id du \"channel\" passé dans la boucle\n                if (client.channels[i].id === channel.data.channel.id) {\n                  // Je supprime le \"channel\" dans la liste grace à sa position\n                  client.channels.splice(i, 1);\n                  // Je mets à jour le client\n                  api.updateUserById(client.id, { channels: client.channels }).then(res => { })\n                  // Je supprime le channel\n                  api.deleteChannelById(channel.data.channel.id)\n                }\n              }\n            }\n\n            // Je complète les informations existantes du destinataire avec celle de la base de données\n            var channelEdit = channel.data.channel\n\n            // Ajout des infos sur le desinataire\n            channelEdit.recipients = [{\n              id: recipient.data.user.id,\n              pseudo: recipient.data.user.pseudo\n            }]\n\n            // J'ajoute un element \"selected\" à \"channel\" est passe la valeur \"true\" au premier\n            Object.assign(channelEdit, { selected: false })\n            Object.assign(channelEdit, { key: index })\n\n            // Je mets à jour l'object la list des \"channels\" du client\n            clientChannels[index] = channelEdit\n\n            if (client.channels.length === index + 1) return resolve(clientChannels)\n\n          })\n        });\n      })\n    })\n  }\n\n    // Je teste si le client est chargé\n    if (client === null) return\n    // Je teste si le client à des conversations\n    if (client.channels.length === 0) return setChannels([])\n    // Fonction asynchrone pour faire le rendu des channels du client\n    async function fetchRenderClientChannels() {\n      return renderChannels(client).then(channels => setChannels(channels))\n    }\n    // Appel de la fonction\n    fetchRenderClientChannels();\n  }, [setChannels, client])\n\n  // Si \"client\" est \"null\" c'est qu'il est en chargement donc j'affiche chargement\n  if (channels === null) {\n    return (\n      <div className=\"sidebar-body-info\">Chargement...</div>\n    );\n  }\n  // Si \"client.channels\" est vide c'est qu'il n'y a pas de constact donc j'affiche aucun contact\n  if (channels.length === 0) {\n    return (\n      <div className=\"sidebar-body-info\">Aucun contact</div>\n    );\n  }\n  return (\n    <>\n      {\n        channels.map((channel) => (\n          <button\n            key={channel.id}\n            className={`sidebar-body-contact ${selectedChannel === null ? null : selectedChannel.id === channel.id ? 'selected' : ''}`}\n            onClick={() => {\n              // Reset du tableau des messages\n              setMessagesChannels([])\n              // Je sélectionne le \"channel\"\n              setSelectedChannel(channel)\n            }}\n          >\n            <div className=\"sidebar-body-contact-content\">\n              <div className=\"sidebar-body-contact-content-avatar\">\n\n                <svg width=\"40\" height=\"32\" viewBox=\"0 0 40 32\" aria-hidden=\"true\">\n                  <foreignObject x=\"0\" y=\"0\" width=\"32\" height=\"32\">\n                    <img className=\"avatar\" src={`${client.avatarLink}${channel.recipients[0].id}`} aria-hidden=\"true\" alt=\"\" />\n                  </foreignObject>\n                  <rect className=\"online\" fill=\"currentColor\" width=\"10\" height=\"10\" x=\"22\" y=\"22\" rx=\"15\" ry=\"15\"></rect>\n                </svg>\n\n              </div>\n              <div className=\"sidebar-body-contact-content-text\">\n                <div className=\"username\">\n                  <div className=\"overflow\">\n                    {channel.recipients[0].pseudo}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </button>\n        ))\n      }\n    </>\n  )\n}"]},"metadata":{},"sourceType":"module"}