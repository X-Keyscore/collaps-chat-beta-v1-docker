{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\anton\\\\Desktop\\\\FInt.Tchat\\\\dev\\\\Beta\\\\V1\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\anton\\\\Desktop\\\\FInt.Tchat\\\\dev\\\\Beta\\\\V1\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import React,{useEffect}from'react';import api from\"../../api\";import{useUser}from'../../contexts/UserProvider';import{useChannels}from'../../contexts/ChannelsProvider';export default function ChannelsContacts(){var _useUser=useUser(),client=_useUser.client;var _useChannels=useChannels(),channels=_useChannels.channels,setChannels=_useChannels.setChannels,selectedChannel=_useChannels.selectedChannel,setSelectedChannel=_useChannels.setSelectedChannel,setMessagesChannels=_useChannels.setMessagesChannels;// Le \"useEffect\" est utilisé pour géré l'asynchrone\nuseEffect(function(){// Je teste si le client est chargé\nif(client===null)return;// Je teste si le client à des conversations\nif(client.channels.length===0)return setChannels([]);// Fonction asynchrone pour faire le rendu des channels du client\nfunction fetchRenderClientChannels(){return _fetchRenderClientChannels.apply(this,arguments);}// Appel de la fonction\nfunction _fetchRenderClientChannels(){_fetchRenderClientChannels=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:return _context.abrupt(\"return\",renderChannels(client).then(function(channels){return setChannels(channels);}));case 1:case\"end\":return _context.stop();}}},_callee);}));return _fetchRenderClientChannels.apply(this,arguments);}fetchRenderClientChannels();},[setChannels,client]);// Cette fonction renvoie les données du client\nfunction renderChannels(client){return new Promise(function(resolve){// Variable pour stocker les channels du client\nvar clientChannels=client.channels;// Je filtre pour ne récupérer que les contacts privés\nclientChannels.filter(function(channel){return channel.type===\"private\";}).forEach(function(channel,index){// Je récupère les informations sur le destinataire grace à sont id\napi.getChannelById(channel.id).then(function(channelD){var recipientId=channelD.data.data.recipients.filter(function(recipient){return recipient!==client.id;})[0];api.getUserById(recipientId).then(function(recipient){// Si le destinataire n'existe plus je le supprime des données du client et le channel\nif(recipient.data.data===null){// Je boucle tous les \"channels\" du client\nfor(var i=0;i<client.channels.length;i++){// Je teste si l'id du \"channel\" sélectionné correspond à l'id du \"channel\" passé dans la boucle\nif(client.channels[i].id===channelD.data.data.id){// Je supprime le \"channel\" dans la liste grace à sa position\nclient.channels.splice(i,1);// Je mets à jour le client\napi.updateUserById(client.id,{data:{channels:client.channels}}).then(function(res){});// Je supprime le channel\napi.deleteChannelById(channelD.data.data.id);}}}// Je complète les informations existantes du destinataire avec celle de la base de données\nvar channelEdit=channelD.data.data;// Ajout des infos sur le desinataire\nchannelEdit.recipients=[{id:recipient.data.data.id,pseudo:recipient.data.data.pseudo}];// J'ajoute un element \"selected\" à \"channel\" est passe la valeur \"true\" au premier\nObject.assign(channelEdit,{selected:false});Object.assign(channelEdit,{key:index});// Je mets à jour l'object la list des \"channels\" du client\nclientChannels[index]=channelEdit;if(client.channels.length===index+1)return resolve(clientChannels);});});});});}// Si \"client\" est \"null\" c'est qu'il est en chargement donc j'affiche chargement\nif(channels===null){return/*#__PURE__*/React.createElement(\"div\",{className:\"sidebar-body-info\"},\"Chargement...\");}// Si \"client.channels\" est vide c'est qu'il n'y a pas de constact donc j'affiche aucun contact\nif(channels.length===0){return/*#__PURE__*/React.createElement(\"div\",{className:\"sidebar-body-info\"},\"Aucun contact\");}return/*#__PURE__*/React.createElement(React.Fragment,null,channels.map(function(channel){return/*#__PURE__*/React.createElement(\"button\",{key:channel.id,className:\"sidebar-body-contact \".concat(selectedChannel===null?null:selectedChannel.id===channel.id?'selected':''),onClick:function onClick(){// Reset du tableau des messages\nsetMessagesChannels([]);// Je sélectionne le \"channel\"\nsetSelectedChannel(channel);}},/*#__PURE__*/React.createElement(\"div\",{className:\"sidebar-body-contact-content\"},/*#__PURE__*/React.createElement(\"div\",{className:\"sidebar-body-contact-content-avatar\"},/*#__PURE__*/React.createElement(\"svg\",{width:\"40\",height:\"32\",viewBox:\"0 0 40 32\",\"aria-hidden\":\"true\"},/*#__PURE__*/React.createElement(\"foreignObject\",{x:\"0\",y:\"0\",width:\"32\",height:\"32\"},/*#__PURE__*/React.createElement(\"img\",{className:\"avatar\",src:\"https://collaps.xyz/collapsapi/api/file_avatar/id/\"+channel.recipients[0].id,\"aria-hidden\":\"true\",alt:\"\"})),/*#__PURE__*/React.createElement(\"rect\",{className:\"online\",fill:\"currentColor\",width:\"10\",height:\"10\",x:\"22\",y:\"22\",rx:\"15\",ry:\"15\"}))),/*#__PURE__*/React.createElement(\"div\",{className:\"sidebar-body-contact-content-text\"},/*#__PURE__*/React.createElement(\"div\",{className:\"username\"},/*#__PURE__*/React.createElement(\"div\",{className:\"overflow\"},channel.recipients[0].pseudo)))));}));}","map":{"version":3,"sources":["C:/Users/anton/Desktop/FInt.Tchat/dev/Beta/V1/client/src/components/sidebar/ChannelsContacts.js"],"names":["React","useEffect","api","useUser","useChannels","ChannelsContacts","client","channels","setChannels","selectedChannel","setSelectedChannel","setMessagesChannels","length","fetchRenderClientChannels","renderChannels","then","Promise","resolve","clientChannels","filter","channel","type","forEach","index","getChannelById","id","channelD","recipientId","data","recipients","recipient","getUserById","i","splice","updateUserById","res","deleteChannelById","channelEdit","pseudo","Object","assign","selected","key","map"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\n\nimport api from \"../../api\"\n\nimport { useUser } from '../../contexts/UserProvider';\nimport { useChannels } from '../../contexts/ChannelsProvider';\n\nexport default function ChannelsContacts() {\n  const { client } = useUser()\n  const { channels, setChannels, selectedChannel, setSelectedChannel, setMessagesChannels } = useChannels()\n  \n  // Le \"useEffect\" est utilisé pour géré l'asynchrone\n  useEffect(() => {\n    // Je teste si le client est chargé\n    if (client === null) return\n    // Je teste si le client à des conversations\n    if (client.channels.length === 0) return setChannels([])\n    // Fonction asynchrone pour faire le rendu des channels du client\n    async function fetchRenderClientChannels() {\n      return renderChannels(client).then(channels => setChannels(channels))\n    }\n    // Appel de la fonction\n    fetchRenderClientChannels();\n  }, [setChannels, client])\n\n  // Cette fonction renvoie les données du client\n  function renderChannels(client) {\n    return new Promise((resolve) => {\n\n      // Variable pour stocker les channels du client\n      var clientChannels = client.channels\n\n      // Je filtre pour ne récupérer que les contacts privés\n      clientChannels.filter(channel => channel.type === \"private\").forEach((channel, index) => {\n\n        // Je récupère les informations sur le destinataire grace à sont id\n        api.getChannelById(channel.id).then((channelD) => {\n\n          var recipientId = channelD.data.data.recipients.filter(recipient => recipient !== client.id)[0]\n\n          api.getUserById(recipientId).then((recipient) => {\n\n            // Si le destinataire n'existe plus je le supprime des données du client et le channel\n            if (recipient.data.data === null) {\n              // Je boucle tous les \"channels\" du client\n              for (let i = 0; i < client.channels.length; i++) {\n                // Je teste si l'id du \"channel\" sélectionné correspond à l'id du \"channel\" passé dans la boucle\n                if (client.channels[i].id === channelD.data.data.id) {\n                  // Je supprime le \"channel\" dans la liste grace à sa position\n                  client.channels.splice(i, 1);\n                  // Je mets à jour le client\n                  api.updateUserById(client.id, { data: { channels: client.channels } }).then(res => { })\n                  // Je supprime le channel\n                  api.deleteChannelById(channelD.data.data.id)\n                }\n              }\n            }\n\n            // Je complète les informations existantes du destinataire avec celle de la base de données\n            var channelEdit = channelD.data.data\n\n            // Ajout des infos sur le desinataire\n            channelEdit.recipients = [{\n              id: recipient.data.data.id,\n              pseudo: recipient.data.data.pseudo\n            }]\n\n            // J'ajoute un element \"selected\" à \"channel\" est passe la valeur \"true\" au premier\n            Object.assign(channelEdit, { selected: false })\n            Object.assign(channelEdit, { key: index })\n\n            // Je mets à jour l'object la list des \"channels\" du client\n            clientChannels[index] = channelEdit\n\n            if (client.channels.length === index + 1) return resolve(clientChannels)\n\n          })\n        });\n      })\n    })\n  }\n\n  // Si \"client\" est \"null\" c'est qu'il est en chargement donc j'affiche chargement\n  if (channels === null) {\n    return (\n      <div className=\"sidebar-body-info\">Chargement...</div>\n    );\n  }\n  // Si \"client.channels\" est vide c'est qu'il n'y a pas de constact donc j'affiche aucun contact\n  if (channels.length === 0) {\n    return (\n      <div className=\"sidebar-body-info\">Aucun contact</div>\n    );\n  }\n  return (\n    <>\n      {\n        channels.map((channel) => (\n          <button\n            key={channel.id}\n            className={`sidebar-body-contact ${selectedChannel === null ? null : selectedChannel.id === channel.id ? 'selected' : ''}`}\n            onClick={() => {\n              // Reset du tableau des messages\n              setMessagesChannels([])\n              // Je sélectionne le \"channel\"\n              setSelectedChannel(channel)\n            }}\n          >\n            <div className=\"sidebar-body-contact-content\">\n              <div className=\"sidebar-body-contact-content-avatar\">\n\n                <svg width=\"40\" height=\"32\" viewBox=\"0 0 40 32\" aria-hidden=\"true\">\n                  <foreignObject x=\"0\" y=\"0\" width=\"32\" height=\"32\">\n                    <img className=\"avatar\" src={\"https://collaps.xyz/collapsapi/api/file_avatar/id/\" + channel.recipients[0].id} aria-hidden=\"true\" alt=\"\" />\n                  </foreignObject>\n                  <rect className=\"online\" fill=\"currentColor\" width=\"10\" height=\"10\" x=\"22\" y=\"22\" rx=\"15\" ry=\"15\"></rect>\n                </svg>\n\n              </div>\n              <div className=\"sidebar-body-contact-content-text\">\n                <div className=\"username\">\n                  <div className=\"overflow\">\n                    {channel.recipients[0].pseudo}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </button>\n        ))\n      }\n    </>\n  )\n}"]},"metadata":{},"sourceType":"module"}