{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anton\\\\Desktop\\\\FInt.Tchat\\\\dev\\\\V10\\\\client\\\\src\\\\contexts\\\\UserProvider.js\";\nimport React, { Component, useContext } from 'react';\nimport api from \"../api\";\nimport SocketContext from './SocketProvider';\nconst UserContext = React.createContext();\nexport function useUser() {\n  return useContext(UserContext);\n}\nexport class UserProvider extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.updateUser = async (id, body) => {\n      const payload = body;\n      await api.updateUserById(id, payload).then(res => {});\n    };\n\n    this.getClient = type => {\n      return new Promise(resolve => {\n        api.getUserById(this.props.id).then(user => {\n          // Constante pour stocker les données brutes du cleint\n          const clientRaw = user.data.data; // si le type je renvoie les données brute par défaut\n\n          if (type === undefined) return resolve(clientRaw); // Si le client n'a pas de constact j'envoie directement les données\n\n          if (clientRaw.channels.length === 0) return resolve(clientRaw);\n\n          if (type === \"cross\") {\n            // Variable pour stocker les données croisées du cleint\n            var clientCross = user.data.data; // Je filtre pour ne récupérer que les contacts privés\n\n            clientCross.channels.filter(channel => channel.type === \"private\").forEach((channel, index) => {\n              // Je récupère les informations sur le destinataire grace à sont id\n              api.getUserById(channel.recipients.id).then(recipient => {\n                // Si le destinataire n'existe plus je le supprime des données du client\n                if (recipient.data.data === null) {\n                  // Je boucle tous les \"channels\" du client\n                  for (let i = 0; i < clientCross.channels.length; i++) {\n                    // Je teste si l'id du \"channel\" sélectionné correspond à l'id du \"channel\" passé dans la boucle\n                    if (clientCross.channels[i].recipients.id === channel.recipients.id) {\n                      // Je supprime le \"channel\" dans la liste grace à sa position\n                      clientCross.channels.splice(i, 1); // Je mets à jour le client\n\n                      return api.updateUserById(clientCross.id, {\n                        data: {\n                          channels: clientCross.channels\n                        }\n                      }).then(res => {\n                        /*//EN COURS// Système gestion des erreurs*/\n                      });\n                    }\n                  }\n                } // Je complète les informations existantes du destinataire avec celle de la base de données\n\n\n                channel.recipients = recipient.data.data; // J'ajoute un element \"selected\" à \"channel\" est passe la valeur \"true\" au premier\n\n                Object.assign(channel, {\n                  selected: false\n                });\n                Object.assign(channel, {\n                  key: index\n                }); // Je mets à jour l'object \"channels\" du client \n\n                clientCross.channels[index] = channel;\n                if (clientRaw.channels.length === index + 1) return resolve(clientCross);\n              });\n            });\n          }\n        });\n      });\n    };\n\n    this.createUser = () => {};\n\n    this.deleteUser = () => {};\n  }\n\n  render() {\n    const value = {\n      client,\n      getClient: this.getClient,\n      updateUser: this.updateUser\n    };\n    return /*#__PURE__*/React.createElement(UserContext.Provider, {\n      value: value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }\n    }, this.props.children);\n  }\n\n}\nUserProvider.contextType = SocketContext;\nexport default UserContext;","map":{"version":3,"sources":["C:/Users/anton/Desktop/FInt.Tchat/dev/V10/client/src/contexts/UserProvider.js"],"names":["React","Component","useContext","api","SocketContext","UserContext","createContext","useUser","UserProvider","updateUser","id","body","payload","updateUserById","then","res","getClient","type","Promise","resolve","getUserById","props","user","clientRaw","data","undefined","channels","length","clientCross","filter","channel","forEach","index","recipients","recipient","i","splice","Object","assign","selected","key","createUser","deleteUser","render","value","client","children","contextType"],"mappings":"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","sourcesContent":["import React, { Component, useContext } from 'react'\r\n\r\nimport api from \"../api\"\r\n\r\nimport SocketContext from './SocketProvider';\r\n\r\nconst UserContext = React.createContext()\r\n\r\nexport function useUser() {\r\n  return useContext(UserContext)\r\n}\r\n\r\nexport class UserProvider extends Component {\r\n  static contextType = SocketContext\r\n\r\n  updateUser = async (id, body) => {\r\n    const payload = body\r\n    await api.updateUserById(id, payload).then(res => {\r\n    })\r\n  }\r\n\r\n  // Cette fonction renvoie les données du client\r\n  // -Par défaut elle renvoie les données brutes\r\n  // -Si le type est \"cross\" elle renvoie les données croisées\r\n  getClient = (type) => {\r\n    return new Promise((resolve) => {\r\n      api.getUserById(this.props.id).then(\r\n        (user) => {\r\n          // Constante pour stocker les données brutes du cleint\r\n          const clientRaw = user.data.data\r\n\r\n          // si le type je renvoie les données brute par défaut\r\n          if (type === undefined) return resolve(clientRaw)\r\n\r\n          // Si le client n'a pas de constact j'envoie directement les données\r\n          if (clientRaw.channels.length === 0) return resolve(clientRaw)\r\n\r\n          if (type === \"cross\") {\r\n            // Variable pour stocker les données croisées du cleint\r\n            var clientCross = user.data.data\r\n\r\n            // Je filtre pour ne récupérer que les contacts privés\r\n            clientCross.channels.filter(channel => channel.type === \"private\").forEach((channel, index) => {\r\n\r\n              // Je récupère les informations sur le destinataire grace à sont id\r\n              api.getUserById(channel.recipients.id).then((recipient) => {\r\n\r\n                // Si le destinataire n'existe plus je le supprime des données du client\r\n                if (recipient.data.data === null) {\r\n                  // Je boucle tous les \"channels\" du client\r\n                  for (let i = 0; i < clientCross.channels.length; i++) {\r\n                    // Je teste si l'id du \"channel\" sélectionné correspond à l'id du \"channel\" passé dans la boucle\r\n                    if (clientCross.channels[i].recipients.id === channel.recipients.id) {\r\n                      // Je supprime le \"channel\" dans la liste grace à sa position\r\n                      clientCross.channels.splice(i, 1);\r\n                      // Je mets à jour le client\r\n                      return api.updateUserById(clientCross.id, { data: { channels: clientCross.channels } }).then(res => {/*//EN COURS// Système gestion des erreurs*/ })\r\n                    }\r\n                  }\r\n                }\r\n\r\n                // Je complète les informations existantes du destinataire avec celle de la base de données\r\n                channel.recipients = recipient.data.data\r\n\r\n                // J'ajoute un element \"selected\" à \"channel\" est passe la valeur \"true\" au premier\r\n                Object.assign(channel, { selected: false })\r\n                Object.assign(channel, { key: index })\r\n\r\n                // Je mets à jour l'object \"channels\" du client \r\n                clientCross.channels[index] = channel\r\n\r\n                if (clientRaw.channels.length === index + 1) return resolve(clientCross)\r\n\r\n              });\r\n            })\r\n          }\r\n        })\r\n    })\r\n  }\r\n\r\n  createUser = () => {\r\n\r\n  }\r\n\r\n  deleteUser = () => {\r\n\r\n  }\r\n\r\n  render() {\r\n    const value = {\r\n      client,\r\n      getClient: this.getClient,\r\n      updateUser: this.updateUser\r\n    }\r\n\r\n    return (\r\n      <UserContext.Provider value={value}>\r\n        {this.props.children}\r\n      </UserContext.Provider>\r\n    )\r\n  }\r\n}\r\n\r\nexport default UserContext"]},"metadata":{},"sourceType":"module"}