{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anton\\\\Desktop\\\\FInt.Tchat\\\\dev\\\\V10\\\\client\\\\src\\\\contexts\\\\ChannelsProvider.js\";\nimport React, { useContext, useState, useEffect, useRef } from 'react';\nimport { useSocket } from './SocketProvider';\nimport api from \"../api\";\nconst ChannelsContext = React.createContext();\nexport function useChannels() {\n  return useContext(ChannelsContext);\n}\nexport function ChannelsProvider({\n  id,\n  children\n}) {\n  const socket = useSocket();\n  const [channels, setChannels] = useState(null);\n  const [selectedChannel, setSelectedChannel] = useState(null); // https://stackoverflow.com/questions/54824036/useeffect-hook-with-socket-io-state-is-not-persistent-in-socket-handlers\n\n  const channelsRef = useRef(channels);\n  useEffect(() => {\n    // This effect executes on every render (no dependency array specified).\n    // Any change to the \"channels\" state will trigger a re-render\n    // which will then cause this effect to capture the current \"channels\"\n    // value in \"channelsRef.current\".\n    channelsRef.current = channels;\n  });\n  useEffect(() => {\n    if (socket == null) return;\n\n    const addMessage = message => {\n      console.log(message);\n      console.log(\"test\");\n      channels.forEach((channel, index) => {\n        if (channel.id === message.channelId) {\n          channels[index].messages.push({\n            sender: message.sender,\n            date: message.date,\n            text: message.text\n          });\n        }\n      });\n      console.log(channels);\n      setChannels(channels => {\n        return channels;\n      });\n    };\n\n    socket.on('receive-message', addMessage);\n    return () => socket.off('receive-message', addMessage);\n  }, [socket]);\n\n  function addMessageToDatabase(channel, text, client, recipients) {\n    // J'isole les données du client dans une variable pour pouvoir les modifier\n    var clientEdit = client; // Je boucle tous les \"channels\" du client\n\n    for (let i = 0; i < clientEdit.channels.length; i++) {\n      // Je teste si l'id du \"channel\" sélectionné correspond à l'id du \"channel\" passé dans la boucle\n      if (clientEdit.channels[i].id === channel.id) {\n        // J'ajoute le message aux données du client\n        clientEdit.channels[i].messages.push({\n          sender: client.id,\n          date: new Date(),\n          text: text\n        }); // Je mets à jour le client\n\n        api.updateUserById(clientEdit.id, {\n          data: {\n            channels: clientEdit.channels\n          }\n        }).then(res => {});\n      }\n    } // Je boucle tous les destinataires\n\n\n    recipients.forEach(recipient => {\n      // J'isole les données du destinataire dans une variable pour pouvoir les modifier\n      var recipientEdit = recipient; // Je boucle tous les \"channels\" du destinataire\n\n      for (let i = 0; i < recipientEdit.channels.length; i++) {\n        // Je teste si l'id du \"channel\" sélectionné correspond à l'id du \"channel\" passé dans la boucle\n        if (recipientEdit.channels[i].id === channel.id) {\n          // J'ajoute le message aux données du destinataire\n          recipientEdit.channels[i].messages.push({\n            sender: client.id,\n            date: new Date(),\n            text: text\n          }); // Je mets à jour le destinataire\n\n          api.updateUserById(recipientEdit.id, {\n            data: {\n              channels: recipientEdit.channels\n            }\n          }).then(res => {});\n        }\n      }\n    });\n  }\n\n  function sendMessage(channel, text, client, recipients) {\n    socket.emit('send-message', {\n      channelId: channel.id,\n      recipients,\n      date: new Date(),\n      text\n    });\n    addMessageToDatabase(channel, text, client, recipients);\n  }\n\n  const value = {\n    channels,\n    setChannels,\n    selectedChannel,\n    setSelectedChannel,\n    sendMessage\n  };\n  return /*#__PURE__*/React.createElement(ChannelsContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }\n  }, children);\n}\nexport default ChannelsContext;\n/*\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false\n\n  a.sort()\n  b.sort()\n\n  return a.every((element, index) => {\n    return element === b[index]\n  })\n}\n\nconst addMessageToChannel = useCallback(({ recipients, text, sender }) => {\n  setChannels(prevChannels => {\n    let madeChange = false\n    const newMessage = { sender, text }\n    const newChannels = prevChannels.map(channel => {\n      if (arrayEquality(channel.recipients, recipients)) {\n        madeChange = true\n        return {\n          ...channel,\n          messages: [...channel.messages, newMessage]\n        }\n      }\n\n      return channel\n    })\n\n    if (madeChange) {\n      return newChannels\n    } else {\n      return [\n        ...prevChannels,\n        { recipients, messages: [newMessage] }\n      ]\n    }\n  })\n}, [])*/","map":{"version":3,"sources":["C:/Users/anton/Desktop/FInt.Tchat/dev/V10/client/src/contexts/ChannelsProvider.js"],"names":["React","useContext","useState","useEffect","useRef","useSocket","api","ChannelsContext","createContext","useChannels","ChannelsProvider","id","children","socket","channels","setChannels","selectedChannel","setSelectedChannel","channelsRef","current","addMessage","message","console","log","forEach","channel","index","channelId","messages","push","sender","date","text","on","off","addMessageToDatabase","client","recipients","clientEdit","i","length","Date","updateUserById","data","then","res","recipient","recipientEdit","sendMessage","emit","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,SAAtC,EAAiDC,MAAjD,QAA+D,OAA/D;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,GAAP,MAAgB,QAAhB;AAEA,MAAMC,eAAe,GAAGP,KAAK,CAACQ,aAAN,EAAxB;AAEA,OAAO,SAASC,WAAT,GAAuB;AAC5B,SAAOR,UAAU,CAACM,eAAD,CAAjB;AACD;AAED,OAAO,SAASG,gBAAT,CAA0B;AAAEC,EAAAA,EAAF;AAAMC,EAAAA;AAAN,CAA1B,EAA4C;AACjD,QAAMC,MAAM,GAAGR,SAAS,EAAxB;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACc,eAAD,EAAkBC,kBAAlB,IAAwCf,QAAQ,CAAC,IAAD,CAAtD,CAHiD,CAKjD;;AACA,QAAMgB,WAAW,GAAGd,MAAM,CAACU,QAAD,CAA1B;AACAX,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA;AACA;AACAe,IAAAA,WAAW,CAACC,OAAZ,GAAsBL,QAAtB;AACD,GANQ,CAAT;AAQAX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,MAAM,IAAI,IAAd,EAAoB;;AAEpB,UAAMO,UAAU,GAAIC,OAAD,IAAa;AAC9BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AAEAT,MAAAA,QAAQ,CAACU,OAAT,CAAiB,CAACC,OAAD,EAAUC,KAAV,KAAoB;AAEnC,YAAID,OAAO,CAACd,EAAR,KAAeU,OAAO,CAACM,SAA3B,EAAsC;AACpCb,UAAAA,QAAQ,CAACY,KAAD,CAAR,CAAgBE,QAAhB,CAAyBC,IAAzB,CAA8B;AAAEC,YAAAA,MAAM,EAAET,OAAO,CAACS,MAAlB;AAA0BC,YAAAA,IAAI,EAAEV,OAAO,CAACU,IAAxC;AAA8CC,YAAAA,IAAI,EAAEX,OAAO,CAACW;AAA5D,WAA9B;AACD;AACF,OALD;AAMAV,MAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ;AACAC,MAAAA,WAAW,CAACD,QAAQ,IAAI;AAEtB,eAAOA,QAAP;AACD,OAHU,CAAX;AAID,KAfD;;AAiBAD,IAAAA,MAAM,CAACoB,EAAP,CAAU,iBAAV,EAA6Bb,UAA7B;AAEA,WAAO,MAAMP,MAAM,CAACqB,GAAP,CAAW,iBAAX,EAA8Bd,UAA9B,CAAb;AACD,GAvBQ,EAuBN,CAACP,MAAD,CAvBM,CAAT;;AAyBA,WAASsB,oBAAT,CAA8BV,OAA9B,EAAuCO,IAAvC,EAA6CI,MAA7C,EAAqDC,UAArD,EAAiE;AAE/D;AACA,QAAIC,UAAU,GAAGF,MAAjB,CAH+D,CAI/D;;AACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,UAAU,CAACxB,QAAX,CAAoB0B,MAAxC,EAAgDD,CAAC,EAAjD,EAAqD;AACnD;AACA,UAAID,UAAU,CAACxB,QAAX,CAAoByB,CAApB,EAAuB5B,EAAvB,KAA8Bc,OAAO,CAACd,EAA1C,EAA8C;AAC5C;AACA2B,QAAAA,UAAU,CAACxB,QAAX,CAAoByB,CAApB,EAAuBX,QAAvB,CAAgCC,IAAhC,CAAqC;AACnCC,UAAAA,MAAM,EAAEM,MAAM,CAACzB,EADoB;AAEnCoB,UAAAA,IAAI,EAAE,IAAIU,IAAJ,EAF6B;AAGnCT,UAAAA,IAAI,EAAEA;AAH6B,SAArC,EAF4C,CAO5C;;AACA1B,QAAAA,GAAG,CAACoC,cAAJ,CAAmBJ,UAAU,CAAC3B,EAA9B,EAAkC;AAAEgC,UAAAA,IAAI,EAAE;AAAE7B,YAAAA,QAAQ,EAAEwB,UAAU,CAACxB;AAAvB;AAAR,SAAlC,EAA+E8B,IAA/E,CAAoFC,GAAG,IAAI,CAAG,CAA9F;AACD;AACF,KAjB8D,CAmB/D;;;AACAR,IAAAA,UAAU,CAACb,OAAX,CAAmBsB,SAAS,IAAI;AAC9B;AACA,UAAIC,aAAa,GAAGD,SAApB,CAF8B,CAG9B;;AACA,WAAK,IAAIP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGQ,aAAa,CAACjC,QAAd,CAAuB0B,MAA3C,EAAmDD,CAAC,EAApD,EAAwD;AACtD;AACA,YAAIQ,aAAa,CAACjC,QAAd,CAAuByB,CAAvB,EAA0B5B,EAA1B,KAAiCc,OAAO,CAACd,EAA7C,EAAiD;AAC/C;AACAoC,UAAAA,aAAa,CAACjC,QAAd,CAAuByB,CAAvB,EAA0BX,QAA1B,CAAmCC,IAAnC,CAAwC;AACtCC,YAAAA,MAAM,EAAEM,MAAM,CAACzB,EADuB;AAEtCoB,YAAAA,IAAI,EAAE,IAAIU,IAAJ,EAFgC;AAGtCT,YAAAA,IAAI,EAAEA;AAHgC,WAAxC,EAF+C,CAO/C;;AACA1B,UAAAA,GAAG,CAACoC,cAAJ,CAAmBK,aAAa,CAACpC,EAAjC,EAAqC;AAAEgC,YAAAA,IAAI,EAAE;AAAE7B,cAAAA,QAAQ,EAAEiC,aAAa,CAACjC;AAA1B;AAAR,WAArC,EAAqF8B,IAArF,CAA0FC,GAAG,IAAI,CAAG,CAApG;AACD;AACF;AACF,KAjBD;AAkBD;;AAED,WAASG,WAAT,CAAqBvB,OAArB,EAA8BO,IAA9B,EAAoCI,MAApC,EAA4CC,UAA5C,EAAwD;AACtDxB,IAAAA,MAAM,CAACoC,IAAP,CAAY,cAAZ,EAA4B;AAAEtB,MAAAA,SAAS,EAAEF,OAAO,CAACd,EAArB;AAAyB0B,MAAAA,UAAzB;AAAqCN,MAAAA,IAAI,EAAE,IAAIU,IAAJ,EAA3C;AAAuDT,MAAAA;AAAvD,KAA5B;AAEAG,IAAAA,oBAAoB,CAACV,OAAD,EAAUO,IAAV,EAAgBI,MAAhB,EAAwBC,UAAxB,CAApB;AACD;;AAED,QAAMa,KAAK,GAAG;AACZpC,IAAAA,QADY;AAEZC,IAAAA,WAFY;AAGZC,IAAAA,eAHY;AAIZC,IAAAA,kBAJY;AAKZ+B,IAAAA;AALY,GAAd;AAQA,sBACE,oBAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAEE,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGtC,QADH,CADF;AAKD;AAED,eAAeL,eAAf;AAEA","sourcesContent":["import React, { useContext, useState, useEffect, useRef } from 'react'\nimport { useSocket } from './SocketProvider';\nimport api from \"../api\"\n\nconst ChannelsContext = React.createContext()\n\nexport function useChannels() {\n  return useContext(ChannelsContext)\n}\n\nexport function ChannelsProvider({ id, children }) {\n  const socket = useSocket()\n  const [channels, setChannels] = useState(null)\n  const [selectedChannel, setSelectedChannel] = useState(null)\n\n  // https://stackoverflow.com/questions/54824036/useeffect-hook-with-socket-io-state-is-not-persistent-in-socket-handlers\n  const channelsRef = useRef(channels);\n  useEffect(() => {\n    // This effect executes on every render (no dependency array specified).\n    // Any change to the \"channels\" state will trigger a re-render\n    // which will then cause this effect to capture the current \"channels\"\n    // value in \"channelsRef.current\".\n    channelsRef.current = channels;\n  });\n\n  useEffect(() => {\n    if (socket == null) return\n\n    const addMessage = (message) => {\n      console.log(message)\n      console.log(\"test\")\n\n      channels.forEach((channel, index) => {\n\n        if (channel.id === message.channelId) {\n          channels[index].messages.push({ sender: message.sender, date: message.date, text: message.text })\n        }\n      })\n      console.log(channels)\n      setChannels(channels => {\n\n        return channels\n      })\n    }\n\n    socket.on('receive-message', addMessage);\n\n    return () => socket.off('receive-message', addMessage)\n  }, [socket])\n\n  function addMessageToDatabase(channel, text, client, recipients) {\n\n    // J'isole les données du client dans une variable pour pouvoir les modifier\n    var clientEdit = client\n    // Je boucle tous les \"channels\" du client\n    for (let i = 0; i < clientEdit.channels.length; i++) {\n      // Je teste si l'id du \"channel\" sélectionné correspond à l'id du \"channel\" passé dans la boucle\n      if (clientEdit.channels[i].id === channel.id) {\n        // J'ajoute le message aux données du client\n        clientEdit.channels[i].messages.push({\n          sender: client.id,\n          date: new Date(),\n          text: text\n        })\n        // Je mets à jour le client\n        api.updateUserById(clientEdit.id, { data: { channels: clientEdit.channels } }).then(res => { })\n      }\n    }\n\n    // Je boucle tous les destinataires\n    recipients.forEach(recipient => {\n      // J'isole les données du destinataire dans une variable pour pouvoir les modifier\n      var recipientEdit = recipient\n      // Je boucle tous les \"channels\" du destinataire\n      for (let i = 0; i < recipientEdit.channels.length; i++) {\n        // Je teste si l'id du \"channel\" sélectionné correspond à l'id du \"channel\" passé dans la boucle\n        if (recipientEdit.channels[i].id === channel.id) {\n          // J'ajoute le message aux données du destinataire\n          recipientEdit.channels[i].messages.push({\n            sender: client.id,\n            date: new Date(),\n            text: text\n          })\n          // Je mets à jour le destinataire\n          api.updateUserById(recipientEdit.id, { data: { channels: recipientEdit.channels } }).then(res => { })\n        }\n      }\n    });\n  }\n\n  function sendMessage(channel, text, client, recipients) {\n    socket.emit('send-message', { channelId: channel.id, recipients, date: new Date(), text })\n\n    addMessageToDatabase(channel, text, client, recipients)\n  }\n\n  const value = {\n    channels,\n    setChannels,\n    selectedChannel,\n    setSelectedChannel,\n    sendMessage\n  }\n\n  return (\n    <ChannelsContext.Provider value={value}>\n      {children}\n    </ChannelsContext.Provider>\n  )\n}\n\nexport default ChannelsContext\n\n/*\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false\n\n  a.sort()\n  b.sort()\n\n  return a.every((element, index) => {\n    return element === b[index]\n  })\n}\n\nconst addMessageToChannel = useCallback(({ recipients, text, sender }) => {\n  setChannels(prevChannels => {\n    let madeChange = false\n    const newMessage = { sender, text }\n    const newChannels = prevChannels.map(channel => {\n      if (arrayEquality(channel.recipients, recipients)) {\n        madeChange = true\n        return {\n          ...channel,\n          messages: [...channel.messages, newMessage]\n        }\n      }\n\n      return channel\n    })\n\n    if (madeChange) {\n      return newChannels\n    } else {\n      return [\n        ...prevChannels,\n        { recipients, messages: [newMessage] }\n      ]\n    }\n  })\n}, [])*/"]},"metadata":{},"sourceType":"module"}