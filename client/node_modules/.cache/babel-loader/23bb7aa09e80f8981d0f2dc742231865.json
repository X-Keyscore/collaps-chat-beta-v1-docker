{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anton\\\\Desktop\\\\collaps-chat\\\\dev\\\\Beta\\\\V1\\\\client\\\\src\\\\components\\\\sidebar\\\\NewContact.js\";\nimport React, { useState } from 'react';\nimport api from \"../../api\";\nimport { useUser } from '../../contexts/UserProvider';\nimport { useChannels } from '../../contexts/ChannelsProvider';\n\nfunction NewContact({\n  isShowing,\n  hide,\n  localStorage\n}) {\n  const {\n    client,\n    updateUser\n  } = useUser();\n  const {\n    channels,\n    createChannel,\n    setChannels,\n    setSelectedChannel\n  } = useChannels();\n  console.log(client); // Création d'un \"useState\" pour stocker l'id\n\n  const [id, setId] = useState({\n    value: \"\",\n    warning: \"\"\n  });\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    const recipientId = id.value; // Je teste si la valeur est bien celle d'un id\n\n    if (idRecipient.length === 0) return setId({\n      value: \"\",\n      warning: \"Il faut entrer un id\"\n    }); // Je teste si la valeur est bien celle d'un id\n\n    if (idRecipient.length !== 18 && !/^[0-9]*$/.test(idRecipient)) return setId({\n      value: \"\",\n      warning: \"Ceci n'est pas un id valide\"\n    }); // Je test si l'id n'est pas celui du client\n\n    if (idRecipient === client.id) return setId({\n      value: \"\",\n      warning: \"Tu ne peux pas t'ajouter\"\n    }); // Je test si le contact n'est pas déjà ajouter\n\n    var valid = true;\n    client.channels.filter(channel => channel.type === \"private\").forEach(channel => {\n      if (channel.id === idRecipient) valid = false;\n    });\n    if (valid === false) return setId({\n      value: \"\",\n      warning: \"Ce contact existe déjà\"\n    });\n    const newChannel = {\n      id: (Math.floor(Math.random() * 10000000000000000) + 99999999999999999).toString(),\n      type: \"private\",\n      recipients: [client.id, idRecipient],\n      messages: []\n    }; // Créaction du channel\n\n    const res = await createChannel({\n      client: {\n        id: localStorage.id,\n        token: localStorage.token\n      },\n      recipient: {\n        id: idRecipient\n      },\n      channel: newChannel\n    });\n    if (res.status.success === false) return setId({\n      value: \"\",\n      warning: res.status.msg\n    });\n    setChannels(channels => [...channels, newChannel]);\n    var newChanForSelect = newChannel;\n    newChanForSelect.push({\n      id: idChannel,\n      type: \"private\"\n    });\n    /*\r\n    \t\tsetSelectedChannel({\r\n    \t\t\tid: idChannel,\r\n    \t\t\ttype: \"private\",\r\n    \t\t\trecipients: [{\r\n    \t\t\t\tid: recipient.id,\r\n    \t\t\t\tpseudo: recipient.pseudo\r\n    \t\t\t}],\r\n    \t\t\tmessages: [],\r\n    \t\t\tselected: true,\r\n    \t\t\tkey: channels.length === 0 ? 0 : channels.length - 1\r\n    \t\t})\r\n    \r\n    \t\tvar clientChannels = client.channels\r\n    \t\tclientChannels.push({ id: idChannel, type: \"private\" })\r\n    \r\n    \t\tvar recipientChannels = recipient.channels\r\n    \t\trecipientChannels.push({ id: idChannel, type: \"private\" })\r\n    \r\n    \t\t// Mise à jour du client\r\n    \t\tupdateUser(client.id, { channels: clientChannels })\r\n    \r\n    \t\t// Mise à jour du destinataire\r\n    \t\tupdateUser(recipient.id, { channels: recipientChannels })\r\n    \t\t*/\n\n    setId({\n      value: \"\",\n      warning: \"\"\n    });\n    hide();\n  }\n\n  return isShowing ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"form\", {\n    className: \"createChannelPrivate\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"createChannelPrivate-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, \"Ajouter un contact\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"createChannelPrivate-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 6\n    }\n  }, id.warning ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"title-warning\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 21\n    }\n  }, id.warning, \" \") : null, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"input\",\n    type: \"text\",\n    placeholder: \"Id\",\n    value: id.value,\n    onChange: e => setId({\n      value: e.target.value,\n      warning: \"\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"createChannelPrivate-footer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn-text-small\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, \"Ajouter\")))) : null;\n}\n\nexport default NewContact;","map":{"version":3,"sources":["C:/Users/anton/Desktop/collaps-chat/dev/Beta/V1/client/src/components/sidebar/NewContact.js"],"names":["React","useState","api","useUser","useChannels","NewContact","isShowing","hide","localStorage","client","updateUser","channels","createChannel","setChannels","setSelectedChannel","console","log","id","setId","value","warning","handleSubmit","e","preventDefault","recipientId","idRecipient","length","test","valid","filter","channel","type","forEach","newChannel","Math","floor","random","toString","recipients","messages","res","token","recipient","status","success","msg","newChanForSelect","push","idChannel","target"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport api from \"../../api\"\r\nimport { useUser } from '../../contexts/UserProvider';\r\nimport { useChannels } from '../../contexts/ChannelsProvider';\r\n\r\nfunction NewContact({ isShowing, hide, localStorage }) {\r\n\tconst { client, updateUser } = useUser()\r\n\tconst { channels, createChannel, setChannels, setSelectedChannel } = useChannels()\r\n\r\n\tconsole.log(client)\r\n\t// Création d'un \"useState\" pour stocker l'id\r\n\tconst [id, setId] = useState({\r\n\t\tvalue: \"\",\r\n\t\twarning: \"\"\r\n\t})\r\n\r\n\tasync function handleSubmit(e) {\r\n\t\te.preventDefault()\r\n\r\n\t\tconst recipientId = id.value\r\n\t\t// Je teste si la valeur est bien celle d'un id\r\n\t\tif (idRecipient.length === 0) return setId({\r\n\t\t\tvalue: \"\",\r\n\t\t\twarning: \"Il faut entrer un id\"\r\n\t\t})\r\n\r\n\t\t// Je teste si la valeur est bien celle d'un id\r\n\t\tif (idRecipient.length !== 18 && !/^[0-9]*$/.test(idRecipient)) return setId({\r\n\t\t\tvalue: \"\",\r\n\t\t\twarning: \"Ceci n'est pas un id valide\"\r\n\t\t})\r\n\r\n\t\t// Je test si l'id n'est pas celui du client\r\n\t\tif (idRecipient === client.id) return setId({\r\n\t\t\tvalue: \"\",\r\n\t\t\twarning: \"Tu ne peux pas t'ajouter\"\r\n\t\t})\r\n\r\n\t\t// Je test si le contact n'est pas déjà ajouter\r\n\t\tvar valid = true;\r\n\t\tclient.channels.filter(channel => channel.type === \"private\").forEach(channel => {\r\n\t\t\tif (channel.id === idRecipient) valid = false;\r\n\t\t});\r\n\t\tif (valid === false) return setId({\r\n\t\t\tvalue: \"\",\r\n\t\t\twarning: \"Ce contact existe déjà\"\r\n\t\t});\r\n\r\n\t\tconst newChannel = {\r\n\t\t\tid: (Math.floor(Math.random() * 10000000000000000) + 99999999999999999).toString(),\r\n\t\t\ttype: \"private\",\r\n\t\t\trecipients: [client.id, idRecipient],\r\n\t\t\tmessages: []\r\n\t\t}\r\n\r\n\t\t// Créaction du channel\r\n\t\tconst res = await createChannel({\r\n\t\t\tclient: {\r\n\t\t\t\tid: localStorage.id,\r\n\t\t\t\ttoken: localStorage.token\r\n\t\t\t},\r\n\t\t\trecipient: {\r\n\t\t\t\tid: idRecipient\r\n\t\t\t},\r\n\t\t\tchannel: newChannel\r\n\t\t})\r\n\r\n\t\tif (res.status.success === false) return setId({\r\n\t\t\tvalue: \"\",\r\n\t\t\twarning: res.status.msg\r\n\t\t});\r\n\r\n\t\tsetChannels(channels => [...channels, newChannel ]);\r\n\r\n\t\tvar newChanForSelect = newChannel\r\n\t\tnewChanForSelect.push({ id: idChannel, type: \"private\" })\r\n/*\r\n\t\tsetSelectedChannel({\r\n\t\t\tid: idChannel,\r\n\t\t\ttype: \"private\",\r\n\t\t\trecipients: [{\r\n\t\t\t\tid: recipient.id,\r\n\t\t\t\tpseudo: recipient.pseudo\r\n\t\t\t}],\r\n\t\t\tmessages: [],\r\n\t\t\tselected: true,\r\n\t\t\tkey: channels.length === 0 ? 0 : channels.length - 1\r\n\t\t})\r\n\r\n\t\tvar clientChannels = client.channels\r\n\t\tclientChannels.push({ id: idChannel, type: \"private\" })\r\n\r\n\t\tvar recipientChannels = recipient.channels\r\n\t\trecipientChannels.push({ id: idChannel, type: \"private\" })\r\n\r\n\t\t// Mise à jour du client\r\n\t\tupdateUser(client.id, { channels: clientChannels })\r\n\r\n\t\t// Mise à jour du destinataire\r\n\t\tupdateUser(recipient.id, { channels: recipientChannels })\r\n\t\t*/\r\n\r\n\t\tsetId({\r\n\t\t\tvalue: \"\",\r\n\t\t\twarning: \"\"\r\n\t\t})\r\n\t\thide()\r\n\r\n\t}\r\n\r\n\treturn (\r\n\t\tisShowing\r\n\t\t\t?\r\n\t\t\t<>\r\n\t\t\t\t<form className=\"createChannelPrivate\" onSubmit={handleSubmit}>\r\n\t\t\t\t\t<div className=\"createChannelPrivate-header\">\r\n\t\t\t\t\t\t<div className=\"title\">Ajouter un contact</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"createChannelPrivate-body\">\r\n\t\t\t\t\t\t{id.warning ? <div className=\"title-warning\">{id.warning} </div> : null}\r\n\t\t\t\t\t\t<input className=\"input\" type=\"text\" placeholder=\"Id\"\r\n\t\t\t\t\t\t\tvalue={id.value}\r\n\t\t\t\t\t\t\tonChange={e => setId({\r\n\t\t\t\t\t\t\t\tvalue: e.target.value,\r\n\t\t\t\t\t\t\t\twarning: \"\"\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"createChannelPrivate-footer\">\r\n\t\t\t\t\t\t<button className=\"btn-text-small\" type=\"submit\">Ajouter</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</form>\r\n\t\t\t</>\r\n\t\t\t: null\r\n\t)\r\n}\r\nexport default NewContact;"]},"metadata":{},"sourceType":"module"}