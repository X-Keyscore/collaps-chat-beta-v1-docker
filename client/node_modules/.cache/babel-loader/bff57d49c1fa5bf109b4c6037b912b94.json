{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anton\\\\Desktop\\\\FInt.Tchat\\\\dev\\\\V9\\\\client\\\\src\\\\contexts\\\\ChannelsProvider.js\";\nimport React, { useContext, useState, useEffect, useCallback } from 'react';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\nimport { useSocket } from './SocketProvider';\nimport { useUser } from './UserProvider';\nconst ChannelsContext = React.createContext();\nexport function useChannels() {\n  return useContext(ChannelsContext);\n}\nexport function ChannelsProvider({\n  id,\n  children\n}) {\n  // Récupération des information du client\n  const {\n    user,\n    loading\n  } = useUser();\n\n  if (loading == false) {\n    console.log(loading);\n    const [channels, setChannels] = useLocalStorage('conversations', []);\n    const [selectedChannelId, setSelectedChannelId] = useState(loading == false ? user.conversations[0].id : \"r\");\n    const {\n      contacts\n    } = useContacts();\n    const socket = useSocket();\n\n    function createChannel(recipients) {\n      setChannels(prevChannels => {\n        // Création d'un id pour le canal\n        const id = Math.floor(Math.random() * 10000000000000000) + 99999999999999999; // Et je le sélectionne\n\n        setSelectedChannelId(id); // Pour finir je crée le nouveau canal\n\n        return [...prevChannels, {\n          id: id,\n          recipients,\n          messages: []\n        }];\n      });\n    }\n\n    const addMessageToChannel = useCallback(({\n      recipients,\n      text,\n      sender\n    }) => {\n      setChannels(prevChannels => {\n        let madeChange = false;\n        const newMessage = {\n          sender,\n          text\n        };\n        const newChannels = prevChannels.map(channel => {\n          if (arrayEquality(channel.recipients, recipients)) {\n            madeChange = true;\n            return { ...channel,\n              messages: [...channel.messages, newMessage]\n            };\n          }\n\n          return channel;\n        });\n\n        if (madeChange) {\n          return newChannels;\n        } else {\n          return [...prevChannels, {\n            recipients,\n            messages: [newMessage]\n          }];\n        }\n      });\n    }, [setChannels]);\n    useEffect(() => {\n      if (socket == null) return;\n      socket.on('receive-message', addMessageToChannel);\n      return () => socket.off('receive-message');\n    }, [socket, addMessageToChannel]);\n\n    function sendMessage(recipients, text) {\n      socket.emit('send-message', {\n        recipients,\n        text\n      });\n      addMessageToChannel({\n        recipients,\n        text,\n        sender: id\n      });\n    }\n\n    const formattedChannels = channels.map(channel => {\n      const recipients = channel.recipients.map(recipient => {\n        const contact = contacts.find(contact => {\n          return contact.id === recipient;\n        });\n        const name = contact && contact.name || recipient;\n        return {\n          id: recipient,\n          name\n        };\n      });\n      const messages = channel.messages.map(message => {\n        const contact = contacts.find(contact => {\n          return contact.id === message.sender;\n        });\n        const name = contact && contact.name || message.sender;\n        const fromMe = id === message.sender;\n        return { ...message,\n          senderName: name,\n          fromMe\n        };\n      });\n      const selected = channel.id === selectedChannelId;\n      return { ...channel,\n        messages,\n        recipients,\n        selected\n      };\n    });\n    const value = {\n      channels: formattedChannels,\n      selectedChannel: formattedChannels.filter(channel => channel.id === selectedChannelId)[0],\n      sendMessage,\n      selectChannelId: setSelectedChannelId,\n      createChannel\n    };\n    return /*#__PURE__*/React.createElement(ChannelsContext.Provider, {\n      value: value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 5\n      }\n    }, children);\n  } else {\n    return /*#__PURE__*/React.createElement(ChannelsContext.Provider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 7\n      }\n    }, children);\n  }\n}\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false;\n  a.sort();\n  b.sort();\n  return a.every((element, index) => {\n    return element === b[index];\n  });\n}\n\nexport default ChannelsContext;","map":{"version":3,"sources":["C:/Users/anton/Desktop/FInt.Tchat/dev/V9/client/src/contexts/ChannelsProvider.js"],"names":["React","useContext","useState","useEffect","useCallback","useLocalStorage","useContacts","useSocket","useUser","ChannelsContext","createContext","useChannels","ChannelsProvider","id","children","user","loading","console","log","channels","setChannels","selectedChannelId","setSelectedChannelId","conversations","contacts","socket","createChannel","recipients","prevChannels","Math","floor","random","messages","addMessageToChannel","text","sender","madeChange","newMessage","newChannels","map","channel","arrayEquality","on","off","sendMessage","emit","formattedChannels","recipient","contact","find","name","message","fromMe","senderName","selected","value","selectedChannel","filter","selectChannelId","a","b","length","sort","every","element","index"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,SAAtC,EAAiDC,WAAjD,QAAoE,OAApE;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,OAAT,QAAwB,gBAAxB;AAEA,MAAMC,eAAe,GAAGT,KAAK,CAACU,aAAN,EAAxB;AAEA,OAAO,SAASC,WAAT,GAAuB;AAC5B,SAAOV,UAAU,CAACQ,eAAD,CAAjB;AACD;AAED,OAAO,SAASG,gBAAT,CAA0B;AAAEC,EAAAA,EAAF;AAAMC,EAAAA;AAAN,CAA1B,EAA4C;AAGjD;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBR,OAAO,EAAjC;;AACA,MAAIQ,OAAO,IAAI,KAAf,EAAsB;AACtBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACA,UAAM,CAACG,QAAD,EAAWC,WAAX,IAA0Bf,eAAe,CAAC,eAAD,EAAkB,EAAlB,CAA/C;AACA,UAAM,CAACgB,iBAAD,EAAoBC,oBAApB,IAA4CpB,QAAQ,CAACc,OAAO,IAAI,KAAX,GAAmBD,IAAI,CAACQ,aAAL,CAAmB,CAAnB,EAAsBV,EAAzC,GAA8C,GAA/C,CAA1D;AAIA,UAAM;AAAEW,MAAAA;AAAF,QAAelB,WAAW,EAAhC;AACA,UAAMmB,MAAM,GAAGlB,SAAS,EAAxB;;AAEA,aAASmB,aAAT,CAAuBC,UAAvB,EAAmC;AACjCP,MAAAA,WAAW,CAACQ,YAAY,IAAI;AAC1B;AACA,cAAMf,EAAE,GAAGgB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,iBAA3B,IAAgD,iBAA3D,CAF0B,CAG1B;;AACAT,QAAAA,oBAAoB,CAACT,EAAD,CAApB,CAJ0B,CAM1B;;AACA,eAAO,CAAC,GAAGe,YAAJ,EAAkB;AAAEf,UAAAA,EAAE,EAAEA,EAAN;AAAUc,UAAAA,UAAV;AAAsBK,UAAAA,QAAQ,EAAE;AAAhC,SAAlB,CAAP;AACD,OARU,CAAX;AASD;;AAED,UAAMC,mBAAmB,GAAG7B,WAAW,CAAC,CAAC;AAAEuB,MAAAA,UAAF;AAAcO,MAAAA,IAAd;AAAoBC,MAAAA;AAApB,KAAD,KAAkC;AACxEf,MAAAA,WAAW,CAACQ,YAAY,IAAI;AAC1B,YAAIQ,UAAU,GAAG,KAAjB;AACA,cAAMC,UAAU,GAAG;AAAEF,UAAAA,MAAF;AAAUD,UAAAA;AAAV,SAAnB;AACA,cAAMI,WAAW,GAAGV,YAAY,CAACW,GAAb,CAAiBC,OAAO,IAAI;AAC9C,cAAIC,aAAa,CAACD,OAAO,CAACb,UAAT,EAAqBA,UAArB,CAAjB,EAAmD;AACjDS,YAAAA,UAAU,GAAG,IAAb;AACA,mBAAO,EACL,GAAGI,OADE;AAELR,cAAAA,QAAQ,EAAE,CAAC,GAAGQ,OAAO,CAACR,QAAZ,EAAsBK,UAAtB;AAFL,aAAP;AAID;;AAED,iBAAOG,OAAP;AACD,SAVmB,CAApB;;AAYA,YAAIJ,UAAJ,EAAgB;AACd,iBAAOE,WAAP;AACD,SAFD,MAEO;AACL,iBAAO,CACL,GAAGV,YADE,EAEL;AAAED,YAAAA,UAAF;AAAcK,YAAAA,QAAQ,EAAE,CAACK,UAAD;AAAxB,WAFK,CAAP;AAID;AACF,OAvBU,CAAX;AAwBD,KAzBsC,EAyBpC,CAACjB,WAAD,CAzBoC,CAAvC;AA2BAjB,IAAAA,SAAS,CAAC,MAAM;AACd,UAAIsB,MAAM,IAAI,IAAd,EAAoB;AAEpBA,MAAAA,MAAM,CAACiB,EAAP,CAAU,iBAAV,EAA6BT,mBAA7B;AAEA,aAAO,MAAMR,MAAM,CAACkB,GAAP,CAAW,iBAAX,CAAb;AACD,KANQ,EAMN,CAAClB,MAAD,EAASQ,mBAAT,CANM,CAAT;;AAQA,aAASW,WAAT,CAAqBjB,UAArB,EAAiCO,IAAjC,EAAuC;AACrCT,MAAAA,MAAM,CAACoB,IAAP,CAAY,cAAZ,EAA4B;AAAElB,QAAAA,UAAF;AAAcO,QAAAA;AAAd,OAA5B;AAEAD,MAAAA,mBAAmB,CAAC;AAAEN,QAAAA,UAAF;AAAcO,QAAAA,IAAd;AAAoBC,QAAAA,MAAM,EAAEtB;AAA5B,OAAD,CAAnB;AACD;;AAED,UAAMiC,iBAAiB,GAAG3B,QAAQ,CAACoB,GAAT,CAAcC,OAAD,IAAa;AAElD,YAAMb,UAAU,GAAGa,OAAO,CAACb,UAAR,CAAmBY,GAAnB,CAAuBQ,SAAS,IAAI;AACrD,cAAMC,OAAO,GAAGxB,QAAQ,CAACyB,IAAT,CAAcD,OAAO,IAAI;AACvC,iBAAOA,OAAO,CAACnC,EAAR,KAAekC,SAAtB;AACD,SAFe,CAAhB;AAGA,cAAMG,IAAI,GAAIF,OAAO,IAAIA,OAAO,CAACE,IAApB,IAA6BH,SAA1C;AACA,eAAO;AAAElC,UAAAA,EAAE,EAAEkC,SAAN;AAAiBG,UAAAA;AAAjB,SAAP;AACD,OANkB,CAAnB;AAQA,YAAMlB,QAAQ,GAAGQ,OAAO,CAACR,QAAR,CAAiBO,GAAjB,CAAqBY,OAAO,IAAI;AAC/C,cAAMH,OAAO,GAAGxB,QAAQ,CAACyB,IAAT,CAAcD,OAAO,IAAI;AACvC,iBAAOA,OAAO,CAACnC,EAAR,KAAesC,OAAO,CAAChB,MAA9B;AACD,SAFe,CAAhB;AAGA,cAAMe,IAAI,GAAIF,OAAO,IAAIA,OAAO,CAACE,IAApB,IAA6BC,OAAO,CAAChB,MAAlD;AACA,cAAMiB,MAAM,GAAGvC,EAAE,KAAKsC,OAAO,CAAChB,MAA9B;AACA,eAAO,EAAE,GAAGgB,OAAL;AAAcE,UAAAA,UAAU,EAAEH,IAA1B;AAAgCE,UAAAA;AAAhC,SAAP;AACD,OAPgB,CAAjB;AASA,YAAME,QAAQ,GAAGd,OAAO,CAAC3B,EAAR,KAAeQ,iBAAhC;AACA,aAAO,EAAE,GAAGmB,OAAL;AAAcR,QAAAA,QAAd;AAAwBL,QAAAA,UAAxB;AAAoC2B,QAAAA;AAApC,OAAP;AACD,KArByB,CAA1B;AAuBA,UAAMC,KAAK,GAAG;AACZpC,MAAAA,QAAQ,EAAE2B,iBADE;AAEZU,MAAAA,eAAe,EAAEV,iBAAiB,CAACW,MAAlB,CAAyBjB,OAAO,IAAIA,OAAO,CAAC3B,EAAR,KAAeQ,iBAAnD,EAAsE,CAAtE,CAFL;AAGZuB,MAAAA,WAHY;AAIZc,MAAAA,eAAe,EAAEpC,oBAJL;AAKZI,MAAAA;AALY,KAAd;AAQA,wBACE,oBAAC,eAAD,CAAiB,QAAjB;AAA0B,MAAA,KAAK,EAAE6B,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGzC,QADH,CADF;AAKC,GAnGD,MAmGO;AACL,wBACE,oBAAC,eAAD,CAAiB,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,QADH,CADF;AAKD;AACF;;AAED,SAAS2B,aAAT,CAAuBkB,CAAvB,EAA0BC,CAA1B,EAA6B;AAC3B,MAAID,CAAC,CAACE,MAAF,KAAaD,CAAC,CAACC,MAAnB,EAA2B,OAAO,KAAP;AAE3BF,EAAAA,CAAC,CAACG,IAAF;AACAF,EAAAA,CAAC,CAACE,IAAF;AAEA,SAAOH,CAAC,CAACI,KAAF,CAAQ,CAACC,OAAD,EAAUC,KAAV,KAAoB;AACjC,WAAOD,OAAO,KAAKJ,CAAC,CAACK,KAAD,CAApB;AACD,GAFM,CAAP;AAGD;;AAED,eAAexD,eAAf","sourcesContent":["import React, { useContext, useState, useEffect, useCallback } from 'react'\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\nimport { useSocket } from './SocketProvider';\nimport { useUser } from './UserProvider';\n\nconst ChannelsContext = React.createContext()\n\nexport function useChannels() {\n  return useContext(ChannelsContext)\n}\n\nexport function ChannelsProvider({ id, children }) {\n  \n  \n  // Récupération des information du client\n  const { user, loading } = useUser()\n  if (loading == false) {\n  console.log(loading)\n  const [channels, setChannels] = useLocalStorage('conversations', [])\n  const [selectedChannelId, setSelectedChannelId] = useState(loading == false ? user.conversations[0].id : \"r\")\n\n  \n\n  const { contacts } = useContacts()\n  const socket = useSocket()\n\n  function createChannel(recipients) {\n    setChannels(prevChannels => {\n      // Création d'un id pour le canal\n      const id = Math.floor(Math.random() * 10000000000000000) + 99999999999999999;\n      // Et je le sélectionne\n      setSelectedChannelId(id)\n\n      // Pour finir je crée le nouveau canal\n      return [...prevChannels, { id: id, recipients, messages: [] }]\n    })\n  }\n\n  const addMessageToChannel = useCallback(({ recipients, text, sender }) => {\n    setChannels(prevChannels => {\n      let madeChange = false\n      const newMessage = { sender, text }\n      const newChannels = prevChannels.map(channel => {\n        if (arrayEquality(channel.recipients, recipients)) {\n          madeChange = true\n          return {\n            ...channel,\n            messages: [...channel.messages, newMessage]\n          }\n        }\n\n        return channel\n      })\n\n      if (madeChange) {\n        return newChannels\n      } else {\n        return [\n          ...prevChannels,\n          { recipients, messages: [newMessage] }\n        ]\n      }\n    })\n  }, [setChannels])\n\n  useEffect(() => {\n    if (socket == null) return\n\n    socket.on('receive-message', addMessageToChannel)\n\n    return () => socket.off('receive-message')\n  }, [socket, addMessageToChannel])\n\n  function sendMessage(recipients, text) {\n    socket.emit('send-message', { recipients, text })\n\n    addMessageToChannel({ recipients, text, sender: id })\n  }\n\n  const formattedChannels = channels.map((channel) => {\n\n    const recipients = channel.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.id === recipient\n      })\n      const name = (contact && contact.name) || recipient\n      return { id: recipient, name }\n    })\n\n    const messages = channel.messages.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.id === message.sender\n      })\n      const name = (contact && contact.name) || message.sender\n      const fromMe = id === message.sender\n      return { ...message, senderName: name, fromMe }\n    })\n\n    const selected = channel.id === selectedChannelId\n    return { ...channel, messages, recipients, selected }\n  })\n\n  const value = {\n    channels: formattedChannels,\n    selectedChannel: formattedChannels.filter(channel => channel.id === selectedChannelId)[0],\n    sendMessage,\n    selectChannelId: setSelectedChannelId,\n    createChannel\n  }\n\n  return (\n    <ChannelsContext.Provider value={value}>\n      {children}\n    </ChannelsContext.Provider>\n  )\n  } else {\n    return (\n      <ChannelsContext.Provider>\n        {children}\n      </ChannelsContext.Provider>\n    )\n  }\n}\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false\n\n  a.sort()\n  b.sort()\n\n  return a.every((element, index) => {\n    return element === b[index]\n  })\n}\n\nexport default ChannelsContext"]},"metadata":{},"sourceType":"module"}