{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anton\\\\Desktop\\\\collaps-chat\\\\dev\\\\Beta\\\\V1\\\\client\\\\src\\\\components\\\\App.js\";\nimport React, { useState, useEffect } from 'react';\nimport Connection from './Connection/Connection';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport Dashboard from './Dashboard';\nimport api from '../api';\nimport { ChannelsProvider } from '../contexts/ChannelsProvider';\nimport { SocketProvider } from '../contexts/SocketProvider';\nimport { UserProvider } from '../contexts/UserProvider';\n\nfunction App() {\n  // Fonctions pour utiliser le stockage local pour l'id et le token\n  useEffect(() => {\n    function test() {}\n  }, []); // N’exécute l’effet que si count a changé\n\n  const [id, setId] = useLocalStorage('id');\n  const [token, setToken] = useLocalStorage('token');\n  const [loginValidity, setLoginValidity] = useState(false);\n  const connection = /*#__PURE__*/React.createElement(Connection, {\n    setId: setId,\n    setToken: setToken,\n    setLoginValidity: setLoginValidity,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 22\n    }\n  });\n\n  if (loginValidity) {\n    // Si toutes les informations sont présentes j'affiche le \"Dashboard\"\n    const localStorage = {\n      id,\n      token\n    };\n    return /*#__PURE__*/React.createElement(SocketProvider, {\n      localStorage: localStorage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(UserProvider, {\n      localStorage: localStorage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ChannelsProvider, {\n      localStorage: localStorage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Dashboard, {\n      localStorage: localStorage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }\n    }))));\n  } else if (id === undefined || token === undefined) {\n    // Si l'id ou le token n'est pas présent il faut se connecter pour obtenir ces informations\n    return connection;\n  } else {\n    console.log(\"test\");\n    api.autologinUser({\n      id,\n      token\n    }).then(res => {\n      if (!res.data.status.success) return connection;\n      if (!res.data.status.idValide) return connection;\n      if (!res.data.status.tokenValide) return connection;\n\n      if (!loginValidity) {\n        console.log(res.data);\n        setToken(res.data.user.token);\n        setLoginValidity(true);\n      }\n    });\n  }\n\n  return connection;\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/anton/Desktop/collaps-chat/dev/Beta/V1/client/src/components/App.js"],"names":["React","useState","useEffect","Connection","useLocalStorage","Dashboard","api","ChannelsProvider","SocketProvider","UserProvider","App","test","id","setId","token","setToken","loginValidity","setLoginValidity","connection","localStorage","undefined","console","log","autologinUser","then","res","data","status","success","idValide","tokenValide","user"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,SAASC,cAAT,QAA+B,4BAA/B;AACA,SAASC,YAAT,QAA6B,0BAA7B;;AAEA,SAASC,GAAT,GAAe;AACb;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACd,aAASS,IAAT,GAAgB,CAEf;AACF,GAJQ,EAIN,EAJM,CAAT,CAHa,CAOL;;AAER,QAAM,CAACC,EAAD,EAAKC,KAAL,IAAcT,eAAe,CAAC,IAAD,CAAnC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,eAAe,CAAC,OAAD,CAAzC;AAEA,QAAM,CAACY,aAAD,EAAgBC,gBAAhB,IAAoChB,QAAQ,CAAC,KAAD,CAAlD;AAEA,QAAMiB,UAAU,gBAAG,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAEL,KAAnB;AAA0B,IAAA,QAAQ,EAAEE,QAApC;AAA8C,IAAA,gBAAgB,EAAEE,gBAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAnB;;AAEA,MAAID,aAAJ,EAAmB;AAAC;AAClB,UAAMG,YAAY,GAAG;AAAEP,MAAAA,EAAF;AAAME,MAAAA;AAAN,KAArB;AACA,wBACE,oBAAC,cAAD;AAAgB,MAAA,YAAY,EAAEK,YAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,YAAD;AAAc,MAAA,YAAY,EAAEA,YAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,gBAAD;AAAkB,MAAA,YAAY,EAAEA,YAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,SAAD;AAAW,MAAA,YAAY,EAAEA,YAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CADF,CADF;AASD,GAXD,MAWO,IAAIP,EAAE,KAAKQ,SAAP,IAAoBN,KAAK,KAAKM,SAAlC,EAA6C;AAAC;AACnD,WAAOF,UAAP;AACD,GAFM,MAEA;AACLG,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAhB,IAAAA,GAAG,CAACiB,aAAJ,CAAkB;AAAEX,MAAAA,EAAF;AAAME,MAAAA;AAAN,KAAlB,EAAiCU,IAAjC,CAAsCC,GAAG,IAAI;AAC3C,UAAI,CAACA,GAAG,CAACC,IAAJ,CAASC,MAAT,CAAgBC,OAArB,EAA8B,OAAOV,UAAP;AAC9B,UAAI,CAACO,GAAG,CAACC,IAAJ,CAASC,MAAT,CAAgBE,QAArB,EAA+B,OAAOX,UAAP;AAC/B,UAAI,CAACO,GAAG,CAACC,IAAJ,CAASC,MAAT,CAAgBG,WAArB,EAAkC,OAAOZ,UAAP;;AAElC,UAAI,CAACF,aAAL,EAAoB;AAClBK,QAAAA,OAAO,CAACC,GAAR,CAAYG,GAAG,CAACC,IAAhB;AACAX,QAAAA,QAAQ,CAACU,GAAG,CAACC,IAAJ,CAASK,IAAT,CAAcjB,KAAf,CAAR;AACAG,QAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD;AACF,KAVD;AAWD;;AACC,SAAOC,UAAP;AAGH;;AAED,eAAeR,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Connection from './Connection/Connection'\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport Dashboard from './Dashboard'\nimport api from '../api'\nimport { ChannelsProvider } from '../contexts/ChannelsProvider';\nimport { SocketProvider } from '../contexts/SocketProvider';\nimport { UserProvider } from '../contexts/UserProvider';\n\nfunction App() {\n  // Fonctions pour utiliser le stockage local pour l'id et le token\n\n  useEffect(() => {\n    function test() {\n\n    }\n  }, []); // N’exécute l’effet que si count a changé\n\n  const [id, setId] = useLocalStorage('id')\n  const [token, setToken] = useLocalStorage('token')\n\n  const [loginValidity, setLoginValidity] = useState(false)\n\n  const connection = <Connection setId={setId} setToken={setToken} setLoginValidity={setLoginValidity} />\n\n  if (loginValidity) {// Si toutes les informations sont présentes j'affiche le \"Dashboard\"\n    const localStorage = { id, token }\n    return (\n      <SocketProvider localStorage={localStorage}>\n        <UserProvider localStorage={localStorage}>\n          <ChannelsProvider localStorage={localStorage}>\n            <Dashboard localStorage={localStorage} />\n          </ChannelsProvider>\n        </UserProvider>\n      </SocketProvider>\n    )\n  } else if (id === undefined || token === undefined) {// Si l'id ou le token n'est pas présent il faut se connecter pour obtenir ces informations\n    return connection\n  } else {\n    console.log(\"test\")\n    api.autologinUser({ id, token }).then(res => {\n      if (!res.data.status.success) return connection\n      if (!res.data.status.idValide) return connection\n      if (!res.data.status.tokenValide) return connection\n  \n      if (!loginValidity) {\n        console.log(res.data)\n        setToken(res.data.user.token)\n        setLoginValidity(true)\n      }\n    })\n  }\n    return connection\n\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}