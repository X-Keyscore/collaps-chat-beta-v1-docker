{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anton\\\\Desktop\\\\FInt.Tchat\\\\dev\\\\V10\\\\client\\\\src\\\\contexts\\\\UserProvider.js\";\nimport React, { Component, useContext } from 'react';\nimport api from \"../api\";\nimport SocketContext from './SocketProvider';\nconst UserContext = React.createContext();\nexport function useUser() {\n  return useContext(UserContext);\n}\nexport class UserProvider extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.updateUser = async (id, body) => {\n      const payload = body;\n      await api.updateUserById(id, payload).then(res => {});\n    };\n\n    this.getUser = () => {\n      return new Promise(resolve => {\n        api.getUserById(this.props.id).then(user => {\n          const oldUser = user.data.data;\n          var newUser = user.data.data; // Si le client n'a pas de constact j'envoie directement les données\n\n          if (newUser.channels.length === 0) resolve(newUser); // Je filtre pour récupérer que les contacts privés\n\n          newUser.channels.filter(channel => channel.type === \"private\").forEach((channel, index) => {\n            // j’attent que la fonction soit terminée\n            api.getUserById(channel.recipients.id).then(recipient => {\n              if (recipient.data.data === null) this.updateUser(); // Je complète les informations existantes du destinataire avec celle de la base de données\n\n              channel.recipients = recipient.data.data; // J'ajoute un element \"selected\" à \"channel\" est passe la valeur \"true\" au premier\n\n              Object.assign(channel, {\n                selected: false\n              });\n              Object.assign(channel, {\n                key: index\n              }); // Je mets à jour l'object \"channels\" du client \n\n              newUser.channels[index] = channel;\n              if (oldUser.channels.length === index + 1) resolve(newUser);\n            });\n          });\n        });\n      });\n    };\n\n    this.createUser = () => {};\n\n    this.deleteUser = () => {};\n  }\n\n  render() {\n    const value = {\n      updateUser: this.updateUser,\n      getUser: this.getUser\n    };\n    return /*#__PURE__*/React.createElement(UserContext.Provider, {\n      value: value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 7\n      }\n    }, this.props.children);\n  }\n\n}\nUserProvider.contextType = SocketContext;\nexport default UserContext;","map":{"version":3,"sources":["C:/Users/anton/Desktop/FInt.Tchat/dev/V10/client/src/contexts/UserProvider.js"],"names":["React","Component","useContext","api","SocketContext","UserContext","createContext","useUser","UserProvider","updateUser","id","body","payload","updateUserById","then","res","getUser","Promise","resolve","getUserById","props","user","oldUser","data","newUser","channels","length","filter","channel","type","forEach","index","recipients","recipient","Object","assign","selected","key","createUser","deleteUser","render","value","children","contextType"],"mappings":"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","sourcesContent":["import React, { Component, useContext } from 'react'\r\n\r\nimport api from \"../api\"\r\n\r\nimport SocketContext from './SocketProvider';\r\n\r\nconst UserContext = React.createContext()\r\n\r\nexport function useUser() {\r\n  return useContext(UserContext)\r\n}\r\n\r\nexport class UserProvider extends Component {\r\n  static contextType = SocketContext\r\n\r\n  updateUser = async (id, body) => {\r\n    const payload = body\r\n    await api.updateUserById(id, payload).then(res => {\r\n    })\r\n  }\r\n\r\n  getUser = () => {\r\n    return new Promise((resolve) => {\r\n      api.getUserById(this.props.id).then(\r\n        (user) => {\r\n          const oldUser = user.data.data\r\n          var newUser = user.data.data\r\n          \r\n          // Si le client n'a pas de constact j'envoie directement les données\r\n          if (newUser.channels.length === 0) resolve(newUser)\r\n\r\n          // Je filtre pour récupérer que les contacts privés\r\n          newUser.channels.filter(channel => channel.type === \"private\").forEach((channel, index) => {\r\n\r\n            // j’attent que la fonction soit terminée\r\n            api.getUserById(channel.recipients.id).then((recipient) => {\r\n              \r\n              if (recipient.data.data === null) this.updateUser()\r\n              // Je complète les informations existantes du destinataire avec celle de la base de données\r\n              channel.recipients = recipient.data.data\r\n\r\n              // J'ajoute un element \"selected\" à \"channel\" est passe la valeur \"true\" au premier\r\n              Object.assign(channel, { selected: false })\r\n              Object.assign(channel, { key: index })\r\n\r\n              // Je mets à jour l'object \"channels\" du client \r\n              newUser.channels[index] = channel\r\n\r\n              \r\n              if (oldUser.channels.length === index + 1) resolve(newUser)\r\n\r\n            });\r\n          })\r\n        })\r\n    })\r\n  }\r\n\r\n  createUser = () => {\r\n\r\n  }\r\n\r\n  deleteUser = () => {\r\n\r\n  }\r\n\r\n  render() {\r\n    const value = {\r\n      updateUser: this.updateUser,\r\n      getUser: this.getUser\r\n    }\r\n\r\n    return (\r\n      <UserContext.Provider value={value}>\r\n        {this.props.children}\r\n      </UserContext.Provider>\r\n    )\r\n  }\r\n}\r\n\r\nexport default UserContext"]},"metadata":{},"sourceType":"module"}