{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anton\\\\Desktop\\\\FInt.Tchat\\\\dev\\\\V10\\\\client\\\\src\\\\components\\\\sidebar\\\\ChannelsContacts.js\";\nimport React, { useState, useEffect } from 'react';\nimport api from '../../api';\nimport { useUser } from '../../contexts/UserProvider';\nimport { useChannels } from '../../contexts/ChannelsProvider';\nexport default function ChannelsContacts() {\n  // Création d'un \"useState\" pour stocker les \"channels\" dans une liste\n  const [channels, setChannels] = useState([]); // Récupération des informations du client\n\n  const {\n    user\n  } = useUser(); // Récupération de la fonction pour sélectionner un \"channel\"\n\n  const {\n    setSelectedChannel\n  } = useChannels(); // Je charge les données\n\n  useEffect(() => {\n    var test = []; // Je teste si les données utilisateur sont chargées\n\n    if (user !== null) {\n      // Je teste si tous les contact sont chargés pour evité la boucle infini\n      if (channels.length !== user.channels.length) {\n        // Je filtre pour récupérer que les contacts privés\n        user.channels.filter(channel => channel.type === \"private\").forEach(channel => {\n          var i = -1;\n          i++;\n\n          function getRecipient(id) {\n            // Je rends la fonction async avec une \"Promise\"\n            return new Promise((resolve, reject) => {\n              // Je récupère le destinataire dans la base de données\n              api.getUserById(id).then(recipient => {\n                // Une fois terminer j'envoie le résultat\n                resolve(recipient.data.data);\n              }, error => {\n                console.log(error);\n              });\n            });\n          } // j’attent que la fonction soit terminée\n\n\n          getRecipient(channel.recipients.id).then(recipient => {\n            // Je complète les informations existantes du destinataire avec celle de la base de données\n            channel.recipients = recipient; // J'ajoute un element \"selected\" à \"channel\" est passé la valeur \"true\" au premier\n            //Object.assign(channel, { selected: i === 0 ? true : false })\n\n            Object.assign(channel, {\n              selected: i === 0 ? false : false\n            }); // J'ajoute le channel a la liste des \"channels\"\n            //test.push(channel)\n            //console.log(test)\n            //setChannels([...channels, channel])\n\n            setChannels(channels => {\n              console.log(channels);\n              channels.push(channel);\n              return channels;\n            });\n            console.log(channels); // Je sélection le premier \"channel\"\n            //if (i === 0) setSelectedChannel(channel)\n          });\n        });\n      }\n    }\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, channels.map(channel => /*#__PURE__*/React.createElement(\"button\", {\n    key: channel.id,\n    className: `sidebar-body-contact ${channel.selected ? 'selected' : ''}`,\n    onClick: () => setSelectedChannel(channel),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sidebar-body-contact-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sidebar-body-contact-content-avatar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    width: \"40\",\n    height: \"32\",\n    viewBox: \"0 0 40 32\",\n    \"aria-hidden\": \"true\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"foreignObject\", {\n    x: \"0\",\n    y: \"0\",\n    width: \"32\",\n    height: \"32\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"avatar\",\n    src: \"https://wir.skyrock.net/wir/v1/profilcrop/?c=mog&w=301&h=301&im=%2Fart%2FPRIP.105317501.2.2.jpg\",\n    \"aria-hidden\": \"true\",\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(\"rect\", {\n    className: \"online\",\n    fill: \"currentColor\",\n    width: \"10\",\n    height: \"10\",\n    x: \"22\",\n    y: \"22\",\n    rx: \"15\",\n    ry: \"15\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sidebar-body-contact-content-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"username\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"overflow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }\n  }, channel.recipients.pseudo)))))));\n}","map":{"version":3,"sources":["C:/Users/anton/Desktop/FInt.Tchat/dev/V10/client/src/components/sidebar/ChannelsContacts.js"],"names":["React","useState","useEffect","api","useUser","useChannels","ChannelsContacts","channels","setChannels","user","setSelectedChannel","test","length","filter","channel","type","forEach","i","getRecipient","id","Promise","resolve","reject","getUserById","then","recipient","data","error","console","log","recipients","Object","assign","selected","push","map","pseudo"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAOC,GAAP,MAAgB,WAAhB;AACA,SAASC,OAAT,QAAwB,6BAAxB;AACA,SAASC,WAAT,QAA4B,iCAA5B;AAEA,eAAe,SAASC,gBAAT,GAA4B;AACzC;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,EAAD,CAAxC,CAFyC,CAIzC;;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAWL,OAAO,EAAxB,CALyC,CAMzC;;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAyBL,WAAW,EAA1C,CAPyC,CASzC;;AACAH,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,IAAI,GAAG,EAAX,CADc,CAEd;;AACA,QAAIF,IAAI,KAAK,IAAb,EAAmB;AAEjB;AACA,UAAIF,QAAQ,CAACK,MAAT,KAAoBH,IAAI,CAACF,QAAL,CAAcK,MAAtC,EAA8C;AAE5C;AACAH,QAAAA,IAAI,CAACF,QAAL,CAAcM,MAAd,CAAqBC,OAAO,IAAIA,OAAO,CAACC,IAAR,KAAiB,SAAjD,EAA4DC,OAA5D,CAAoEF,OAAO,IAAI;AAC7E,cAAIG,CAAC,GAAG,CAAC,CAAT;AAAYA,UAAAA,CAAC;;AAEb,mBAASC,YAAT,CAAsBC,EAAtB,EAA0B;AAExB;AACA,mBAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAEtC;AACAnB,cAAAA,GAAG,CAACoB,WAAJ,CAAgBJ,EAAhB,EAAoBK,IAApB,CACGC,SAAD,IAAe;AACb;AACAJ,gBAAAA,OAAO,CAACI,SAAS,CAACC,IAAV,CAAeA,IAAhB,CAAP;AACD,eAJH,EAKGC,KAAD,IAAW;AACTC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,eAPH;AASD,aAZM,CAAP;AAaD,WAnB4E,CAqB7E;;;AACAT,UAAAA,YAAY,CAACJ,OAAO,CAACgB,UAAR,CAAmBX,EAApB,CAAZ,CAAoCK,IAApC,CAA0CC,SAAD,IAAe;AAEtD;AACAX,YAAAA,OAAO,CAACgB,UAAR,GAAqBL,SAArB,CAHsD,CAKtD;AACA;;AACAM,YAAAA,MAAM,CAACC,MAAP,CAAclB,OAAd,EAAuB;AAAEmB,cAAAA,QAAQ,EAAEhB,CAAC,KAAK,CAAN,GAAU,KAAV,GAAkB;AAA9B,aAAvB,EAPsD,CAStD;AACA;AACA;AAEA;;AACAT,YAAAA,WAAW,CAACD,QAAQ,IAAI;AACtBqB,cAAAA,OAAO,CAACC,GAAR,CAAYtB,QAAZ;AACAA,cAAAA,QAAQ,CAAC2B,IAAT,CAAcpB,OAAd;AACA,qBAAOP,QAAP;AACD,aAJU,CAAX;AAMAqB,YAAAA,OAAO,CAACC,GAAR,CAAYtB,QAAZ,EApBsD,CAsBtD;AACA;AAED,WAzBD;AA0BD,SAhDD;AAiDD;AACF;AAEF,GA7DQ,CAAT;AA+DA,sBACE,0CACIA,QAAQ,CAAC4B,GAAT,CAAcrB,OAAD,iBACb;AACE,IAAA,GAAG,EAAEA,OAAO,CAACK,EADf;AAEE,IAAA,SAAS,EAAG,wBAAuBL,OAAO,CAACmB,QAAR,GAAmB,UAAnB,GAAgC,EAAG,EAFxE;AAGE,IAAA,OAAO,EAAE,MAAMvB,kBAAkB,CAACI,OAAD,CAHnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE;AAAK,IAAA,SAAS,EAAC,8BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,qCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAK,IAAA,KAAK,EAAC,IAAX;AAAgB,IAAA,MAAM,EAAC,IAAvB;AAA4B,IAAA,OAAO,EAAC,WAApC;AAAgD,mBAAY,MAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAe,IAAA,CAAC,EAAC,GAAjB;AAAqB,IAAA,CAAC,EAAC,GAAvB;AAA2B,IAAA,KAAK,EAAC,IAAjC;AAAsC,IAAA,MAAM,EAAC,IAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAwB,IAAA,GAAG,EAAC,iGAA5B;AAA8H,mBAAY,MAA1I;AAAiJ,IAAA,GAAG,EAAC,EAArJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,eAIE;AAAM,IAAA,SAAS,EAAC,QAAhB;AAAyB,IAAA,IAAI,EAAC,cAA9B;AAA6C,IAAA,KAAK,EAAC,IAAnD;AAAwD,IAAA,MAAM,EAAC,IAA/D;AAAoE,IAAA,CAAC,EAAC,IAAtE;AAA2E,IAAA,CAAC,EAAC,IAA7E;AAAkF,IAAA,EAAE,EAAC,IAArF;AAA0F,IAAA,EAAE,EAAC,IAA7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CAFF,CADF,eAWE;AAAK,IAAA,SAAS,EAAC,mCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,OAAO,CAACgB,UAAR,CAAmBM,MADtB,CADF,CADF,CAXF,CALF,CADA,CADJ,CADF;AAgCD","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport api from '../../api';\nimport { useUser } from '../../contexts/UserProvider';\nimport { useChannels } from '../../contexts/ChannelsProvider';\n\nexport default function ChannelsContacts() {\n  // Création d'un \"useState\" pour stocker les \"channels\" dans une liste\n  const [channels, setChannels] = useState([]);\n\n  // Récupération des informations du client\n  const { user } = useUser()\n  // Récupération de la fonction pour sélectionner un \"channel\"\n  const { setSelectedChannel } = useChannels()\n\n  // Je charge les données\n  useEffect(() => {\n    var test = []\n    // Je teste si les données utilisateur sont chargées\n    if (user !== null) {\n\n      // Je teste si tous les contact sont chargés pour evité la boucle infini\n      if (channels.length !== user.channels.length) {\n\n        // Je filtre pour récupérer que les contacts privés\n        user.channels.filter(channel => channel.type === \"private\").forEach(channel => {\n          var i = -1; i++;\n\n          function getRecipient(id) {\n\n            // Je rends la fonction async avec une \"Promise\"\n            return new Promise((resolve, reject) => {\n\n              // Je récupère le destinataire dans la base de données\n              api.getUserById(id).then(\n                (recipient) => {\n                  // Une fois terminer j'envoie le résultat\n                  resolve(recipient.data.data)\n                },\n                (error) => {\n                  console.log(error)\n                }\n              )\n            });\n          }\n\n          // j’attent que la fonction soit terminée\n          getRecipient(channel.recipients.id).then((recipient) => {\n\n            // Je complète les informations existantes du destinataire avec celle de la base de données\n            channel.recipients = recipient\n\n            // J'ajoute un element \"selected\" à \"channel\" est passé la valeur \"true\" au premier\n            //Object.assign(channel, { selected: i === 0 ? true : false })\n            Object.assign(channel, { selected: i === 0 ? false : false })\n           \n            // J'ajoute le channel a la liste des \"channels\"\n            //test.push(channel)\n            //console.log(test)\n\n            //setChannels([...channels, channel])\n            setChannels(channels => {\n              console.log(channels)\n              channels.push(channel)\n              return channels\n            })\n\n            console.log(channels)\n\n            // Je sélection le premier \"channel\"\n            //if (i === 0) setSelectedChannel(channel)\n\n          });\n        })\n      }\n    }\n    \n  });\n\n  return (\n    <>\n      { channels.map((channel) => (\n        <button\n          key={channel.id}\n          className={`sidebar-body-contact ${channel.selected ? 'selected' : ''}`}\n          onClick={() => setSelectedChannel(channel)}\n        >\n          <div className=\"sidebar-body-contact-content\">\n            <div className=\"sidebar-body-contact-content-avatar\">\n\n              <svg width=\"40\" height=\"32\" viewBox=\"0 0 40 32\" aria-hidden=\"true\">\n                <foreignObject x=\"0\" y=\"0\" width=\"32\" height=\"32\">\n                  <img className=\"avatar\" src=\"https://wir.skyrock.net/wir/v1/profilcrop/?c=mog&w=301&h=301&im=%2Fart%2FPRIP.105317501.2.2.jpg\" aria-hidden=\"true\" alt=\"\" />\n                </foreignObject>\n                <rect className=\"online\" fill=\"currentColor\" width=\"10\" height=\"10\" x=\"22\" y=\"22\" rx=\"15\" ry=\"15\"></rect>\n              </svg>\n\n            </div>\n            <div className=\"sidebar-body-contact-content-text\">\n              <div className=\"username\">\n                <div className=\"overflow\">\n                  {channel.recipients.pseudo}\n                </div>\n              </div>\n            </div>\n          </div>\n        </button>\n      ))\n      }\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}