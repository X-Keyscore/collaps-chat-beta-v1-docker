{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anton\\\\Desktop\\\\collaps-chat\\\\dev\\\\Beta\\\\V1\\\\client\\\\src\\\\components\\\\App.js\";\nimport React, { useState, useEffect } from 'react';\nimport Connection from './Connection/Connection';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport Dashboard from './Dashboard';\nimport api from '../api';\nimport { ChannelsProvider } from '../contexts/ChannelsProvider';\nimport { SocketProvider } from '../contexts/SocketProvider';\nimport { UserProvider } from '../contexts/UserProvider';\n\nfunction App() {\n  // Fonctions pour utiliser le stockage local pour l'id et le token\n  const [id, setId] = useLocalStorage('id');\n  const [token, setToken] = useLocalStorage('token');\n  const [loginValidity, setloginValidity] = useState(false);\n  const connection = /*#__PURE__*/React.createElement(Connection, {\n    setId: setId,\n    setToken: setToken,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 22\n    }\n  }); // Si l'id ou le token n'est pas présent il faut se connecter pour obtenir ces informations\n\n  if (id === undefined || token === undefined) {\n    return connection;\n  } else {\n    api.autologinUser({\n      id,\n      token\n    }).then(res => {\n      if (!res.data.status.success) return connection;\n      if (!res.data.status.idValide) return connection;\n      if (!res.data.status.tokenValide) return connection;\n\n      if (!loginValidity) {\n        console.log(res.data);\n        setToken(res.data.user.token);\n        setAutoLoginValidity(true);\n      }\n    });\n  } // Le \"useEffect\" est utilisé pour géré l'asynchrone\n  // Si toutes les informations sont présentes j'affiche le \"Dashboard\"\n\n\n  if (lginValidity) {\n    const localStorage = {\n      id,\n      token\n    };\n    return /*#__PURE__*/React.createElement(SocketProvider, {\n      localStorage: localStorage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(UserProvider, {\n      localStorage: localStorage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ChannelsProvider, {\n      localStorage: localStorage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Dashboard, {\n      localStorage: localStorage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }\n    }))));\n  } else {\n    return connection;\n  }\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/anton/Desktop/collaps-chat/dev/Beta/V1/client/src/components/App.js"],"names":["React","useState","useEffect","Connection","useLocalStorage","Dashboard","api","ChannelsProvider","SocketProvider","UserProvider","App","id","setId","token","setToken","loginValidity","setloginValidity","connection","undefined","autologinUser","then","res","data","status","success","idValide","tokenValide","console","log","user","setAutoLoginValidity","lginValidity","localStorage"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,SAASC,cAAT,QAA+B,4BAA/B;AACA,SAASC,YAAT,QAA6B,0BAA7B;;AAEA,SAASC,GAAT,GAAe;AACb;AACA,QAAM,CAACC,EAAD,EAAKC,KAAL,IAAcR,eAAe,CAAC,IAAD,CAAnC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,eAAe,CAAC,OAAD,CAAzC;AAEA,QAAM,CAACW,aAAD,EAAgBC,gBAAhB,IAAoCf,QAAQ,CAAC,KAAD,CAAlD;AAEA,QAAMgB,UAAU,gBAAG,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAEL,KAAnB;AAA0B,IAAA,QAAQ,EAAEE,QAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAnB,CAPa,CASb;;AACA,MAAIH,EAAE,KAAKO,SAAP,IAAoBL,KAAK,KAAKK,SAAlC,EAA6C;AAC3C,WAAOD,UAAP;AACD,GAFD,MAEO;AACLX,IAAAA,GAAG,CAACa,aAAJ,CAAkB;AAAER,MAAAA,EAAF;AAAME,MAAAA;AAAN,KAAlB,EAAiCO,IAAjC,CAAsCC,GAAG,IAAI;AAC3C,UAAI,CAACA,GAAG,CAACC,IAAJ,CAASC,MAAT,CAAgBC,OAArB,EAA8B,OAAOP,UAAP;AAC9B,UAAI,CAACI,GAAG,CAACC,IAAJ,CAASC,MAAT,CAAgBE,QAArB,EAA+B,OAAOR,UAAP;AAC/B,UAAI,CAACI,GAAG,CAACC,IAAJ,CAASC,MAAT,CAAgBG,WAArB,EAAkC,OAAOT,UAAP;;AAElC,UAAI,CAACF,aAAL,EAAoB;AAClBY,QAAAA,OAAO,CAACC,GAAR,CAAYP,GAAG,CAACC,IAAhB;AACAR,QAAAA,QAAQ,CAACO,GAAG,CAACC,IAAJ,CAASO,IAAT,CAAchB,KAAf,CAAR;AACAiB,QAAAA,oBAAoB,CAAC,IAAD,CAApB;AACD;AACF,KAVD;AAWD,GAxBY,CA0Bb;AAGA;;;AACA,MAAIC,YAAJ,EAAkB;AAChB,UAAMC,YAAY,GAAG;AAAErB,MAAAA,EAAF;AAAME,MAAAA;AAAN,KAArB;AACA,wBACE,oBAAC,cAAD;AAAgB,MAAA,YAAY,EAAEmB,YAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,YAAD;AAAc,MAAA,YAAY,EAAEA,YAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,gBAAD;AAAkB,MAAA,YAAY,EAAEA,YAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,SAAD;AAAW,MAAA,YAAY,EAAEA,YAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CADF,CADF;AASD,GAXD,MAWO;AACL,WAAOf,UAAP;AACD;AAEF;;AAED,eAAeP,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Connection from './Connection/Connection'\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport Dashboard from './Dashboard'\nimport api from '../api'\nimport { ChannelsProvider } from '../contexts/ChannelsProvider';\nimport { SocketProvider } from '../contexts/SocketProvider';\nimport { UserProvider } from '../contexts/UserProvider';\n\nfunction App() {\n  // Fonctions pour utiliser le stockage local pour l'id et le token\n  const [id, setId] = useLocalStorage('id')\n  const [token, setToken] = useLocalStorage('token')\n\n  const [loginValidity, setloginValidity] = useState(false)\n\n  const connection = <Connection setId={setId} setToken={setToken} />\n\n  // Si l'id ou le token n'est pas présent il faut se connecter pour obtenir ces informations\n  if (id === undefined || token === undefined) {\n    return connection\n  } else {\n    api.autologinUser({ id, token }).then(res => {\n      if (!res.data.status.success) return connection\n      if (!res.data.status.idValide) return connection\n      if (!res.data.status.tokenValide) return connection\n  \n      if (!loginValidity) {\n        console.log(res.data)\n        setToken(res.data.user.token)\n        setAutoLoginValidity(true)\n      }\n    })\n  }\n\n  // Le \"useEffect\" est utilisé pour géré l'asynchrone\n  \n\n  // Si toutes les informations sont présentes j'affiche le \"Dashboard\"\n  if (lginValidity) {\n    const localStorage = { id, token }\n    return (\n      <SocketProvider localStorage={localStorage}>\n        <UserProvider localStorage={localStorage}>\n          <ChannelsProvider localStorage={localStorage}>\n            <Dashboard localStorage={localStorage} />\n          </ChannelsProvider>\n        </UserProvider>\n      </SocketProvider>\n    )\n  } else {\n    return connection\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}