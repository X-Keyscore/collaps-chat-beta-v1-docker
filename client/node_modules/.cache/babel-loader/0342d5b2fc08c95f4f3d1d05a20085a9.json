{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anton\\\\Desktop\\\\collaps-chat\\\\dev\\\\Beta\\\\V1\\\\client\\\\src\\\\components\\\\App.js\";\nimport React, { useState, useEffect } from 'react';\nimport Connection from './Connection/Connection';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport Dashboard from './Dashboard';\nimport api from '../api';\nimport { ChannelsProvider } from '../contexts/ChannelsProvider';\nimport { SocketProvider } from '../contexts/SocketProvider';\nimport { UserProvider } from '../contexts/UserProvider';\n\nfunction App() {\n  // Fonctions pour utiliser le stockage local pour l'id et le token\n  const [id, setId] = useLocalStorage('id');\n  const [token, setToken] = useLocalStorage('token'); // Création d'un état local pour la validation de l'accès\n\n  const [loginValidity, setLoginValidity] = useState(false);\n  useEffect(() => {\n    // je teste si l'id et le token sont présent\n    if (id === undefined || token === undefined) {\n      return;\n    } else {\n      // Je fais un appel à l'api et vérifie le résultat\n      api.autologinUser({\n        id,\n        token\n      }).then(res => {\n        if (!res.data.status.success) return;\n        if (!res.data.status.idValide) return;\n        if (!res.data.status.tokenValide) return; // Sauvegarde du token en locale\n\n        setToken(res.data.user.token); // Valider l'accés\n\n        setLoginValidity(true);\n      });\n    }\n  }, [id]); // Je teste \"loginValidity\"\n\n  if (loginValidity) {\n    // J'affiche le \"Dashboard\"\n    const storageLocal = {\n      id,\n      token,\n      setId,\n      setToken,\n      setLoginValidity\n    };\n    return /*#__PURE__*/React.createElement(SocketProvider, {\n      storageLocal: storageLocal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(UserProvider, {\n      storageLocal: storageLocal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ChannelsProvider, {\n      storageLocal: storageLocal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Dashboard, {\n      storageLocal: storageLocal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }\n    }))));\n  } else {\n    // J'affiche la page de connection\n    return /*#__PURE__*/React.createElement(Connection, {\n      setId: setId,\n      setToken: setToken,\n      setLoginValidity: setLoginValidity,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 12\n      }\n    });\n  }\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/anton/Desktop/collaps-chat/dev/Beta/V1/client/src/components/App.js"],"names":["React","useState","useEffect","Connection","useLocalStorage","Dashboard","api","ChannelsProvider","SocketProvider","UserProvider","App","id","setId","token","setToken","loginValidity","setLoginValidity","undefined","autologinUser","then","res","data","status","success","idValide","tokenValide","user","storageLocal"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,SAASC,cAAT,QAA+B,4BAA/B;AACA,SAASC,YAAT,QAA6B,0BAA7B;;AAEA,SAASC,GAAT,GAAe;AACb;AACA,QAAM,CAACC,EAAD,EAAKC,KAAL,IAAcR,eAAe,CAAC,IAAD,CAAnC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,eAAe,CAAC,OAAD,CAAzC,CAHa,CAKb;;AACA,QAAM,CAACW,aAAD,EAAgBC,gBAAhB,IAAoCf,QAAQ,CAAC,KAAD,CAAlD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AAEd;AACA,QAAIS,EAAE,KAAKM,SAAP,IAAoBJ,KAAK,KAAKI,SAAlC,EAA6C;AAC3C;AACD,KAFD,MAEO;AACL;AACAX,MAAAA,GAAG,CAACY,aAAJ,CAAkB;AAAEP,QAAAA,EAAF;AAAME,QAAAA;AAAN,OAAlB,EAAiCM,IAAjC,CAAsCC,GAAG,IAAI;AAC3C,YAAI,CAACA,GAAG,CAACC,IAAJ,CAASC,MAAT,CAAgBC,OAArB,EAA8B;AAC9B,YAAI,CAACH,GAAG,CAACC,IAAJ,CAASC,MAAT,CAAgBE,QAArB,EAA+B;AAC/B,YAAI,CAACJ,GAAG,CAACC,IAAJ,CAASC,MAAT,CAAgBG,WAArB,EAAkC,OAHS,CAK3C;;AACAX,QAAAA,QAAQ,CAACM,GAAG,CAACC,IAAJ,CAASK,IAAT,CAAcb,KAAf,CAAR,CAN2C,CAO3C;;AACAG,QAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD,OATD;AAUD;AACF,GAlBQ,EAkBN,CAACL,EAAD,CAlBM,CAAT,CARa,CA4Bb;;AACA,MAAII,aAAJ,EAAmB;AACjB;AACA,UAAMY,YAAY,GAAG;AAAEhB,MAAAA,EAAF;AAAME,MAAAA,KAAN;AAAaD,MAAAA,KAAb;AAAoBE,MAAAA,QAApB;AAA8BE,MAAAA;AAA9B,KAArB;AACA,wBACE,oBAAC,cAAD;AAAgB,MAAA,YAAY,EAAEW,YAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,YAAD;AAAc,MAAA,YAAY,EAAEA,YAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,gBAAD;AAAkB,MAAA,YAAY,EAAEA,YAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,SAAD;AAAW,MAAA,YAAY,EAAEA,YAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CADF,CADF;AASD,GAZD,MAYO;AACL;AACA,wBAAO,oBAAC,UAAD;AAAY,MAAA,KAAK,EAAEf,KAAnB;AAA0B,MAAA,QAAQ,EAAEE,QAApC;AAA8C,MAAA,gBAAgB,EAAEE,gBAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;AAEF;;AAED,eAAeN,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Connection from './Connection/Connection'\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport Dashboard from './Dashboard'\nimport api from '../api'\nimport { ChannelsProvider } from '../contexts/ChannelsProvider';\nimport { SocketProvider } from '../contexts/SocketProvider';\nimport { UserProvider } from '../contexts/UserProvider';\n\nfunction App() {\n  // Fonctions pour utiliser le stockage local pour l'id et le token\n  const [id, setId] = useLocalStorage('id')\n  const [token, setToken] = useLocalStorage('token')\n\n  // Création d'un état local pour la validation de l'accès\n  const [loginValidity, setLoginValidity] = useState(false)\n\n  useEffect(() => {\n\n    // je teste si l'id et le token sont présent\n    if (id === undefined || token === undefined) {\n      return\n    } else {\n      // Je fais un appel à l'api et vérifie le résultat\n      api.autologinUser({ id, token }).then(res => {\n        if (!res.data.status.success) return\n        if (!res.data.status.idValide) return\n        if (!res.data.status.tokenValide) return\n\n        // Sauvegarde du token en locale\n        setToken(res.data.user.token)\n        // Valider l'accés\n        setLoginValidity(true)\n      })\n    }\n  }, [id]);\n\n  // Je teste \"loginValidity\"\n  if (loginValidity) {\n    // J'affiche le \"Dashboard\"\n    const storageLocal = { id, token, setId, setToken, setLoginValidity }\n    return (\n      <SocketProvider storageLocal={storageLocal}>\n        <UserProvider storageLocal={storageLocal}>\n          <ChannelsProvider storageLocal={storageLocal}>\n            <Dashboard storageLocal={storageLocal} />\n          </ChannelsProvider>\n        </UserProvider>\n      </SocketProvider>\n    )\n  } else {\n    // J'affiche la page de connection\n    return <Connection setId={setId} setToken={setToken} setLoginValidity={setLoginValidity} />\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}