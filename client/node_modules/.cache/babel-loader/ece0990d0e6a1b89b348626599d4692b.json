{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anton\\\\Desktop\\\\FInt.Tchat\\\\dev\\\\Beta\\\\V1\\\\client\\\\src\\\\components\\\\container\\\\OpenConversation.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport api from '../../api';\nimport { useUser } from '../../contexts/UserProvider';\nimport { useChannels } from '../../contexts/ChannelsProvider';\nexport default function OpenConversation() {\n  const {\n    client,\n    updateUser\n  } = useUser();\n  const {\n    setChannels,\n    selectedChannel,\n    setSelectedChannel,\n    messagesChannels,\n    sendMessage\n  } = useChannels();\n  const [text, setText] = useState(''); // Fonction pour supprimer un \"channel\" dans les données du client est dans celle du destinataire\n\n  function deleteChannel() {\n    setChannels(channels => [...channels.slice(0, selectedChannel.key), ...channels.slice(selectedChannel.key + 1)]); // J'isole les données du client dans une variable pour pouvoir les modifier\n\n    var userClientEdit = client; // Je boucle tous les \"channels\" du client\n\n    for (let i = 0; i < userClientEdit.channels.length; i++) {\n      // Je teste si l'id du \"channel\" sélectionné correspond à l'id du \"channel\" passé dans la boucle\n      if (userClientEdit.channels[i].id === selectedChannel.id) {\n        // Je supprime le channel dans la liste grace à sa position\n        userClientEdit.channels.splice(i, 1); // Je mets à jour le client\n\n        api.updateUserById(userClientEdit.id, {\n          data: {\n            channels: userClientEdit.channels\n          }\n        }).then(res => {});\n      }\n    } // Récupération des données du destinataire avec son id\n\n\n    api.getUserById(selectedChannel.recipients[0].id).then(userRecipient => {\n      // J'isole les données du destinataire dans une variable pour pouvoir les modifier\n      var userRecipientEdit = userRecipient.data.data; // Je boucle tous les \"channels\" du destinataire\n\n      for (let i = 0; i < userRecipientEdit.channels.length; i++) {\n        // Je teste si l'id du \"channel\" sélectionné correspond à l'id du \"channel\" passé dans la boucle\n        if (userRecipientEdit.channels[i].id === selectedChannel.id) {\n          // Je supprime le channel dans la liste grace à sa position\n          userRecipientEdit.channels.splice(i, 1); // Je mets à jour le destinataire\n\n          updateUser(userRecipientEdit.id, {\n            data: {\n              channels: userRecipientEdit.channels\n            }\n          });\n        }\n      }\n    }, error => {\n      console.log(error);\n    }); // Je reset le channel\n\n    setSelectedChannel(null); // Je supprime le channel\n\n    api.deleteChannelById(selectedChannel.id);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault(); // channel, text, client\n\n    sendMessage(selectedChannel, text, client);\n    setText('');\n  } // Ce script redimensionne le 'textarea' en prenant en compte la taille de l'affichage\n\n\n  useEffect(() => {\n    var scrollarea = document.getElementById('scrollarea');\n\n    const scrollToBottom = node => {\n      node.scrollTop = node.scrollHeight;\n    };\n\n    scrollToBottom(scrollarea);\n    /*scrollarea.scrollIntoView({ behavior: \"smooth\" })*/\n\n    try {\n      // [ Responsive Textarea size ]\n      // Je définis la taille maximale du textarea\n      var msgTextarea = document.getElementById('msgTextarea');\n\n      if (window.screen.height >= 1000) {\n        msgTextarea.style.maxHeight = \"330px\"; //44px = 2 ligne\n      } else if (window.screen.height >= 900) {\n        msgTextarea.style.maxHeight = \"286px\";\n      } else if (window.screen.height >= 800) {\n        msgTextarea.style.maxHeight = \"242px\";\n      } else if (window.screen.height >= 700) {\n        msgTextarea.style.maxHeight = \"198px\";\n      } else if (window.screen.height >= 600) {\n        msgTextarea.style.maxHeight = \"154px\";\n      } else if (window.screen.height >= 500) {\n        msgTextarea.style.maxHeight = \"110px\";\n      } // Redimensionnement automatique\n\n\n      msgTextarea.addEventListener('input', function (event) {\n        var el = this;\n        el.style.height = '22px';\n        el.style.height = el.scrollHeight - 22 + 'px';\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }, []);\n  useEffect(() => {\n    var scrollarea = document.getElementById('scrollarea');\n    var spacer = document.getElementById('spacer');\n    spacer.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messagesChannels]);\n  var lastSenderNow;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"message-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"message-header-user\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"message-header-user-avatar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"avatar\",\n    src: `http://localhost:3000/api/file_avatar/id/${selectedChannel.recipients[0].id}`,\n    alt: \"user profil\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"message-header-user-info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"username\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, selectedChannel.recipients[0].pseudo), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"statut online\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    viewBox: \"0 0 512 512\",\n    \"aria-hidden\": \"false\",\n    width: \"10\",\n    height: \"15\",\n    x: \"0\",\n    y: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"currentColor\",\n    d: \"M256,0C115.39,0,0,115.39,0,256s115.39,256,256,256s256-115.39,256-256S396.61,0,256,0z\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 17\n    }\n  }))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"message-header-toolbar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn-icon-small-red\",\n    type: \"button\",\n    onClick: deleteChannel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    viewBox: \"0 0 512 512\",\n    \"aria-hidden\": \"false\",\n    width: \"20\",\n    height: \"20\",\n    x: \"0\",\n    y: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"polygon\", {\n    fill: \"currentColor\",\n    points: \"512,338.954 483.732,310.686 411.772,382.646 339.812,310.686 311.543,338.954 383.503,410.914 311.543,482.874  339.812,511.142 411.772,439.182 483.732,511.142 512,482.874 440.04,410.914 \\t\\t\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"currentColor\",\n    d: \"M255.858,0.142c-81.562,0-147.918,66.356-147.918,147.918c0,50.52,25.465,95.198,64.226,121.894 c-36.19,12.488-69.36,33.118-97.227,60.984C26.614,379.265,0,443.516,0,511.858h39.978c0-119.037,96.843-215.88,215.88-215.88 c81.562,0,147.918-66.355,147.918-147.918C403.776,66.498,337.42,0.142,255.858,0.142z M255.858,256 c-59.518,0-107.94-48.421-107.94-107.94S196.34,40.12,255.858,40.12c59.518,0,107.94,48.421,107.94,107.94 S315.376,256,255.858,256z\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 15\n    }\n  }))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"message-body scroller\",\n    id: \"scrollarea\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }\n  }, selectedChannel.messages.map((message, index) => {\n    var date = new Date(message.date);\n    date = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()} ${date.getHours()}:${date.getMinutes()}`;\n    const pseudo = client === null ? null : message.sender === client.id ? client.pseudo : selectedChannel.recipients.find(recipient => recipient.id === message.sender).pseudo; // Détecte si plus de deux messages a la suite sont du même destinataire\n\n    var lastSenderPass = lastSenderNow;\n    lastSenderNow = message.sender;\n    return lastSenderNow !== lastSenderPass ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"message-body-message parents\",\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"message-body-message-avatar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"avatar\",\n      src: `http://localhost:3000/api/file_avatar/id/${message.sender}`,\n      alt: \"user profil\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"message-body-message-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"pseudo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 21\n      }\n    }, pseudo), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"timestamp\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 21\n      }\n    }, date)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"message-body-message-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 19\n      }\n    }, message.text)) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"message-body-message children\",\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"message-body-message-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 19\n      }\n    }, message.text));\n  }), messagesChannels.length === 0 ? null : messagesChannels.find(messagesChannel => messagesChannel.id === selectedChannel.id).messages.map((message, index) => {\n    var date = new Date(message.date);\n    date = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()} ${date.getHours()}:${date.getMinutes()}`; // Détecte si plus de deux messages a la suite sont du même destinataire\n\n    var lastSenderPass = lastSenderNow;\n    lastSenderNow = message.sender.id;\n    return lastSenderNow !== lastSenderPass ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"message-body-message parents\",\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"message-body-message-avatar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"avatar\",\n      src: `http://localhost:3000/api/file_avatar/id/${message.sender.id}`,\n      alt: \"user profil\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"message-body-message-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"pseudo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 21\n      }\n    }, message.sender.pseudo), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"timestamp\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 21\n      }\n    }, date)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"message-body-message-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 19\n      }\n    }, message.text)) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"message-body-message children\",\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"message-body-message-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 19\n      }\n    }, message.text));\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"message-body-spacer\",\n    id: \"spacer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"message-footer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: \"message-footer-toolbar\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"message-footer-toolbar-uploadBtn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    className: \"icon\",\n    width: \"24\",\n    height: \"24\",\n    viewBox: \"0 0 24 24\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"currentColor\",\n    d: \"M12 2.00098C6.486 2.00098 2 6.48698 2 12.001C2 17.515 6.486 22.001 12 22.001C17.514 22.001 22 17.515 22 12.001C22 6.48698 17.514 2.00098 12 2.00098ZM17 13.001H13V17.001H11V13.001H7V11.001H11V7.00098H13V11.001H17V13.001Z\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"input\",\n    type: \"file\",\n    multiple: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"textarea\", {\n    id: \"msgTextarea\",\n    className: \"message-footer-toolbar-textarea scroller\",\n    placeholder: \"Envoyer un message à \" + selectedChannel.recipients[0].pseudo,\n    spellCheck: \"true\",\n    autoFocus: true,\n    autoComplete: \"off\",\n    value: text,\n    onChange: e => setText(e.target.value),\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"message-footer-toolbar-sendBtn\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    viewBox: \"0 0 512 512\",\n    \"aria-hidden\": \"false\",\n    width: \"20\",\n    height: \"20\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"currentColor\",\n    d: \"M481.508,210.336L68.414,38.926c-17.403-7.222-37.064-4.045-51.309,8.287C2.86,59.547-3.098,78.551,1.558,96.808 L38.327,241h180.026c8.284,0,15.001,6.716,15.001,15.001c0,8.284-6.716,15.001-15.001,15.001H38.327L1.558,415.193 c-4.656,18.258,1.301,37.262,15.547,49.595c14.274,12.357,33.937,15.495,51.31,8.287l413.094-171.409 C500.317,293.862,512,276.364,512,256.001C512,235.638,500.317,218.139,481.508,210.336z\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 15\n    }\n  }))))));\n}","map":{"version":3,"sources":["C:/Users/anton/Desktop/FInt.Tchat/dev/Beta/V1/client/src/components/container/OpenConversation.js"],"names":["React","useState","useEffect","useRef","api","useUser","useChannels","OpenConversation","client","updateUser","setChannels","selectedChannel","setSelectedChannel","messagesChannels","sendMessage","text","setText","deleteChannel","channels","slice","key","userClientEdit","i","length","id","splice","updateUserById","data","then","res","getUserById","recipients","userRecipient","userRecipientEdit","error","console","log","deleteChannelById","handleSubmit","e","preventDefault","scrollarea","document","getElementById","scrollToBottom","node","scrollTop","scrollHeight","msgTextarea","window","screen","height","style","maxHeight","addEventListener","event","el","spacer","scrollIntoView","behavior","lastSenderNow","pseudo","messages","map","message","index","date","Date","getDate","getMonth","getFullYear","getHours","getMinutes","sender","find","recipient","lastSenderPass","messagesChannel","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect,  useRef } from 'react'\n\nimport api from '../../api'\n\nimport { useUser } from '../../contexts/UserProvider';\nimport { useChannels } from '../../contexts/ChannelsProvider';\n\nexport default function OpenConversation() {\n  const { client, updateUser } = useUser()\n  const { setChannels, selectedChannel, setSelectedChannel, messagesChannels, sendMessage } = useChannels()\n\n  const [text, setText] = useState('')\n\n  // Fonction pour supprimer un \"channel\" dans les données du client est dans celle du destinataire\n  function deleteChannel() {\n    setChannels(channels => [\n      ...channels.slice(0, selectedChannel.key),\n      ...channels.slice(selectedChannel.key + 1)\n    ]);\n\n    // J'isole les données du client dans une variable pour pouvoir les modifier\n    var userClientEdit = client\n\n    // Je boucle tous les \"channels\" du client\n    for (let i = 0; i < userClientEdit.channels.length; i++) {\n      // Je teste si l'id du \"channel\" sélectionné correspond à l'id du \"channel\" passé dans la boucle\n      if (userClientEdit.channels[i].id === selectedChannel.id) {\n        // Je supprime le channel dans la liste grace à sa position\n        userClientEdit.channels.splice(i, 1);\n        // Je mets à jour le client\n        api.updateUserById(userClientEdit.id, { data: { channels: userClientEdit.channels } }).then(res => { })\n      }\n    }\n\n    // Récupération des données du destinataire avec son id\n    api.getUserById(selectedChannel.recipients[0].id).then(\n      (userRecipient) => {\n\n        // J'isole les données du destinataire dans une variable pour pouvoir les modifier\n        var userRecipientEdit = userRecipient.data.data\n\n        // Je boucle tous les \"channels\" du destinataire\n        for (let i = 0; i < userRecipientEdit.channels.length; i++) {\n          // Je teste si l'id du \"channel\" sélectionné correspond à l'id du \"channel\" passé dans la boucle\n          if (userRecipientEdit.channels[i].id === selectedChannel.id) {\n            // Je supprime le channel dans la liste grace à sa position\n            userRecipientEdit.channels.splice(i, 1);\n            // Je mets à jour le destinataire\n            updateUser(userRecipientEdit.id, { data: { channels: userRecipientEdit.channels } })\n          }\n        }\n\n      },\n      (error) => {\n        console.log(error)\n      }\n    )\n    // Je reset le channel\n    setSelectedChannel(null)\n    // Je supprime le channel\n    api.deleteChannelById(selectedChannel.id)\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault()\n\n    // channel, text, client\n    sendMessage(\n      selectedChannel,\n      text,\n      client,\n    )\n    setText('')\n  }\n  \n  // Ce script redimensionne le 'textarea' en prenant en compte la taille de l'affichage\n  useEffect(() => {\n\n    var scrollarea = document.getElementById('scrollarea');\n\n    const scrollToBottom = (node) => {\n      node.scrollTop = node.scrollHeight;\n    }\n    scrollToBottom(scrollarea);\n    /*scrollarea.scrollIntoView({ behavior: \"smooth\" })*/\n    try {\n      // [ Responsive Textarea size ]\n      // Je définis la taille maximale du textarea\n      var msgTextarea = document.getElementById('msgTextarea');\n      if (window.screen.height >= 1000) {\n        msgTextarea.style.maxHeight = \"330px\"//44px = 2 ligne\n      } else if (window.screen.height >= 900) {\n        msgTextarea.style.maxHeight = \"286px\"\n      } else if (window.screen.height >= 800) {\n        msgTextarea.style.maxHeight = \"242px\"\n      } else if (window.screen.height >= 700) {\n        msgTextarea.style.maxHeight = \"198px\"\n      } else if (window.screen.height >= 600) {\n        msgTextarea.style.maxHeight = \"154px\"\n      } else if (window.screen.height >= 500) {\n        msgTextarea.style.maxHeight = \"110px\"\n      }\n      // Redimensionnement automatique\n      msgTextarea.addEventListener('input', function (event) {\n        var el = this;\n        el.style.height = '22px';\n        el.style.height = (el.scrollHeight - 22) + 'px';\n      });\n    } catch (error) {\n      console.error(error)\n    }\n  }, []);\n  \n  useEffect(() => {\n    var scrollarea = document.getElementById('scrollarea');\n    var spacer = document.getElementById('spacer');\n    spacer.scrollIntoView({ behavior: \"smooth\" })\n  }, [messagesChannels]);\n  var lastSenderNow;\n\n  return (\n    <div className=\"message\">\n      <div className=\"message-header\">\n        <div className=\"message-header-user\">\n          <div className=\"message-header-user-avatar\">\n            <img className=\"avatar\"\n              src={`http://localhost:3000/api/file_avatar/id/${selectedChannel.recipients[0].id}`}\n              alt=\"user profil\" />\n          </div>\n          <div className=\"message-header-user-info\">\n            <div className=\"username\">\n              {selectedChannel.recipients[0].pseudo}\n            </div>\n            <div className=\"statut online\">\n              <svg viewBox=\"0 0 512 512\" aria-hidden=\"false\" width=\"10\" height=\"15\" x=\"0\" y=\"0\">\n                <path fill=\"currentColor\"\n                  d=\"M256,0C115.39,0,0,115.39,0,256s115.39,256,256,256s256-115.39,256-256S396.61,0,256,0z\" />\n              </svg>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"message-header-toolbar\">\n          <button className=\"btn-icon-small-red\" type=\"button\" onClick={deleteChannel}>\n            <svg viewBox=\"0 0 512 512\" aria-hidden=\"false\" width=\"20\" height=\"20\" x=\"0\" y=\"0\">\n              <polygon fill=\"currentColor\" points=\"512,338.954 483.732,310.686 411.772,382.646 339.812,310.686 311.543,338.954 383.503,410.914 311.543,482.874 \n              339.812,511.142 411.772,439.182 483.732,511.142 512,482.874 440.04,410.914 \t\t\"/>\n              <path fill=\"currentColor\" d=\"M255.858,0.142c-81.562,0-147.918,66.356-147.918,147.918c0,50.52,25.465,95.198,64.226,121.894\n              c-36.19,12.488-69.36,33.118-97.227,60.984C26.614,379.265,0,443.516,0,511.858h39.978c0-119.037,96.843-215.88,215.88-215.88\n              c81.562,0,147.918-66.355,147.918-147.918C403.776,66.498,337.42,0.142,255.858,0.142z M255.858,256\n              c-59.518,0-107.94-48.421-107.94-107.94S196.34,40.12,255.858,40.12c59.518,0,107.94,48.421,107.94,107.94\n              S315.376,256,255.858,256z\"/>\n            </svg>\n          </button>\n        </div>\n      </div>\n      <div className=\"message-body scroller\" id=\"scrollarea\">\n        {\n          selectedChannel.messages.map((message, index) => {\n\n            var date = new Date(message.date);\n            date = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()} ${date.getHours()}:${date.getMinutes()}`\n\n            const pseudo = client === null ? null : message.sender === client.id ? client.pseudo : selectedChannel.recipients.find(recipient => recipient.id === message.sender).pseudo\n\n            // Détecte si plus de deux messages a la suite sont du même destinataire\n            var lastSenderPass = lastSenderNow;\n            lastSenderNow = message.sender;\n\n            return (\n              lastSenderNow !== lastSenderPass\n                ?\n                <div\n                  className=\"message-body-message parents\"\n                  key={index}\n                >\n                  <div className=\"message-body-message-avatar\">\n                    <img className=\"avatar\"\n                      src={`http://localhost:3000/api/file_avatar/id/${message.sender}`}\n                      alt=\"user profil\" />\n                  </div>\n                  <h2 className=\"message-body-message-header\">\n                    <span className=\"pseudo\">\n                      {pseudo}\n                    </span>\n                    <span className=\"timestamp\">\n                      {date}\n                    </span>\n                  </h2>\n                  <div className=\"message-body-message-text\">\n                    {message.text}\n                  </div>\n                </div>\n                :\n                <div\n                  className=\"message-body-message children\"\n                  key={index}\n                >\n                  <div className=\"message-body-message-text\">\n                    {message.text}\n                  </div>\n                </div>\n            )\n          })\n        }\n        {\n          messagesChannels.length === 0 ? null : messagesChannels.find(messagesChannel => messagesChannel.id === selectedChannel.id).messages.map((message, index) => {\n\n            var date = new Date(message.date);\n            date = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()} ${date.getHours()}:${date.getMinutes()}`\n\n            // Détecte si plus de deux messages a la suite sont du même destinataire\n            var lastSenderPass = lastSenderNow;\n            lastSenderNow = message.sender.id;\n\n            return (\n              lastSenderNow !== lastSenderPass\n                ?\n                <div\n                  className=\"message-body-message parents\"\n                  key={index}\n                >\n                  <div className=\"message-body-message-avatar\">\n                    <img className=\"avatar\"\n                      src={`http://localhost:3000/api/file_avatar/id/${message.sender.id}`}\n                      alt=\"user profil\" />\n                  </div>\n                  <h2 className=\"message-body-message-header\">\n                    <span className=\"pseudo\">\n                      {message.sender.pseudo}\n                    </span>\n                    <span className=\"timestamp\">\n                      {date}\n                    </span>\n                  </h2>\n                  <div className=\"message-body-message-text\">\n                    {message.text}\n                  </div>\n                </div>\n                :\n                <div\n                  className=\"message-body-message children\"\n                  key={index}\n                >\n                  <div className=\"message-body-message-text\">\n                    {message.text}\n                  </div>\n                </div>\n            )\n          })\n        }\n        <div className=\"message-body-spacer\" id=\"spacer\"></div>\n      </div>\n      <div className=\"message-footer\">\n        <form className=\"message-footer-toolbar\" onSubmit={handleSubmit}>\n\n          <div className=\"message-footer-toolbar-uploadBtn\">\n            <svg className=\"icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n              <path fill=\"currentColor\" d=\"M12 2.00098C6.486 2.00098 2 6.48698 2 12.001C2 17.515 6.486 22.001 12 22.001C17.514 22.001 22 17.515 22 12.001C22\n                    6.48698 17.514 2.00098 12 2.00098ZM17 13.001H13V17.001H11V13.001H7V11.001H11V7.00098H13V11.001H17V13.001Z\">\n              </path>\n            </svg>\n            <input className=\"input\" type=\"file\" multiple />\n          </div>\n\n          <textarea id=\"msgTextarea\" className=\"message-footer-toolbar-textarea scroller\" placeholder={\"Envoyer un message à \" + selectedChannel.recipients[0].pseudo}\n            spellCheck=\"true\" autoFocus autoComplete=\"off\"\n            value={text}\n            onChange={e => setText(e.target.value)}\n            required\n          ></textarea>\n\n          <button className=\"message-footer-toolbar-sendBtn\" type=\"submit\">\n            <svg viewBox=\"0 0 512 512\" aria-hidden=\"false\" width=\"20\" height=\"20\">\n              <path fill=\"currentColor\" d=\"M481.508,210.336L68.414,38.926c-17.403-7.222-37.064-4.045-51.309,8.287C2.86,59.547-3.098,78.551,1.558,96.808\n                  L38.327,241h180.026c8.284,0,15.001,6.716,15.001,15.001c0,8.284-6.716,15.001-15.001,15.001H38.327L1.558,415.193\n                  c-4.656,18.258,1.301,37.262,15.547,49.595c14.274,12.357,33.937,15.495,51.31,8.287l413.094-171.409\n                  C500.317,293.862,512,276.364,512,256.001C512,235.638,500.317,218.139,481.508,210.336z\" />\n            </svg>\n          </button>\n\n        </form>\n      </div>\n    </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}