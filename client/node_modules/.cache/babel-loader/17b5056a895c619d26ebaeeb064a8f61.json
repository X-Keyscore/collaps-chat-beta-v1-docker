{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anton\\\\Desktop\\\\FInt.Tchat\\\\dev\\\\Beta\\\\V1\\\\client\\\\src\\\\components\\\\sidebar\\\\ChannelsContacts.js\";\nimport React, { useEffect } from 'react';\nimport api from \"../../api\";\nimport { useUser } from '../../contexts/UserProvider';\nimport { useChannels } from '../../contexts/ChannelsProvider';\nimport useLocalStorage from '../../hooks/useLocalStorage';\nexport default function ChannelsContacts() {\n  const {\n    client\n  } = useUser();\n  const {\n    channels,\n    setChannels,\n    selectedChannel,\n    setSelectedChannel,\n    setMessagesChannels\n  } = useChannels();\n  const [id] = useLocalStorage('id'); // Le \"useEffect\" est utilisé pour géré l'asynchrone\n\n  useEffect(() => {\n    // Je teste si le client est chargé\n    if (client === null) return; // Je teste si le client à des conversations\n\n    if (client.channels.length === 0) return setChannels([]); // Fonction asynchrone pour faire le rendu des channels du client\n\n    async function fetchRenderClientChannels() {\n      return renderChannels(client).then(channels => setChannels(channels));\n    } // Appel de la fonction\n\n\n    fetchRenderClientChannels();\n  }, [setChannels, client]); // Cette fonction renvoie les données du client\n\n  function renderChannels(client) {\n    return new Promise(resolve => {\n      // Variable pour stocker les channels du client\n      var clientChannels = client.channels; // Je filtre pour ne récupérer que les contacts privés\n\n      clientChannels.filter(channel => channel.type === \"private\").forEach((channel, index) => {\n        // Je récupère les informations sur le destinataire grace à sont id\n        api.getChannelById(channel.id).then(channelD => {\n          var recipientId = channelD.data.data.recipients.filter(recipient => recipient !== client.id)[0];\n          api.getUserById(recipientId).then(recipient => {\n            // Si le destinataire n'existe plus je le supprime des données du client et le channel\n            if (recipient.data.data === null) {\n              // Je boucle tous les \"channels\" du client\n              for (let i = 0; i < client.channels.length; i++) {\n                // Je teste si l'id du \"channel\" sélectionné correspond à l'id du \"channel\" passé dans la boucle\n                if (client.channels[i].id === channelD.data.data.id) {\n                  // Je supprime le \"channel\" dans la liste grace à sa position\n                  client.channels.splice(i, 1); // Je mets à jour le client\n\n                  api.updateUserById(client.id, {\n                    data: {\n                      channels: client.channels\n                    }\n                  }).then(res => {}); // Je supprime le channel\n\n                  api.deleteChannelById(channelD.data.data.id);\n                }\n              }\n            } // Je complète les informations existantes du destinataire avec celle de la base de données\n\n\n            var channelEdit = channelD.data.data; // Ajout des infos sur le desinataire\n\n            channelEdit.recipients = [{\n              id: recipient.data.data.id,\n              pseudo: recipient.data.data.pseudo\n            }]; // J'ajoute un element \"selected\" à \"channel\" est passe la valeur \"true\" au premier\n\n            Object.assign(channelEdit, {\n              selected: false\n            });\n            Object.assign(channelEdit, {\n              key: index\n            }); // Je mets à jour l'object la list des \"channels\" du client\n\n            clientChannels[index] = channelEdit;\n            if (client.channels.length === index + 1) return resolve(clientChannels);\n          });\n        });\n      });\n    });\n  } // Si \"client\" est \"null\" c'est qu'il est en chargement donc j'affiche chargement\n\n\n  if (channels === null) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar-body-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }\n    }, \"Chargement...\");\n  } // Si \"client.channels\" est vide c'est qu'il n'y a pas de constact donc j'affiche aucun contact\n\n\n  if (channels.length === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar-body-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 7\n      }\n    }, \"Aucun contact\");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, channels.map(channel => /*#__PURE__*/React.createElement(\"button\", {\n    key: channel.id,\n    className: `sidebar-body-contact ${selectedChannel === null ? null : selectedChannel.id === channel.id ? 'selected' : ''}`,\n    onClick: () => {\n      // Reset du tableau des messages\n      setMessagesChannels([]); // Je sélectionne le \"channel\"\n\n      console.log(channel);\n      setSelectedChannel(channel);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sidebar-body-contact-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sidebar-body-contact-content-avatar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    width: \"40\",\n    height: \"32\",\n    viewBox: \"0 0 40 32\",\n    \"aria-hidden\": \"true\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"foreignObject\", {\n    x: \"0\",\n    y: \"0\",\n    width: \"32\",\n    height: \"32\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"avatar\",\n    src: \"http://localhost:3000/api/file_avatar/id/\" + channel.recipients[0].id,\n    \"aria-hidden\": \"true\",\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"rect\", {\n    className: \"online\",\n    fill: \"currentColor\",\n    width: \"10\",\n    height: \"10\",\n    x: \"22\",\n    y: \"22\",\n    rx: \"15\",\n    ry: \"15\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 19\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sidebar-body-contact-content-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"username\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"overflow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 19\n    }\n  }, channel.recipients[0].pseudo)))))));\n}","map":{"version":3,"sources":["C:/Users/anton/Desktop/FInt.Tchat/dev/Beta/V1/client/src/components/sidebar/ChannelsContacts.js"],"names":["React","useEffect","api","useUser","useChannels","useLocalStorage","ChannelsContacts","client","channels","setChannels","selectedChannel","setSelectedChannel","setMessagesChannels","id","length","fetchRenderClientChannels","renderChannels","then","Promise","resolve","clientChannels","filter","channel","type","forEach","index","getChannelById","channelD","recipientId","data","recipients","recipient","getUserById","i","splice","updateUserById","res","deleteChannelById","channelEdit","pseudo","Object","assign","selected","key","map","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\n\nimport api from \"../../api\"\n\nimport { useUser } from '../../contexts/UserProvider';\nimport { useChannels } from '../../contexts/ChannelsProvider';\nimport useLocalStorage from '../../hooks/useLocalStorage';  \n\nexport default function ChannelsContacts() {\n  const { client } = useUser()\n  const { channels, setChannels, selectedChannel, setSelectedChannel, setMessagesChannels } = useChannels()\n\n  const [id] = useLocalStorage('id')\n  \n  // Le \"useEffect\" est utilisé pour géré l'asynchrone\n  useEffect(() => {\n    // Je teste si le client est chargé\n    if (client === null) return\n    // Je teste si le client à des conversations\n    if (client.channels.length === 0) return setChannels([])\n    // Fonction asynchrone pour faire le rendu des channels du client\n    async function fetchRenderClientChannels() {\n      return renderChannels(client).then(channels => setChannels(channels))\n    }\n    // Appel de la fonction\n    fetchRenderClientChannels();\n  }, [setChannels, client])\n\n  // Cette fonction renvoie les données du client\n  function renderChannels(client) {\n    return new Promise((resolve) => {\n\n      // Variable pour stocker les channels du client\n      var clientChannels = client.channels\n\n      // Je filtre pour ne récupérer que les contacts privés\n      clientChannels.filter(channel => channel.type === \"private\").forEach((channel, index) => {\n\n        // Je récupère les informations sur le destinataire grace à sont id\n        api.getChannelById(channel.id).then((channelD) => {\n\n          var recipientId = channelD.data.data.recipients.filter(recipient => recipient !== client.id)[0]\n\n          api.getUserById(recipientId).then((recipient) => {\n\n            // Si le destinataire n'existe plus je le supprime des données du client et le channel\n            if (recipient.data.data === null) {\n              // Je boucle tous les \"channels\" du client\n              for (let i = 0; i < client.channels.length; i++) {\n                // Je teste si l'id du \"channel\" sélectionné correspond à l'id du \"channel\" passé dans la boucle\n                if (client.channels[i].id === channelD.data.data.id) {\n                  // Je supprime le \"channel\" dans la liste grace à sa position\n                  client.channels.splice(i, 1);\n                  // Je mets à jour le client\n                  api.updateUserById(client.id, { data: { channels: client.channels } }).then(res => { })\n                  // Je supprime le channel\n                  api.deleteChannelById(channelD.data.data.id)\n                }\n              }\n            }\n\n            // Je complète les informations existantes du destinataire avec celle de la base de données\n            var channelEdit = channelD.data.data\n\n            // Ajout des infos sur le desinataire\n            channelEdit.recipients = [{\n              id: recipient.data.data.id,\n              pseudo: recipient.data.data.pseudo\n            }]\n\n            // J'ajoute un element \"selected\" à \"channel\" est passe la valeur \"true\" au premier\n            Object.assign(channelEdit, { selected: false })\n            Object.assign(channelEdit, { key: index })\n\n            // Je mets à jour l'object la list des \"channels\" du client\n            clientChannels[index] = channelEdit\n\n            if (client.channels.length === index + 1) return resolve(clientChannels)\n\n          })\n        });\n      })\n    })\n  }\n\n  // Si \"client\" est \"null\" c'est qu'il est en chargement donc j'affiche chargement\n  if (channels === null) {\n    return (\n      <div className=\"sidebar-body-info\">Chargement...</div>\n    );\n  }\n  // Si \"client.channels\" est vide c'est qu'il n'y a pas de constact donc j'affiche aucun contact\n  if (channels.length === 0) {\n    return (\n      <div className=\"sidebar-body-info\">Aucun contact</div>\n    );\n  }\n  return (\n    <>\n      {\n        channels.map((channel) => (\n          <button\n            key={channel.id}\n            className={`sidebar-body-contact ${selectedChannel === null ? null : selectedChannel.id === channel.id ? 'selected' : ''}`}\n            onClick={() => {\n              // Reset du tableau des messages\n              setMessagesChannels([])\n              // Je sélectionne le \"channel\"\n              console.log(channel)\n              setSelectedChannel(channel)\n            }}\n          >\n            <div className=\"sidebar-body-contact-content\">\n              <div className=\"sidebar-body-contact-content-avatar\">\n\n                <svg width=\"40\" height=\"32\" viewBox=\"0 0 40 32\" aria-hidden=\"true\">\n                  <foreignObject x=\"0\" y=\"0\" width=\"32\" height=\"32\">\n                    <img className=\"avatar\" src={\"http://localhost:3000/api/file_avatar/id/\" + channel.recipients[0].id} aria-hidden=\"true\" alt=\"\" />\n                  </foreignObject>\n                  <rect className=\"online\" fill=\"currentColor\" width=\"10\" height=\"10\" x=\"22\" y=\"22\" rx=\"15\" ry=\"15\"></rect>\n                </svg>\n\n              </div>\n              <div className=\"sidebar-body-contact-content-text\">\n                <div className=\"username\">\n                  <div className=\"overflow\">\n                    {channel.recipients[0].pseudo}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </button>\n        ))\n      }\n    </>\n  )\n}"]},"metadata":{},"sourceType":"module"}